<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) Microsoft Corporation.  All rights reserved.
-->
<doc>
  <assembly>
    <name>System.Net</name>
  </assembly>
  <members>
    <member name="T:System.Net.Cookie">
      <summary>Provides an object for use with HTTP requests to persist state information for a Silverlight-based application.</summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cookie" /> class. </summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cookie" /> class with the specified name and value.</summary>
      <param name="name">The name of the <see cref="T:System.Net.Cookie" />. The <paramref name="name" /> parameter cannot contain the following characters: equal sign (=), semicolon (;), comma (,), newline (\n), return (\r), tab (\t), and space character. The dollar sign character ($) cannot be the first character.</param>
      <param name="value">The value for the <see cref="T:System.Net.Cookie" />. The <paramref name="value" /> parameter cannot contain a semicolon (;) or a comma (,) unless they are contained in escaped double quotes.</param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> is null or an empty string (""). -or-<paramref name="name" /> contains an unauthorized character. Using one of the following characters will cause an exception: equal sign (=)semicolon (;) comma (,)newline (\n)return (\r) tab (\t) space character dollar sign ($) as the first character-or-<paramref name="value" /> is null or contains a semicolon (;) or a comma (,) that is not contained in escaped double quotes.</exception>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cookie" /> class with the specified name, value and path.</summary>
      <param name="name">The name of the <see cref="T:System.Net.Cookie" />. The <paramref name="name" /> parameter cannot contain the following characters: equal sign (=), semicolon (;), comma (,), newline (\n), return (\r), tab (\t), and space character. The dollar sign character ($) cannot be the first character.</param>
      <param name="value">The value for the <see cref="T:System.Net.Cookie" />. The <paramref name="value" /> parameter cannot contain a semicolon (;) or a comma (,) unless they are contained in escaped double quotes.</param>
      <param name="path">The path portion of a URI to which this cookie applies.</param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> is null or an empty string (""). -or-<paramref name="name" /> contains an unauthorized character. Using one of the following characters will cause an exception: equal sign (=)semicolon (;) comma (,)newline (\n)return (\r) tab (\t) space character dollar sign ($) as the first character-or-<paramref name="value" /> is null or contains a semicolon (;) or a comma (,) that is not contained in escaped double quotes.</exception>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Cookie" /> class with the specified name, value, path and domain.</summary>
      <param name="name">The name of the <see cref="T:System.Net.Cookie" />. The <paramref name="name" /> parameter cannot contain the following characters: equal sign (=), semicolon (;), comma (,), newline (\n), return (\r), tab (\t), and space character. The dollar sign character ($) cannot be the first character.</param>
      <param name="value">The value for the <see cref="T:System.Net.Cookie" />. The <paramref name="value" /> parameter cannot contain a semicolon (;) or a comma (,) unless they are contained in escaped double quotes.</param>
      <param name="path">The path portion of a URI to which this cookie applies.</param>
      <param name="domain">The domain portion of a URI to which this cookie applies.</param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> is null or an empty string (""). -or-<paramref name="name" /> contains an unauthorized character. Using one of the following characters will cause an exception: equal sign (=)semicolon (;) comma (,)newline (\n)return (\r) tab (\t) space character dollar sign ($) as the first character-or-<paramref name="value" /> is null or contains a semicolon (;) or comma (,) that is not contained in escaped double quotes.</exception>
    </member>
    <member name="P:System.Net.Cookie.Comment">
      <summary>Gets or sets an optional comment that provides the intended use of the cookie. </summary>
      <returns>The intended use of the cookie.</returns>
    </member>
    <member name="P:System.Net.Cookie.CommentUri">
      <summary>Gets or sets a Uniform Resource Identifier (URI) comment that the server provides for this <see cref="T:System.Net.Cookie" />.</summary>
      <returns>The URI comment that the server provides for this <see cref="T:System.Net.Cookie" />.</returns>
    </member>
    <member name="P:System.Net.Cookie.Discard">
      <summary>Gets or sets a values that indicates whether the client is to discard the <see cref="T:System.Net.Cookie" /> at the end of the current session.</summary>
      <returns>true if the client should discard the <see cref="T:System.Net.Cookie" /> at the end of the session; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.Cookie.Domain">
      <summary>Gets or sets the domain of a Uniform Resource Identifier (URI) for which the cookie is valid.</summary>
      <returns>The domain of a URI for which the cookie is valid. The default is an empty string ("").</returns>
    </member>
    <member name="M:System.Net.Cookie.Equals(System.Object)">
      <summary>Determines if two <see cref="T:System.Net.Cookie" /> objects are equal.</summary>
      <returns>true if the cookie objects are equal; otherwise, false.</returns>
      <param name="comparand">The <see cref="T:System.Net.Cookie" /> to compare to this <see cref="T:System.Net.Cookie" /> for equality.</param>
    </member>
    <member name="P:System.Net.Cookie.Expired">
      <summary>Gets or sets a values that indicates whether this <see cref="T:System.Net.Cookie" /> is no longer valid.</summary>
      <returns>true if the cookie is no longer valid; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.Cookie.Expires">
      <summary>Gets or sets the expiration date and time for the <see cref="T:System.Net.Cookie" />.</summary>
      <returns>The expiration date and time for the <see cref="T:System.Net.Cookie" />. The default is <see cref="F:System.DateTime.MinValue" />.</returns>
    </member>
    <member name="M:System.Net.Cookie.GetHashCode">
      <summary>Gets the hash code for this <see cref="T:System.Net.Cookie" />.</summary>
      <returns>The hash code for this <see cref="T:System.Net.Cookie" />.</returns>
    </member>
    <member name="P:System.Net.Cookie.HttpOnly">
      <summary>Gets or sets a value that indicates whether a page script or other active content can access this cookie. </summary>
      <returns>true to indicate that a page script or other active content cannot access this <see cref="T:System.Net.Cookie" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.Cookie.Name">
      <summary>Gets or sets the name of this cookie.</summary>
      <returns>The name of the cookie.</returns>
      <exception cref="T:System.Net.CookieException">The value specified for a set operation is null or an empty string (""). -or-The value specified for a set operation contains an unauthorized character. Using one of the following characters will cause an exception: equal sign (=)semicolon (;) comma (,)newline (\n)return (\r) tab (\t) space character dollar sign ($) as the first character </exception>
    </member>
    <member name="P:System.Net.Cookie.Path">
      <summary>Gets or sets the path portion of a Uniform Resource Identifier (URI) to which this cookie applies.</summary>
      <returns>The path portion of a URI to which this cookie applies.</returns>
    </member>
    <member name="P:System.Net.Cookie.Port">
      <summary>Gets or sets a list of Transmission Control Protocol (TCP) ports to which this cookie applies.</summary>
      <returns>A comma delimited list of TCP ports to which this cookie applies.</returns>
      <exception cref="T:System.Net.CookieException">
        <see cref="P:System.Net.Cookie.Port" /> is set to an incorrect format.</exception>
    </member>
    <member name="P:System.Net.Cookie.Secure">
      <summary>Gets or sets a value that indicates whether including the cookie on subsequent client requests requires the request be sent with Secure Hypertext Transport Protocol (HTTPS).</summary>
      <returns>true if including the cookie on subsequent client requests requires the request be sent with HTTPS; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.Cookie.TimeStamp">
      <summary>Gets the date and time that this <see cref="T:System.Net.Cookie" /> was created.</summary>
      <returns>The date and time that this cookie was created.</returns>
    </member>
    <member name="M:System.Net.Cookie.ToString">
      <summary>Returns a string representation of the <see cref="T:System.Net.Cookie" /> suitable for including in an HTTP cookie request.</summary>
      <returns>A string representation of the <see cref="T:System.Net.Cookie" /> suitable for including in an HTTP cookie request.</returns>
    </member>
    <member name="P:System.Net.Cookie.Value">
      <summary>Gets or sets the value of the <see cref="T:System.Net.Cookie" />.</summary>
      <returns>The value of the <see cref="T:System.Net.Cookie" />.</returns>
    </member>
    <member name="P:System.Net.Cookie.Version">
      <summary>Gets or sets a single digit that indicates the version of HTTP state maintenance to which the cookie conforms.</summary>
      <returns>A single digit that indicates the version of HTTP state maintenance to which the cookie conforms. The default is 0. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified value is less than zero.</exception>
    </member>
    <member name="T:System.Net.CookieCollection">
      <summary>Represents a collection of <see cref="T:System.Net.Cookie" /> objects.</summary>
    </member>
    <member name="M:System.Net.CookieCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.CookieCollection" /> class. </summary>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.Cookie)">
      <summary>Adds the specified <see cref="T:System.Net.Cookie" /> to the collection.</summary>
      <param name="cookie">The <see cref="T:System.Net.Cookie" /> to add to the collection.</param>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.CookieCollection)">
      <summary>Adds the contents of the specified <see cref="T:System.Net.CookieCollection" /> to this collection.</summary>
      <param name="cookies">The <see cref="T:System.Net.CookieCollection" /> to add to this collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> is null.</exception>
    </member>
    <member name="M:System.Net.CookieCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the contents of this <see cref="T:System.Net.CookieCollection" /> to the specified array, starting at the specified index.</summary>
      <param name="array">The array to copy the contents of the collection to.</param>
      <param name="index">The 0-based index in the destination array to start the copy operation.</param>
    </member>
    <member name="P:System.Net.CookieCollection.Count">
      <summary>Gets the number of cookies contained in the <see cref="T:System.Net.CookieCollection" />.</summary>
      <returns>The number of cookies contained in the <see cref="T:System.Net.CookieCollection" />.</returns>
    </member>
    <member name="M:System.Net.CookieCollection.GetEnumerator">
      <summary>Gets an enumerator to iterate through the <see cref="T:System.Net.CookieCollection" />.  </summary>
      <returns>An enumerator to iterate through the <see cref="T:System.Net.CookieCollection" />.</returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Net.CookieCollection" /> is read-only.</summary>
      <returns>true to indicate the collection is read-only; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Net.CookieCollection" /> is thread safe.</summary>
      <returns>true if access to the <see cref="T:System.Net.CookieCollection" /> is thread safe; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.String)">
      <summary>Gets the cookie with the specified name from the collection.</summary>
      <returns>The cookie with the specified name.</returns>
      <param name="name">The name of the cookie to retrieve from the collection.</param>
    </member>
    <member name="P:System.Net.CookieCollection.SyncRoot">
      <summary>Gets an object that you can use to synchronize access to the <see cref="T:System.Net.CookieCollection" />.</summary>
      <returns>An object that you can use to synchronize access to the <see cref="T:System.Net.CookieCollection" />.</returns>
    </member>
    <member name="T:System.Net.CookieContainer">
      <summary>Provides a container for a collection of <see cref="T:System.Net.CookieCollection" /> objects. </summary>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.CookieContainer" /> class. </summary>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.Cookie)">
      <summary>Adds the specified <see cref="T:System.Net.Cookie" /> with the specified Uniform Resource Identifier (URI) to this <see cref="T:System.Net.CookieContainer" />.</summary>
      <param name="uri">The URI of the cookie to add to this <see cref="T:System.Net.CookieContainer" />.</param>
      <param name="cookie">The <see cref="T:System.Net.Cookie" /> to add to this <see cref="T:System.Net.CookieContainer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The domain for <paramref name="cookie" /> is null. </exception>
      <exception cref="T:System.Net.CookieException">
        <paramref name="cookie" /> is larger than <see cref="P:System.Net.CookieContainer.MaxCookieSize" />. -or- the domain for <paramref name="cookie" /> is not a valid URI. </exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.CookieCollection)">
      <summary>Adds the contents of the specified <see cref="T:System.Net.CookieCollection" /> with the specified Uniform Resource Identifier (URI) to this <see cref="T:System.Net.CookieContainer" />.</summary>
      <param name="uri">The URI of the <see cref="T:System.Net.CookieCollection" /> to add to this <see cref="T:System.Net.CookieContainer" />.</param>
      <param name="cookies">The <see cref="T:System.Net.CookieCollection" /> containing the cookies to add to this <see cref="T:System.Net.CookieContainer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The domain for one of the cookie objects in <paramref name="cookies" /> is null. </exception>
      <exception cref="T:System.Net.CookieException">One of the cookie objects in <paramref name="cookies" /> contains an invalid domain. </exception>
    </member>
    <member name="P:System.Net.CookieContainer.Capacity">
      <summary>Gets the number of <see cref="T:System.Net.Cookie" /> objects this <see cref="T:System.Net.CookieContainer" /> can contain.</summary>
      <returns>The number of <see cref="T:System.Net.Cookie" /> objects this <see cref="T:System.Net.CookieContainer" /> can contain. The default is 300.</returns>
    </member>
    <member name="P:System.Net.CookieContainer.Count">
      <summary>Gets the number of <see cref="T:System.Net.Cookie" /> objects this <see cref="T:System.Net.CookieContainer" /> contains.</summary>
      <returns>The number of <see cref="T:System.Net.Cookie" /> objects this <see cref="T:System.Net.CookieContainer" /> contains.</returns>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLengthLimit">
      <summary>Represents the default maximum size, in bytes, of the <see cref="T:System.Net.Cookie" /> objects that the <see cref="T:System.Net.CookieContainer" /> can hold. This field is constant.</summary>
      <returns>Always returns 4096.</returns>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLimit">
      <summary>Represents the default maximum number of <see cref="T:System.Net.Cookie" /> objects that the <see cref="T:System.Net.CookieContainer" /> can hold. This field is constant. </summary>
      <returns>Always returns 300.</returns>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultPerDomainCookieLimit">
      <summary>Represents the default maximum number of <see cref="T:System.Net.Cookie" /> objects that the <see cref="T:System.Net.CookieContainer" /> can reference per domain. This field is constant.</summary>
      <returns>Always returns 20.</returns>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookieHeader(System.Uri)">
      <summary>Gets the HTTP cookie header that contains cookies pertaining to the specified Uniform Resource Identifier (URI).</summary>
      <returns>A string representing the cookie header associated with the specified URI.</returns>
      <param name="uri">The URI to retrieve cookies for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookies(System.Uri)">
      <summary>Gets the <see cref="T:System.Net.CookieCollection" /> associated with the specified Uniform Resource Identifier (URI).</summary>
      <returns>The cookie collection associated with the specified URI.</returns>
      <param name="uri">The URI to retrieve the <see cref="T:System.Net.CookieCollection" /> for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="P:System.Net.CookieContainer.MaxCookieSize">
      <summary>Gets the maximum cookie length for cookies in the <see cref="T:System.Net.CookieContainer" />.</summary>
      <returns>The maximum cookie length for cookies in the <see cref="T:System.Net.CookieContainer" />. The default is 4096.</returns>
    </member>
    <member name="P:System.Net.CookieContainer.PerDomainCapacity">
      <summary>Gets and sets the number of <see cref="T:System.Net.Cookie" /> instances that a <see cref="T:System.Net.CookieContainer" /> can hold per domain.</summary>
      <returns>The number of <see cref="T:System.Net.Cookie" /> instances that a <see cref="T:System.Net.CookieContainer" /> can hold per domain. The default is 20.</returns>
    </member>
    <member name="M:System.Net.CookieContainer.SetCookies(System.Uri,System.String)">
      <summary>Creates cookie instances for the cookies specified in the HTTP cookie header and adds them to the <see cref="T:System.Net.CookieContainer" /> associated with the specified Uniform Resource Identifier (URI).</summary>
      <param name="uri">The URI associated with the cookie container.</param>
      <param name="cookieHeader">The HTTP header containing cookies to add to the <see cref="T:System.Net.CookieContainer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null-or-<paramref name="cookieHeader" /> is null</exception>
      <exception cref="T:System.Net.CookieException">One of the cookies is invalid. -or- An error occurred while adding one of the cookies to the container. </exception>
    </member>
    <member name="T:System.Net.CookieException">
      <summary>The exception that is thrown when adding a <see cref="T:System.Net.Cookie" /> to a <see cref="T:System.Net.CookieCollection" />.</summary>
    </member>
    <member name="M:System.Net.CookieException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.CookieException" /> class. </summary>
    </member>
    <member name="T:System.Net.DnsEndPoint">
      <summary>Represents a network endpoint as a host name or a string representation of an IP address and a port number.</summary>
    </member>
    <member name="M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.DnsEndPoint" /> class with the host name or string representation of an IP address and a port number.</summary>
      <param name="host">The host name or a string representation of the IP address.</param>
      <param name="port">The port number associated with the <paramref name="address" />, or 0 to specify any available port. <paramref name="port" /> is in host order.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="host" /> parameter contains an empty string.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="host" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is less than 0 -or- <paramref name="port" /> is greater than 0xffff. </exception>
    </member>
    <member name="M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.DnsEndPoint" /> class with the host name or string representation of an IP address, a port number, and an address family.</summary>
      <param name="host">The host name or a string representation of the IP address.</param>
      <param name="port">The port number associated with the <paramref name="address" />, or 0 to specify any available port. <paramref name="port" /> is in host order.</param>
      <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="host" /> parameter contains an empty string -or- the <paramref name="addressFamily" /> parameter is specified as <see cref="F:System.Net.Sockets.AddressFamily.Unknown" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="host" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is less than 0 -or- <paramref name="port" /> is greater than 0xffff. </exception>
    </member>
    <member name="P:System.Net.DnsEndPoint.AddressFamily">
      <summary>Gets the Internet Protocol (IP) address family.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.Net.DnsEndPoint" /> objects.</summary>
      <returns>true if the two <see cref="T:System.Net.DnsEndPoint" /> instances are equal; otherwise, false.</returns>
      <param name="comparand">A <see cref="T:System.Net.DnsEndPoint" /> instance to compare to the current instance.</param>
    </member>
    <member name="M:System.Net.DnsEndPoint.GetHashCode">
      <summary>Returns a hash value for a <see cref="T:System.Net.DnsEndPoint" />.</summary>
      <returns>An integer hash value for the <see cref="T:System.Net.DnsEndPoint" />.</returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.Host">
      <summary>Gets the host name or string representation of the Internet Protocol (IP) address of the host.</summary>
      <returns>A host name or string representation of an IP address.</returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.Port">
      <summary>Gets the port number of the <see cref="T:System.Net.DnsEndPoint" />.</summary>
      <returns>An integer value in the range 0 to 0xffff indicating the port number of the <see cref="T:System.Net.DnsEndPoint" />.</returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.ToString">
      <summary>Returns the host name or string representation of the IP address and port number of the <see cref="T:System.Net.DnsEndPoint" />.</summary>
      <returns>A string containing the address family, host name or IP address string, and the port number of the specified <see cref="T:System.Net.DnsEndPoint" />.</returns>
    </member>
    <member name="T:System.Net.DownloadProgressChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> event of a <see cref="T:System.Net.WebClient" />.</summary>
    </member>
    <member name="P:System.Net.DownloadProgressChangedEventArgs.BytesReceived">
      <summary>Gets the number of bytes received.</summary>
      <returns>An <see cref="T:System.Int64" /> value that indicates the number of bytes received.</returns>
    </member>
    <member name="P:System.Net.DownloadProgressChangedEventArgs.TotalBytesToReceive">
      <summary>Gets the total number of bytes in a <see cref="T:System.Net.WebClient" /> data download operation.</summary>
      <returns>An <see cref="T:System.Int64" /> value that indicates the number of bytes that will be received.</returns>
    </member>
    <member name="T:System.Net.DownloadProgressChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> event of a <see cref="T:System.Net.WebClient" />.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> containing event data.</param>
    </member>
    <member name="T:System.Net.DownloadStringCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> event. </summary>
    </member>
    <member name="P:System.Net.DownloadStringCompletedEventArgs.Result">
      <summary>Gets the data that is downloaded by a <see cref="Overload:System.Net.WebClient.DownloadStringAsync" /> method.</summary>
      <returns>A <see cref="T:System.String" /> that contains the downloaded data.</returns>
      <exception cref="T:System.InvalidOperationException">The asynchronous request was cancelled. </exception>
    </member>
    <member name="T:System.Net.DownloadStringCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> event of a <see cref="T:System.Net.WebClient" />. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> that contains event data.</param>
    </member>
    <member name="T:System.Net.EndPoint">
      <summary>Identifies a network address. This is an abstract class.</summary>
    </member>
    <member name="M:System.Net.EndPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.EndPoint" /> class.</summary>
    </member>
    <member name="P:System.Net.EndPoint.AddressFamily">
      <summary>Gets the address family to which the endpoint belongs.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property when the property is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Net.EndPoint.Create(System.Net.SocketAddress)">
      <summary>Creates an <see cref="T:System.Net.EndPoint" /> instance from a <see cref="T:System.Net.SocketAddress" /> instance.</summary>
      <returns>A new <see cref="T:System.Net.EndPoint" /> instance that is initialized from the specified <see cref="T:System.Net.SocketAddress" /> instance.</returns>
      <param name="socketAddress">The socket address that serves as the endpoint for a connection.</param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Net.EndPoint.Serialize">
      <summary>Serializes endpoint information into a <see cref="T:System.Net.SocketAddress" /> instance.</summary>
      <returns>A <see cref="T:System.Net.SocketAddress" /> instance that contains the endpoint information.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="T:System.Net.HttpRequestHeader">
      <summary>The HTTP headers that may be specified in a client request.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.CacheControl">
      <summary>The Cache-Control header, which specifies directives that must be obeyed by all cache control mechanisms along the request/response chain.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Connection">
      <summary>The Connection header, which specifies options that are desired for a particular connection.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Date">
      <summary>The Date header, which specifies the date and time at which the request originated.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.KeepAlive">
      <summary>The Keep-Alive header, which specifies a parameter used into order to maintain a persistent connection.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Pragma">
      <summary>The Pragma header, which specifies implementation-specific directives that might apply to any agent along the request/response chain.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Trailer">
      <summary>The Trailer header, which specifies the header fields present in the trailer of a message encoded with chunked transfer-coding.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.TransferEncoding">
      <summary>The Transfer-Encoding header, which specifies what (if any) type of transformation that has been applied to the message body.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Upgrade">
      <summary>The Upgrade header, which specifies additional communications protocols that the client supports.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Via">
      <summary>The Via header, which specifies intermediate protocols to be used by gateway and proxy agents.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Warning">
      <summary>The Warning header, which specifies additional information about that status or transformation of a message that might not be reflected in the message.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Allow">
      <summary>The Allow header, which specifies the set of HTTP methods supported.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLength">
      <summary>The Content-Length header, which specifies the length, in bytes, of the accompanying body data.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentType">
      <summary>The Content-Type header, which specifies the MIME type of the accompanying body data.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentEncoding">
      <summary>The Content-Encoding header, which specifies the encodings that have been applied to the accompanying body data.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLanguage">
      <summary>The Content-Langauge header, which specifies the natural language(s) of the accompanying body data.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLocation">
      <summary>The Content-Location header, which specifies a URI from which the accompanying body may be obtained.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentMd5">
      <summary>The Content-MD5 header, which specifies the MD5 digest of the accompanying body data, for the purpose of providing an end-to-end message integrity check.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentRange">
      <summary>The Content-Range header, which specifies where in the full body the accompanying partial body data should be applied.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Expires">
      <summary>The Expires header, which specifies the date and time after which the accompanying body data should be considered stale.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.LastModified">
      <summary>The Last-Modified header, which specifies the date and time at which the accompanying body data was last modified.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Accept">
      <summary>The Accept header, which specifies the MIME types that are acceptable for the response.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptCharset">
      <summary>The Accept-Charset header, which specifies the character sets that are acceptable for the response.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptEncoding">
      <summary>The Accept-Encoding header, which specifies the content encodings that are acceptable for the response.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptLanguage">
      <summary>The Accept-Langauge header, which specifies that natural languages that are preferred for the response.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Authorization">
      <summary>The Authorization header, which specifies the credentials that the client presents in order to authenticate itself to the server.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Cookie">
      <summary>The Cookie header, which specifies cookie data presented to the server.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Expect">
      <summary>The Expect header, which specifies particular server behaviors that are required by the client.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.From">
      <summary>The From header, which specifies an Internet E-mail address for the human user who controls the requesting user agent.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Host">
      <summary>The Host header, which specifies the host name and port number of the resource being requested.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfMatch">
      <summary>The If-Match header, which specifies that the requested operation should be performed only if the client's cached copy of the indicated resource is current.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfModifiedSince">
      <summary>The If-Modified-Since header, which specifies that the requested operation should be performed only if the requested resource has been modified since the indicated data and time.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfNoneMatch">
      <summary>The If-None-Match header, which specifies that the requested operation should be performed only if none of client's cached copies of the indicated resources are current.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfRange">
      <summary>The If-Range header, which specifies that only the specified range of the requested resource should be sent, if the client's cached copy is current.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfUnmodifiedSince">
      <summary>The If-Unmodified-Since header, which specifies that the requested operation should be performed only if the requested resource has not been modified since the indicated date and time.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.MaxForwards">
      <summary>The Max-Forwards header, which specifies an integer indicating the remaining number of times that this request may be forwarded.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ProxyAuthorization">
      <summary>The Proxy-Authorization header, which specifies the credentials that the client presents in order to authenticate itself to a proxy.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Referer">
      <summary>The Referer header, which specifies the URI of the resource from which the request URI was obtained.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Range">
      <summary>The Range header, which specifies the the sub-range(s) of the response that the client requests be returned in lieu of the entire response.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Te">
      <summary>The TE header, which specifies the transfer encodings that are acceptable for the response.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Translate">
      <summary>The Translate header, a Microsoft extension to the HTTP specification used in conjunction with WebDAV functionality.</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.UserAgent">
      <summary>The User-Agent header, which specifies information about the client agent.</summary>
    </member>
    <member name="T:System.Net.HttpStatusCode">
      <summary>Contains the values of status codes defined for HTTP.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Continue">
      <summary>Equivalent to HTTP status 100. <see cref="F:System.Net.HttpStatusCode.Continue" /> indicates that the client can continue with its request.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.SwitchingProtocols">
      <summary>Equivalent to HTTP status 101. <see cref="F:System.Net.HttpStatusCode.SwitchingProtocols" /> indicates that the protocol version or protocol is being changed.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.OK">
      <summary>Equivalent to HTTP status 200. <see cref="F:System.Net.HttpStatusCode.OK" /> indicates that the request succeeded and that the requested information is in the response. This is the most common status code to receive.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Created">
      <summary>Equivalent to HTTP status 201. <see cref="F:System.Net.HttpStatusCode.Created" /> indicates that the request resulted in a new resource created before the response was sent.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Accepted">
      <summary>Equivalent to HTTP status 202. <see cref="F:System.Net.HttpStatusCode.Accepted" /> indicates that the request has been accepted for further processing.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NonAuthoritativeInformation">
      <summary>Equivalent to HTTP status 203. <see cref="F:System.Net.HttpStatusCode.NonAuthoritativeInformation" /> indicates that the returned metadata information is from a cached copy instead of the origin server and therefore may be incorrect.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NoContent">
      <summary>Equivalent to HTTP status 204. <see cref="F:System.Net.HttpStatusCode.NoContent" /> indicates that the request has been successfully processed and that the response is intentionally blank.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ResetContent">
      <summary>Equivalent to HTTP status 205. <see cref="F:System.Net.HttpStatusCode.ResetContent" /> indicates that the client should reset (not reload) the current resource.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PartialContent">
      <summary>Equivalent to HTTP status 206. <see cref="F:System.Net.HttpStatusCode.PartialContent" /> indicates that the response is a partial response as requested by a GET request that includes a byte range.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MultipleChoices">
      <summary>Equivalent to HTTP status 300. <see cref="F:System.Net.HttpStatusCode.MultipleChoices" /> indicates that the requested information has multiple representations. The default action is to treat this status as a redirect and follow the contents of the Location header associated with this response.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Ambiguous">
      <summary>Equivalent to HTTP status 300. <see cref="F:System.Net.HttpStatusCode.Ambiguous" /> indicates that the requested information has multiple representations. The default action is to treat this status as a redirect and follow the contents of the Location header associated with this response.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MovedPermanently">
      <summary>Equivalent to HTTP status 301. <see cref="F:System.Net.HttpStatusCode.MovedPermanently" /> indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Moved">
      <summary>Equivalent to HTTP status 301. <see cref="F:System.Net.HttpStatusCode.Moved" /> indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Found">
      <summary>Equivalent to HTTP status 302. <see cref="F:System.Net.HttpStatusCode.Found" /> indicates that the requested information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Redirect">
      <summary>Equivalent to HTTP status 302. <see cref="F:System.Net.HttpStatusCode.Redirect" /> indicates that the requested information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.SeeOther">
      <summary>Equivalent to HTTP status 303. <see cref="F:System.Net.HttpStatusCode.SeeOther" /> automatically redirects the client to the URI specified in the Location header as the result of a POST. The request to the resource specified by the Location header will be made with a GET.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectMethod">
      <summary>Equivalent to HTTP status 303. <see cref="F:System.Net.HttpStatusCode.RedirectMethod" /> automatically redirects the client to the URI specified in the Location header as the result of a POST. The request to the resource specified by the Location header will be made with a GET.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotModified">
      <summary>Equivalent to HTTP status 304. <see cref="F:System.Net.HttpStatusCode.NotModified" /> indicates that the client's cached copy is up to date. The contents of the resource are not transferred.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UseProxy">
      <summary>Equivalent to HTTP status 305. <see cref="F:System.Net.HttpStatusCode.UseProxy" /> indicates that the request should use the proxy server at the URI specified in the Location header.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unused">
      <summary>Equivalent to HTTP status 306. <see cref="F:System.Net.HttpStatusCode.Unused" /> is a proposed extension to the HTTP/1.1 specification that is not fully specified.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.TemporaryRedirect">
      <summary>Equivalent to HTTP status 307. <see cref="F:System.Net.HttpStatusCode.TemporaryRedirect" /> indicates that the request information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will also use the POST method.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectKeepVerb">
      <summary>Equivalent to HTTP status 307. <see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb" /> indicates that the request information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will also use the POST method.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadRequest">
      <summary>Equivalent to HTTP status 400. <see cref="F:System.Net.HttpStatusCode.BadRequest" /> indicates that the request could not be understood by the server. <see cref="F:System.Net.HttpStatusCode.BadRequest" /> is sent when no other error is applicable, or if the exact error is unknown or does not have its own error code.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unauthorized">
      <summary>Equivalent to HTTP status 401. <see cref="F:System.Net.HttpStatusCode.Unauthorized" /> indicates that the requested resource requires authentication. The WWW-Authenticate header contains the details of how to perform the authentication.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PaymentRequired">
      <summary>Equivalent to HTTP status 402. <see cref="F:System.Net.HttpStatusCode.PaymentRequired" /> is reserved for future use.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Forbidden">
      <summary>Equivalent to HTTP status 403. <see cref="F:System.Net.HttpStatusCode.Forbidden" /> indicates that the server refuses to fulfill the request.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotFound">
      <summary>Equivalent to HTTP status 404. <see cref="F:System.Net.HttpStatusCode.NotFound" /> indicates that the requested resource does not exist on the server.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MethodNotAllowed">
      <summary>Equivalent to HTTP status 405. <see cref="F:System.Net.HttpStatusCode.MethodNotAllowed" /> indicates that the request method (POST or GET) is not allowed on the requested resource.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotAcceptable">
      <summary>Equivalent to HTTP status 406. <see cref="F:System.Net.HttpStatusCode.NotAcceptable" /> indicates that the client has indicated with Accept headers that it will not accept any of the available representations of the resource.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired">
      <summary>Equivalent to HTTP status 407. <see cref="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired" /> indicates that the requested proxy requires authentication. The Proxy-authenticate header contains the details of how to perform the authentication.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestTimeout">
      <summary>Equivalent to HTTP status 408. <see cref="F:System.Net.HttpStatusCode.RequestTimeout" /> indicates that the client did not send a request within the time the server was expecting the request.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Conflict">
      <summary>Equivalent to HTTP status 409. <see cref="F:System.Net.HttpStatusCode.Conflict" /> indicates that the request could not be carried out because of a conflict on the server.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Gone">
      <summary>Equivalent to HTTP status 410. <see cref="F:System.Net.HttpStatusCode.Gone" /> indicates that the requested resource is no longer available.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.LengthRequired">
      <summary>Equivalent to HTTP status 411. <see cref="F:System.Net.HttpStatusCode.LengthRequired" /> indicates that the required Content-length header is missing.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PreconditionFailed">
      <summary>Equivalent to HTTP status 412. <see cref="F:System.Net.HttpStatusCode.PreconditionFailed" /> indicates that a condition set for this request failed, and the request cannot be carried out. Conditions are set with conditional request headers like If-Match, If-None-Match, or If-Unmodified-Since.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestEntityTooLarge">
      <summary>Equivalent to HTTP status 413. <see cref="F:System.Net.HttpStatusCode.RequestEntityTooLarge" /> indicates that the request is too large for the server to process.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestUriTooLong">
      <summary>Equivalent to HTTP status 414. <see cref="F:System.Net.HttpStatusCode.RequestUriTooLong" /> indicates that the URI is too long.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UnsupportedMediaType">
      <summary>Equivalent to HTTP status 415. <see cref="F:System.Net.HttpStatusCode.UnsupportedMediaType" /> indicates that the request is an unsupported type.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
      <summary>Equivalent to HTTP status 416. <see cref="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable" /> indicates that the range of data requested from the resource cannot be returned, either because the beginning of the range is before the beginning of the resource, or the end of the range is after the end of the resource.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ExpectationFailed">
      <summary>Equivalent to HTTP status 417. <see cref="F:System.Net.HttpStatusCode.ExpectationFailed" /> indicates that an expectation given in an Expect header could not be met by the server.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.InternalServerError">
      <summary>Equivalent to HTTP status 500. <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> indicates that a generic error has occurred on the server.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotImplemented">
      <summary>Equivalent to HTTP status 501. <see cref="F:System.Net.HttpStatusCode.NotImplemented" /> indicates that the server does not support the requested function.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadGateway">
      <summary>Equivalent to HTTP status 502. <see cref="F:System.Net.HttpStatusCode.BadGateway" /> indicates that an intermediate proxy server received a bad response from another proxy or the origin server.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ServiceUnavailable">
      <summary>Equivalent to HTTP status 503. <see cref="F:System.Net.HttpStatusCode.ServiceUnavailable" /> indicates that the server is temporarily unavailable, usually due to high load or maintenance.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.GatewayTimeout">
      <summary>Equivalent to HTTP status 504. <see cref="F:System.Net.HttpStatusCode.GatewayTimeout" /> indicates that an intermediate proxy server timed out while waiting for a response from another proxy or the origin server.</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.HttpVersionNotSupported">
      <summary>Equivalent to HTTP status 505. <see cref="F:System.Net.HttpStatusCode.HttpVersionNotSupported" /> indicates that the requested HTTP version is not supported by the server.</summary>
    </member>
    <member name="T:System.Net.HttpWebRequest">
      <summary>Provides an HTTP-specific implementation of the <see cref="T:System.Net.WebRequest" /> class.</summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.HttpWebRequest" /> class.</summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.Abort">
      <summary>Cancels a request to an Internet resource.</summary>
      <exception cref="T:System.NotImplementedException">This method is not implemented. </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Accept">
      <summary>Gets or sets the value of the Accept HTTP header.</summary>
      <returns>The value of the Accept HTTP header. The default value is null.</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowAutoRedirect"></member>
    <member name="P:System.Net.HttpWebRequest.AllowReadStreamBuffering">
      <summary>Gets or sets a value that indicates whether to buffer the data read from the Internet resource.</summary>
      <returns>true to enable buffering of the data received from the Internet resource; false to disable buffering. The default is true.</returns>
      <exception cref="T:System.NotImplementedException">This property is not implemented. </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering">
      <summary>Gets or sets a value that indicates whether to buffer the data written to the Internet resource.</summary>
      <returns>true to enable buffering of the data written to the Internet resource; false to disable buffering. The default is true.</returns>
      <exception cref="T:System.NotImplementedException">This property is not implemented. </exception>
      <exception cref="T:System.NotSupportedException">This property cannot be set to false on the browser stack.</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request for a <see cref="T:System.IO.Stream" /> object to use to write data.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.</returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">The state object for this request. </param>
      <exception cref="T:System.Net.ProtocolViolationException">The <see cref="P:System.Net.HttpWebRequest.Method" /> property is GET-or- The <see cref="P:System.Net.WebRequest.ContentLength" /> property was set to a value that does not match the size of the provided request body.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is being used by a previous call to <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />-or- The thread pool is running out of threads. </exception>
      <exception cref="T:System.NotImplementedException">This method is not implemented. </exception>
      <exception cref="T:System.NotSupportedException">The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> was previously called. </exception>
      <exception cref="T:System.ObjectDisposedException">In a .NET Framework application, a request stream with zero content length was not obtained and closed correctly.</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request to an Internet resource.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request for a response.</returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate </param>
      <param name="state">The state object for this request. </param>
      <exception cref="T:System.InvalidOperationException">The stream is already in use by a previous call to <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />-or- The thread pool is running out of threads. </exception>
      <exception cref="T:System.NotImplementedException">This method is not implemented. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="callback" /> parameter is null. </exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> is GET. </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> was previously called. </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentType">
      <summary>Gets or sets the value of the Content-type HTTP header.</summary>
      <returns>The value of the Content-type HTTP header. The default value is null.</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.CookieContainer">
      <summary>Specifies the collection of <see cref="T:System.Net.CookieCollection" /> objects associated with the HTTP request.</summary>
      <returns>A <see cref="T:System.Net.CookieContainer" /> that contains a collection of <see cref="T:System.Net.CookieCollection" /> objects associated with the HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">This property is not implemented. </exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>Ends an asynchronous request for a <see cref="T:System.IO.Stream" /> object to use to write data.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> to use to write request data.</returns>
      <param name="asyncResult">The pending request for a stream. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.IO.IOException">The request did not complete, and no stream is available. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> was not returned by the current instance from a call to <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />. </exception>
      <exception cref="T:System.InvalidOperationException">This method was called previously using <paramref name="asyncResult" />. </exception>
      <exception cref="T:System.NotImplementedException">This method is not implemented. </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> was previously called.-or- An error occurred while processing the request. </exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>Ends an asynchronous request to an Internet resource.</summary>
      <returns>A <see cref="T:System.Net.WebResponse" /> that contains the response from the Internet resource.</returns>
      <param name="asyncResult">The pending request for a response. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">This method was called previously using <paramref name="asyncResult." /></exception>
      <exception cref="T:System.NotImplementedException">This method is not implemented. </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> was previously called.-or- An error occurred while processing the request. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> was not returned by the current instance from a call to <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />. </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.HaveResponse">
      <summary>Gets a value that indicates whether a response has been received from an Internet resource.</summary>
      <returns>true if a response has been received; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">This property is not implemented. </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Headers">
      <summary>Specifies a collection of the name/value pairs that make up the HTTP headers.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection" /> that contains the name/value pairs that make up the headers for the HTTP request.</returns>
      <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> method. </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Method">
      <summary>Gets or sets the method for the request.</summary>
      <returns>The request method to use to contact the Internet resource. The default value is GET.</returns>
      <exception cref="T:System.ArgumentException">No method is supplied.-or- The method string contains invalid characters. </exception>
      <exception cref="T:System.NotImplementedException">This property is not implemented. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="P:System.Net.HttpWebRequest.Method" /> property is not GET or POST. </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.RequestUri">
      <summary>Gets the original Uniform Resource Identifier (URI) of the request.</summary>
      <returns>A <see cref="T:System.Uri" /> that contains the URI of the Internet resource passed to the <see cref="M:System.Net.WebRequest.Create(System.Uri)" /> method.</returns>
      <exception cref="T:System.NotImplementedException">This property is not implemented. </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.SupportsCookieContainer">
      <summary>Gets a value that indicates whether the <see cref="P:System.Net.HttpWebRequest.CookieContainer" /> property is supported by the <see cref="T:System.Net.HttpWebRequest" /> instance.</summary>
      <returns>true if the <see cref="P:System.Net.HttpWebRequest.CookieContainer" /> property is supported by the <see cref="T:System.Net.HttpWebRequest" /> instance; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.UserAgent"></member>
    <member name="T:System.Net.HttpWebResponse">
      <summary>Provides an HTTP-specific implementation of the <see cref="T:System.Net.WebResponse" /> class.</summary>
    </member>
    <member name="M:System.Net.HttpWebResponse.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebResponse" /> class.</summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.Cookies">
      <summary>Gets the cookies used to persist state information for the HTTP response.</summary>
      <returns>The <see cref="T:System.Net.CookieCollection" /> object associated with the HTTP response.</returns>
      <exception cref="T:System.NotImplementedException">This property is not implemented. </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Method">
      <summary>Gets the method that is used to return the response.</summary>
      <returns>A string that contains the HTTP method that is used to return the response.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusCode">
      <summary>Gets the status of the response.</summary>
      <returns>One of the <see cref="T:System.Net.HttpStatusCode" /> values.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusDescription">
      <summary>Gets the status description returned with the response.</summary>
      <returns>A string that describes the status of the response.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="T:System.Net.ICredentials">
      <summary>Provides the base authentication interface for retrieving credentials for Web client authentication.</summary>
    </member>
    <member name="M:System.Net.ICredentials.GetCredential(System.Uri,System.String)">
      <summary>Returns a <see cref="T:System.Net.NetworkCredential" /> object that is associated with the specified URI, and authentication type.</summary>
      <returns>The <see cref="T:System.Net.NetworkCredential" /> that is associated with the specified URI and authentication type, or, if no credentials are available, null.</returns>
      <param name="uri">The <see cref="T:System.Uri" /> that the client is providing authentication for.</param>
      <param name="authType">A string that specifies the type of authentication.</param>
    </member>
    <member name="T:System.Net.IPAddress">
      <summary>Provides an Internet Protocol (IP) address.</summary>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as a <see cref="T:System.Byte" /> array.</summary>
      <param name="address">The byte array that contains the IP address.</param>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="address" /> parameter is not 4 bytes required for an IPv4 address or 16 bytes required for an IPv6 address.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null. </exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with an IPv6 address specified as a <see cref="T:System.Byte" /> array and the specified scope identifier.</summary>
      <param name="address">The byte array value of the IPv6 address.</param>
      <param name="scopeid">The long value of the scope identifier.</param>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="address" /> parameter is not 16 bytes required for an IPv6 address.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="scopeid" /> parameter is less than 0 or the <paramref name="scopeid" /> is greater than 0x00000000FFFFFFFF.</exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as an <see cref="T:System.Int64" />.</summary>
      <param name="newAddress">The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="newAddress" /> parameter is out of range for an IPv4 address. </exception>
    </member>
    <member name="P:System.Net.IPAddress.Address">
      <summary>Gets or sets an Internet Protocol (IP) address for IPv4.</summary>
      <returns>An IPv4 address represented as an integer.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">The <see cref="P:System.Net.IPAddress.AddressFamily" /> property is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
    </member>
    <member name="P:System.Net.IPAddress.AddressFamily">
      <summary>Gets the address family of the IP address.</summary>
      <returns>Returns <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> for IPv4 or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> for IPv6.</returns>
    </member>
    <member name="F:System.Net.IPAddress.Any">
      <summary>Provides an IPv4 address that indicates that a server must listen for client activity on all network interfaces for IPv4. This field is read-only.</summary>
    </member>
    <member name="F:System.Net.IPAddress.Broadcast">
      <summary>Provides the IPv4 broadcast address. This field is read-only.</summary>
    </member>
    <member name="M:System.Net.IPAddress.Equals(System.Object)">
      <summary>Compares two IP addresses.</summary>
      <returns>true if the two addresses are equal; otherwise, false.</returns>
      <param name="comparand">An <see cref="T:System.Net.IPAddress" /> instance to compare to the current instance.</param>
    </member>
    <member name="M:System.Net.IPAddress.GetAddressBytes">
      <summary>Provides a copy of  the <see cref="T:System.Net.IPAddress" /> as an array of bytes.</summary>
      <returns>An array of bytes that represents the <see cref="T:System.Net.IPAddress" /> instance.</returns>
    </member>
    <member name="M:System.Net.IPAddress.GetHashCode">
      <summary>Returns a hash value for an IP address.</summary>
      <returns>An integer hash value for the IP address.</returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
      <summary>Converts a short value from host byte order to network byte order.</summary>
      <returns>A short value, expressed in network byte order.</returns>
      <param name="host">The number to convert, expressed in host byte order.</param>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
      <summary>Converts an integer value from host byte order to network byte order.</summary>
      <returns>An integer value, expressed in network byte order.</returns>
      <param name="host">The number to convert, expressed in host byte order.</param>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
      <summary>Converts a long value from host byte order to network byte order.</summary>
      <returns>A long value, expressed in network byte order.</returns>
      <param name="host">The number to convert, expressed in host byte order.</param>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Any">
      <summary>Provides an IPv6 address that indicates that a server must listen for client activity on all network interfaces for IPv6. This field is read-only.</summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Loopback">
      <summary>Provides the IP loopback address. This property is read-only.</summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6None">
      <summary>Provides an IPv6 address that indicates that no network interface should be used. This property is read-only.</summary>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6LinkLocal">
      <summary>Gets whether the address is an IPv6 link local address.</summary>
      <returns>true if the IP address is an IPv6 link local address; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6Multicast">
      <summary>Gets whether the address is an IPv6 multicast global address.</summary>
      <returns>true if the IP address is an IPv6 multicast global address; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6SiteLocal">
      <summary>Gets whether the address is an IPv6 site local address.</summary>
      <returns>true if the IP address is an IPv6 site local address; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
      <summary>Indicates whether the specified IP address is the loopback address.</summary>
      <returns>true if <paramref name="address" /> is the loopback address; otherwise, false.</returns>
      <param name="address">An IP address.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null. </exception>
    </member>
    <member name="F:System.Net.IPAddress.Loopback">
      <summary>Provides the IPv4 loopback address. This field is read-only.</summary>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
      <summary>Converts a short value from network byte order to host byte order.</summary>
      <returns>A short value, expressed in host byte order.</returns>
      <param name="network">The number to convert, expressed in network byte order.</param>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
      <summary>Converts an integer value from network byte order to host byte order.</summary>
      <returns>An integer value, expressed in host byte order.</returns>
      <param name="network">The number to convert, expressed in network byte order.</param>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
      <summary>Converts a long value from network byte order to host byte order.</summary>
      <returns>A long value, expressed in host byte order.</returns>
      <param name="network">The number to convert, expressed in network byte order.</param>
    </member>
    <member name="F:System.Net.IPAddress.None">
      <summary>Provides an IP address that indicates that no network interface should be used. This field is read-only.</summary>
    </member>
    <member name="M:System.Net.IPAddress.Parse(System.String)">
      <summary>Converts an IP address string to an <see cref="T:System.Net.IPAddress" /> instance.</summary>
      <returns>An <see cref="T:System.Net.IPAddress" /> instance.</returns>
      <param name="ipString">A string that contains an IP address in dotted-quad notation for IPv4 or an IP address in colon-hexadecimal notation for IPv6.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ipString" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="ipString" /> parameter is not a valid IP address. </exception>
    </member>
    <member name="P:System.Net.IPAddress.ScopeId">
      <summary>Gets or sets the IPv6 address scope identifier.</summary>
      <returns>A long integer that specifies the scope of the address.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value when setting the ScopeId is less than 0 or the value is greater than 0x00000000FFFFFFFF.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">The <see cref="P:System.Net.IPAddress.AddressFamily" /> property is specified as <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />. </exception>
    </member>
    <member name="M:System.Net.IPAddress.ToString">
      <summary>Converts an Internet address to its standard notation.</summary>
      <returns>A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error prevented the IPv6 address from being converted to a string. </exception>
    </member>
    <member name="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
      <summary>Determines whether a string is a valid IP address.</summary>
      <returns>true if <paramref name="ipString" /> is a valid IP address; otherwise, false.</returns>
      <param name="ipString">The string to validate.</param>
      <param name="address">The <see cref="T:System.Net.IPAddress" /> version of the string.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ipString" /> could not be parsed as an IP address.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ipString" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="ipString" /> is not a valid IP address. </exception>
    </member>
    <member name="T:System.Net.IPEndPoint">
      <summary>Represents a network endpoint as an IP address and a port number.</summary>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPEndPoint" /> class with the specified IP address and port number.</summary>
      <param name="address">The long value of the IP address for the internet host. For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".</param>
      <param name="port">The port number associated with the <paramref name="address" />, or 0 to specify any available port. <paramref name="port" /> is in host order.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is less than <see cref="F:System.Net.IPEndPoint.MinPort" />.-or- <paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.-or- <paramref name="address" /> is out of range for an IPv4 address.</exception>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPEndPoint" /> class with the specified address and port number.</summary>
      <param name="address">The IP address of the Internet host represented as an <see cref="T:System.Net.IPAddress" />.</param>
      <param name="port">The port number associated with the <paramref name="address" />, or 0 to specify any available port. <paramref name="port" /> is in host order.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is less than <see cref="F:System.Net.IPEndPoint.MinPort" />.-or- <paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />. </exception>
    </member>
    <member name="P:System.Net.IPEndPoint.Address">
      <summary>Gets or sets the IP address of the endpoint.</summary>
      <returns>IP address of the endpoint.</returns>
    </member>
    <member name="P:System.Net.IPEndPoint.AddressFamily">
      <summary>Gets the Internet Protocol (IP) address family.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</returns>
    </member>
    <member name="M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)">
      <summary>Creates an endpoint from a socket address.</summary>
      <returns>An <see cref="T:System.Net.EndPoint" /> instance using the specified socket address.</returns>
      <param name="socketAddress">The <see cref="T:System.Net.SocketAddress" /> to use for the endpoint.</param>
      <exception cref="T:System.ArgumentException">The AddressFamily of <paramref name="socketAddress" /> is not equal to the AddressFamily of the current instance.-or- <paramref name="socketAddress" />.Size &lt; 8. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="socketAddress" /> parameter is null.</exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.IPEndPoint" /> instance.</summary>
      <returns>true if the two IP endpoints are equal; otherwise, false.</returns>
      <param name="comparand">The specified <see cref="T:System.Object" /> to test for equality with the current <see cref="T:System.Net.IPEndPoint" /> instance.</param>
    </member>
    <member name="M:System.Net.IPEndPoint.GetHashCode">
      <summary>Returns a hash value for an IP endpoint.</summary>
      <returns>An integer hash value for the IP endpoint.</returns>
    </member>
    <member name="F:System.Net.IPEndPoint.MaxPort">
      <summary>Specifies the maximum value that can be assigned to the <see cref="P:System.Net.IPEndPoint.Port" /> property. The MaxPort value is set to 0x0000FFFF. This field is read-only.</summary>
    </member>
    <member name="F:System.Net.IPEndPoint.MinPort">
      <summary>Specifies the minimum value that can be assigned to the <see cref="P:System.Net.IPEndPoint.Port" /> property. This field is read-only.</summary>
    </member>
    <member name="P:System.Net.IPEndPoint.Port">
      <summary>Gets or sets the port number of the endpoint.</summary>
      <returns>An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> indicating the port number of the endpoint.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value that was specified for a set operation is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />. </exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Serialize">
      <summary>Serializes endpoint information into a <see cref="T:System.Net.SocketAddress" /> instance.</summary>
      <returns>A <see cref="T:System.Net.SocketAddress" /> instance containing the socket address for the endpoint.</returns>
    </member>
    <member name="M:System.Net.IPEndPoint.ToString">
      <summary>Returns the IP address and port number of the specified endpoint.</summary>
      <returns>A string containing the IP address and the port number of the specified endpoint.</returns>
    </member>
    <member name="T:System.Net.IWebRequestCreate">
      <summary>Provides the base interface for creating <see cref="T:System.Net.WebRequest" /> instances.</summary>
    </member>
    <member name="M:System.Net.IWebRequestCreate.Create(System.Uri)">
      <summary>Creates a <see cref="T:System.Net.WebRequest" /> instance.</summary>
      <returns>A <see cref="T:System.Net.WebRequest" /> instance.</returns>
      <param name="uri">The uniform resource identifier (URI) of the Web resource.</param>
      <exception cref="T:System.NotSupportedException">The request scheme specified in <paramref name="uri" /> is not supported by this <see cref="T:System.Net.IWebRequestCreate" /> instance. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. </exception>
      <exception cref="T:System.UriFormatException">The URI specified in <paramref name="uri" /> is not a valid URI. </exception>
    </member>
    <member name="T:System.Net.NetworkCredential">
      <summary>Provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication.</summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential" /> class.</summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential" /> class with the specified user name and password.</summary>
      <param name="userName">The user name associated with the credentials.</param>
      <param name="password">The password for the user name associated with the credentials.</param>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential" /> class with the specified user name, password, and domain.</summary>
      <param name="userName">The user name associated with the credentials.</param>
      <param name="password">The password for the user name associated with the credentials.</param>
      <param name="domain">The domain associated with these credentials.</param>
    </member>
    <member name="P:System.Net.NetworkCredential.Domain">
      <summary>Gets or sets the domain or computer name that verifies the credentials.</summary>
      <returns>The name of the domain associated with the credentials.</returns>
    </member>
    <member name="M:System.Net.NetworkCredential.GetCredential(System.Uri,System.String)">
      <summary>Returns an instance of the <see cref="T:System.Net.NetworkCredential" /> class for the specified Uniform Resource Identifier (URI) and authentication type.</summary>
      <returns>A <see cref="T:System.Net.NetworkCredential" /> object.</returns>
      <param name="uri">The Uri that the client provides authentication for.</param>
      <param name="authType">A string that specifies the type of authentication requested.</param>
    </member>
    <member name="P:System.Net.NetworkCredential.Password">
      <summary>Gets or sets the password for the user name associated with the credentials.</summary>
      <returns>The password associated with the credentials.</returns>
    </member>
    <member name="P:System.Net.NetworkCredential.UserName">
      <summary>Gets or sets the user name associated with the credentials.</summary>
      <returns>The user name associated with the credentials.</returns>
    </member>
    <member name="T:System.Net.OpenReadCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.OpenReadCompleted" /> event. </summary>
    </member>
    <member name="P:System.Net.OpenReadCompletedEventArgs.Result">
      <summary>Gets a readable stream that contains the results of the <see cref="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)" /> method.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> that contains the results of the <see cref="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)" /> method.</returns>
      <exception cref="T:System.InvalidOperationException">The asynchronous request was cancelled. </exception>
    </member>
    <member name="T:System.Net.OpenReadCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="M:System.Net.WebClient.OpenReadAsync(System.Uri)" /> event of a <see cref="T:System.Net.WebClient" />. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Net.OpenReadCompletedEventArgs" />  that contains the event data. </param>
    </member>
    <member name="T:System.Net.OpenWriteCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> event.</summary>
    </member>
    <member name="P:System.Net.OpenWriteCompletedEventArgs.Result">
      <summary>Gets a writable stream that is used to send data to a server.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> where you can write data to be uploaded.</returns>
      <exception cref="T:System.InvalidOperationException">The asynchronous request was cancelled. </exception>
    </member>
    <member name="T:System.Net.OpenWriteCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> event of a <see cref="T:System.Net.WebClient" />.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> containing event data.</param>
    </member>
    <member name="T:System.Net.ProtocolViolationException">
      <summary>The exception that is thrown when an error is made while using a network protocol.</summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.ProtocolViolationException" /> class.</summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.ProtocolViolationException" /> class with the specified message.</summary>
      <param name="message">The error message string.</param>
    </member>
    <member name="T:System.Net.SocketAddress">
      <summary>Stores serialized information from <see cref="T:System.Net.EndPoint" /> derived classes.</summary>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>Creates a new instance of the <see cref="T:System.Net.SocketAddress" /> class for the given address family.</summary>
      <param name="family">An <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated value.</param>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Net.SocketAddress" /> class using the specified address family and buffer size.</summary>
      <param name="family">An <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated value.</param>
      <param name="size">The value to set for the <see cref="P:System.Net.SocketAddress.Size" /> property which affects the number of bytes to allocate for the underlying buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> is less than 2. These 2 bytes are needed to store <paramref name="family" />. </exception>
    </member>
    <member name="M:System.Net.SocketAddress.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.SocketAddress" /> instance. </summary>
      <returns>true if the two <see cref="T:System.Net.SocketAddress" /> instances are equal; otherwise, false.</returns>
      <param name="comparand">The specified <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Net.SocketAddress" /> instance.</param>
    </member>
    <member name="P:System.Net.SocketAddress.Family">
      <summary>Gets the <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated value of the current <see cref="T:System.Net.SocketAddress" />.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated values.</returns>
    </member>
    <member name="M:System.Net.SocketAddress.GetHashCode">
      <summary>Returns a hash value for the <see cref="T:System.Net.SocketAddress" />. </summary>
      <returns>An integer hash value for the socket address.</returns>
    </member>
    <member name="P:System.Net.SocketAddress.Item(System.Int32)">
      <summary>Gets or sets the specified index element in the underlying buffer.</summary>
      <returns>The value of the specified index element in the underlying buffer.</returns>
      <param name="offset">The array index element of the desired information.</param>
      <exception cref="T:System.IndexOutOfRangeException">The specified index does not exist in the buffer (the <paramref name="offset" /> is. less than 0 or greater than or equal to the <see cref="P:System.Net.SocketAddress.Size" /> property).</exception>
    </member>
    <member name="P:System.Net.SocketAddress.Size">
      <summary>Gets the available buffer size that can be used for the <see cref="T:System.Net.SocketAddress" />.</summary>
      <returns>The buffer size, in bytes, available for the <see cref="T:System.Net.SocketAddress" />.</returns>
    </member>
    <member name="M:System.Net.SocketAddress.ToString">
      <summary>Returns a string that represents information about the socket address.</summary>
      <returns>A string that contains information about the <see cref="T:System.Net.SocketAddress" />.</returns>
    </member>
    <member name="T:System.Net.UploadProgressChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.UploadProgressChanged" /> event of a <see cref="T:System.Net.WebClient" />.</summary>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.BytesReceived">
      <summary>Gets the number of bytes received</summary>
      <returns>An <see cref="T:System.Int64" /> value that indicates the number of bytes received.</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.BytesSent">
      <summary>Gets the number of bytes sent.</summary>
      <returns>An <see cref="T:System.Int64" /> value that indicates the number of bytes sent.</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.TotalBytesToReceive">
      <summary>Gets the total number of bytes in a <see cref="T:System.Net.WebClient" /> data upload operation.</summary>
      <returns>An <see cref="T:System.Int64" /> value that indicates the number of bytes that will be received.</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.TotalBytesToSend">
      <summary>Gets the total number of bytes to send.</summary>
      <returns>An <see cref="T:System.Int64" /> value that indicates the number of bytes that will be sent.</returns>
    </member>
    <member name="T:System.Net.UploadProgressChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.UploadProgressChanged" /> event of a <see cref="T:System.Net.WebClient" />.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.UploadProgressChangedEventArgs" /> containing event data.</param>
    </member>
    <member name="T:System.Net.UploadStringCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.UploadStringCompleted" /> event.</summary>
    </member>
    <member name="P:System.Net.UploadStringCompletedEventArgs.Result">
      <summary>Gets the server reply to a string upload operation that is started by calling an <see cref="Overload:System.Net.WebClient.UploadStringAsync" /> method.</summary>
      <returns>A <see cref="T:System.Byte" /> array that contains the server reply.</returns>
      <exception cref="T:System.InvalidOperationException">The asynchronous request was cancelled. </exception>
    </member>
    <member name="T:System.Net.UploadStringCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.UploadStringCompleted" /> event of a <see cref="T:System.Net.WebClient" />.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.UploadStringCompletedEventArgs" /> containing event data.</param>
    </member>
    <member name="T:System.Net.WebClient">
      <summary>Provides common methods for sending data to and receiving data from a resource identified by a URI.</summary>
    </member>
    <member name="M:System.Net.WebClient.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebClient" /> class. </summary>
    </member>
    <member name="P:System.Net.WebClient.AllowReadStreamBuffering">
      <summary>Gets or sets a value that indicates whether to buffer the data read from the Internet resource for a <see cref="T:System.Net.WebClient" /> instance.</summary>
      <returns>true to enable buffering of the data received from the Internet resource; false to disable buffering. The default is true.</returns>
    </member>
    <member name="P:System.Net.WebClient.AllowWriteStreamBuffering">
      <summary>Gets or sets a value that indicates whether to buffer the data written to the Internet resource for a <see cref="T:System.Net.WebClient" /> instance.</summary>
      <returns>true to enable buffering of the data written to the Internet resource; false to disable buffering. The default is true.</returns>
    </member>
    <member name="P:System.Net.WebClient.BaseAddress">
      <summary>Gets or sets the base URI for requests made by a <see cref="T:System.Net.WebClient" />.</summary>
      <returns>The base URI for requests made by a <see cref="T:System.Net.WebClient" />. If no base address has been specified, the <see cref="P:System.Net.WebClient.BaseAddress" /> property is initialized to the application origin (the absolute URI of the Silverlight XAP)...</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.WebClient.BaseAddress" /> is set to an invalid URI. The inner exception may contain information that will help you locate the error.</exception>
    </member>
    <member name="M:System.Net.WebClient.CancelAsync">
      <summary>Cancels a pending asynchronous operation. </summary>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
    </member>
    <member name="P:System.Net.WebClient.Credentials">
      <summary>Gets or sets the network credentials that are sent to the host and used to authenticate the request.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> containing the authentication credentials for the request. The default is null.</returns>
    </member>
    <member name="E:System.Net.WebClient.DownloadProgressChanged">
      <summary>Occurs when an asynchronous download operation successfully transfers some or all of the data.</summary>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri)">
      <summary>Downloads the resource at the specified <see cref="T:System.Uri" /> as a string.</summary>
      <param name="address">The location of the resource to be downloaded.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)">
      <summary>Downloads the resource at the specified <see cref="T:System.Uri" /> as a string.</summary>
      <param name="address">The location of the resource to be downloaded.</param>
      <param name="userToken">Provides a user-specified identifier for the asynchronous task. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
    </member>
    <member name="E:System.Net.WebClient.DownloadStringCompleted">
      <summary>Occurs when an asynchronous resource-download operation is completed. </summary>
    </member>
    <member name="P:System.Net.WebClient.Encoding">
      <summary>Gets and sets the <see cref="T:System.Text.Encoding" /> used to upload and download strings.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> that is used to encode strings. The default value of this property is <see cref="P:System.Text.Encoding.UTF8" />.</returns>
      <exception cref="T:System.ArgumentNullException">A null value was passed to set this property.</exception>
    </member>
    <member name="M:System.Net.WebClient.GetWebRequest(System.Uri)">
      <summary>Returns a <see cref="T:System.Net.WebRequest" /> object for the specified resource.</summary>
      <returns>A new <see cref="T:System.Net.WebRequest" /> object for the specified resource.</returns>
      <param name="address">A <see cref="T:System.Uri" /> that identifies the resource to request.</param>
    </member>
    <member name="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
      <summary>Returns the <see cref="T:System.Net.WebResponse" /> for the specified <see cref="T:System.Net.WebRequest" /> using the specified <see cref="T:System.IAsyncResult" />.</summary>
      <returns>A <see cref="T:System.Net.WebResponse" /> containing the response for the specified <see cref="T:System.Net.WebRequest" />.</returns>
      <param name="request">A <see cref="T:System.Net.WebRequest" /> that is used to obtain the response.</param>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object obtained from a previous call to <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> .</param>
    </member>
    <member name="P:System.Net.WebClient.Headers">
      <summary>Gets or sets a collection of header name/value pairs associated with the request.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection" /> containing header name/value pairs associated with this request.</returns>
    </member>
    <member name="P:System.Net.WebClient.IsBusy">
      <summary>Gets a value that indicates whether a Web request is in progress.</summary>
      <returns>true to indicate a Web request is in progress; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> event.</summary>
      <param name="e">A <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.OpenReadCompleted" /> event.</summary>
      <param name="e">A <see cref="T:System.Net.OpenReadCompletedEventArgs" />  object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> event.</summary>
      <param name="e">A <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.UploadProgressChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.Net.UploadProgressChangedEventArgs" /> object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.UploadStringCompleted" /> event.</summary>
      <param name="e">An <see cref="T:System.Net.UploadStringCompletedEventArgs" />  object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.WebClient.WriteStreamClosed" /> event.</summary>
      <param name="e">An <see cref="T:System.Net.WriteStreamClosedEventArgs" />  object containing event data.</param>
    </member>
    <member name="M:System.Net.WebClient.OpenReadAsync(System.Uri)">
      <summary>Opens a readable stream to the specified resource.</summary>
      <param name="address">The location of the resource to be downloaded.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)">
      <summary>Opens a readable stream to the specified resource.</summary>
      <param name="address">The location of the resource to be downloaded.</param>
      <param name="userToken">Provides a user-specified identifier for the asynchronous task. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
    </member>
    <member name="E:System.Net.WebClient.OpenReadCompleted">
      <summary>Occurs when an asynchronous resource-read operation is completed.</summary>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri)">
      <summary>Opens a stream for writing data to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the data. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)">
      <summary>Opens a stream for writing data to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the data. </param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for HTTP.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)">
      <summary>Opens a stream for writing data to the specified resource, using the specified method. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method used to send the data to the resource. If null, the default is POST for HTTP.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress" /> and <paramref name="address" /> is invalid.-or- An error occurred while opening the stream. </exception>
    </member>
    <member name="E:System.Net.WebClient.OpenWriteCompleted">
      <summary>Occurs when an asynchronous operation to open a stream to write data to a resource completes.</summary>
    </member>
    <member name="P:System.Net.WebClient.ResponseHeaders">
      <summary>Gets a collection of header name/value pairs associated with the response.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection" /> containing header name/value pairs associated with the response, or null if no response has been received.</returns>
    </member>
    <member name="E:System.Net.WebClient.UploadProgressChanged">
      <summary>Occurs when an asynchronous upload operation successfully transfers some or all of the data.</summary>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)">
      <summary>Uploads the specified string to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page. </param>
      <param name="data">The string to be uploaded.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null-or- <paramref name="data" /> is null.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress" /> and <paramref name="address" /> is invalid.-or- There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)">
      <summary>Uploads the specified string to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="method">The HTTP method used to send the file to the resource. If null, the default is POST for HTTP.</param>
      <param name="data">The string to be uploaded.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null-or- <paramref name="data" /> is null.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress" /> and <paramref name="address" /> is invalid.-or- There was no response from the server hosting the resource.</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)">
      <summary>Uploads the specified string to the specified resource. This method does not block the calling thread.</summary>
      <param name="address">The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
      <param name="method">The HTTP method used to send the file to the resource. If null, the default is POST for HTTP.</param>
      <param name="data">The string to be uploaded.</param>
      <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="address" /> parameter is null-or- <paramref name="data" /> is null.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
      <exception cref="T:System.StackOverflowException">The execution stack overflowed because it contains too many nested method calls.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">A call was made to the <see cref="M:System.Threading.Thread.Abort" /> method to destroy a thread.</exception>
      <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress" /> and <paramref name="address" /> is invalid.-or- There was no response from the server hosting the resource.</exception>
    </member>
    <member name="E:System.Net.WebClient.UploadStringCompleted">
      <summary>Occurs when an asynchronous string-upload operation completes.</summary>
    </member>
    <member name="P:System.Net.WebClient.UseDefaultCredentials">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value that controls whether default credentials are sent with requests.</summary>
      <returns>true if the default credentials are used; otherwise false. The default value is true.</returns>
    </member>
    <member name="E:System.Net.WebClient.WriteStreamClosed">
      <summary>Occurs when an asynchronous write stream operation completes.</summary>
    </member>
    <member name="T:System.Net.WebException">
      <summary>The exception that is thrown when an error occurs while accessing the network through a pluggable protocol.</summary>
    </member>
    <member name="M:System.Net.WebException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException" /> class.</summary>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error message.</summary>
      <param name="message">The text of the error message. </param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error message and nested exception.</summary>
      <param name="message">The text of the error message. </param>
      <param name="innerException">A nested exception. </param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception,System.Net.WebExceptionStatus,System.Net.WebResponse)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error message, nested exception, status, and response.</summary>
      <param name="message">The text of the error message.</param>
      <param name="innerException">A nested exception.</param>
      <param name="status">One of the <see cref="T:System.Net.WebExceptionStatus" /> values.</param>
      <param name="response">A <see cref="T:System.Net.WebResponse" /> instance that contains the response from the remote host.</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Net.WebExceptionStatus)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error message and status.</summary>
      <param name="message">The text of the error message. </param>
      <param name="status">One of the <see cref="T:System.Net.WebExceptionStatus" /> values. </param>
    </member>
    <member name="P:System.Net.WebException.Response">
      <summary>Gets the response that the remote host returned.</summary>
      <returns>If a response is available from the Internet resource, a <see cref="T:System.Net.WebResponse" /> instance that contains the error response from an Internet resource; otherwise, null.</returns>
    </member>
    <member name="P:System.Net.WebException.Status">
      <summary>Gets the status of the response.</summary>
      <returns>One of the <see cref="T:System.Net.WebExceptionStatus" /> values.</returns>
    </member>
    <member name="T:System.Net.WebExceptionStatus">
      <summary>Defines status codes for the <see cref="T:System.Net.WebException" /> class.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Success">
      <summary>No error was encountered.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectFailure">
      <summary>The remote service point could not be contacted at the transport level.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SendFailure">
      <summary>A complete request could not be sent to the remote server.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestCanceled">
      <summary>The request was canceled, the <see cref="M:System.Net.WebRequest.Abort" /> method was called, or an unclassifiable error occurred. This is the default value for <see cref="P:System.Net.WebException.Status" />.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Pending">
      <summary>An internal asynchronous request is pending.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.UnknownError">
      <summary>An exception of unknown type has occurred.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.MessageLengthLimitExceeded">
      <summary>A message was received that exceeded the specified limit when sending a request or receiving a response from the server.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.NameResolutionFailure">
      <summary>The name resolver service could not resolve the host name. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ReceiveFailure">
      <summary>A complete response was not received from the remote server. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.PipelineFailure">
      <summary>The request was a pipelined request and the connection was closed before the response was received. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProtocolError">
      <summary>The response received from the server was complete but indicated a protocol-level error. For example, an HTTP protocol error such as 401 Access Denied would use this status. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectionClosed">
      <summary>The connection was prematurely closed. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.TrustFailure">
      <summary>A server certificate could not be validated. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SecureChannelFailure">
      <summary>An error occurred while establishing a connection using SSL. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ServerProtocolViolation">
      <summary>The server response was not a valid HTTP response. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.KeepAliveFailure">
      <summary>The connection for a request that specifies the Keep-alive header was closed unexpectedly. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Timeout">
      <summary>No response was received during the time-out period for a request. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProxyNameResolutionFailure">
      <summary>The name resolver service could not resolve the proxy host name. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="T:System.Net.WebHeaderCollection">
      <summary>Contains protocol headers associated with a request or response.</summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebHeaderCollection" /> class.</summary>
    </member>
    <member name="P:System.Net.WebHeaderCollection.AllKeys">
      <summary>Gets the collection of header name/value pairs associated with the request.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection" /> containing the header name/value pairs associated with this request.</returns>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Count">
      <summary>Gets the number of headers in the collection.</summary>
      <returns>An <see cref="T:System.Int32" /> indicating the number of headers in the <see cref="T:System.Net.WebHeaderCollection" /> associated with a request.</returns>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Item(System.Net.HttpRequestHeader)">
      <summary>Gets or sets the specified request header.</summary>
      <returns>A <see cref="T:System.String" /> instance containing the specified header value.</returns>
      <param name="header">The request header value.</param>
      <exception cref="T:System.InvalidOperationException">On a get or set operation, the request header specified in the <paramref name="header" /> parameter is a restricted header. The <see cref="T:System.Net.WebHeaderCollection" /> class does not allow a user to get or set instances of this restricted header in this <see cref="T:System.Net.WebHeaderCollection" /> instance. </exception>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Item(System.String)">
      <summary>Gets or sets the specified request header.</summary>
      <returns>A <see cref="T:System.String" /> instance containing the specified header value.</returns>
      <param name="name">The name of the requested header.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter contains illegal characters- or -an attempt was made to set a restricted header on the <see cref="T:System.Net.WebHeaderCollection" /> object associated with a <see cref="T:System.Net.HttpWebRequest" /> object</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter was null.</exception>
      <exception cref="T:System.InvalidOperationException">On a get or set operation, the request header specified in the <paramref name="name" /> parameter is a restricted header. The <see cref="T:System.Net.WebHeaderCollection" /> class does not allow a user to get or set instances of this restricted header in this <see cref="T:System.Net.WebHeaderCollection" /> instance. </exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:System.Net.WebHeaderCollection" /> instance. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Net.WebHeaderCollection" />.</returns>
    </member>
    <member name="T:System.Net.WebRequest">
      <summary>Makes a request to a Uniform Resource Identifier (URI). This is an abstract class.</summary>
    </member>
    <member name="M:System.Net.WebRequest.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebRequest" /> class.</summary>
    </member>
    <member name="M:System.Net.WebRequest.Abort">
      <summary>Aborts the Request.</summary>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>When overridden in a descendant class, provides an asynchronous method to request a stream.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.</returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name="state">An object containing state information for this asynchronous request.</param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>When overridden in a descendant class, begins an asynchronous request for an Internet resource.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.</returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name="state">An object containing state information for this asynchronous request.</param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="P:System.Net.WebRequest.ContentLength">
      <summary>When overridden in a descendant class, gets or sets the content length of the request data being sent.</summary>
      <returns>The number of bytes of request data being sent.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
    </member>
    <member name="P:System.Net.WebRequest.ContentType">
      <summary>When overridden in a descendant class, gets or sets the content type of the request data being sent.</summary>
      <returns>The content type of the request data.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.String)">
      <summary>Initializes a new <see cref="T:System.Net.WebRequest" /> instance for the specified URI scheme.</summary>
      <returns>A <see cref="T:System.Net.WebRequest" /> descendant for the specific URI scheme.</returns>
      <param name="requestUriString">The URI string that identifies the Internet resource.</param>
      <exception cref="T:System.NotSupportedException">The request scheme specified in <paramref name="requestUriString" /> has not been registered. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUriString" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. </exception>
      <exception cref="T:System.UriFormatException">The URI specified in <paramref name="requestUriString" /> is not a valid URI. </exception>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.Uri)">
      <summary>Initializes a new <see cref="T:System.Net.WebRequest" /> instance for the specified URI scheme.</summary>
      <returns>A <see cref="T:System.Net.WebRequest" /> descendant for the specific URI scheme.</returns>
      <param name="requestUri">A <see cref="T:System.Uri" /> containing the URI of the requested resource.</param>
      <exception cref="T:System.NotSupportedException">The request scheme specified in <paramref name="requestUri" /> has not been registered. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. </exception>
    </member>
    <member name="M:System.Net.WebRequest.CreateHttp(System.String)">
      <summary>Initializes a new <see cref="T:System.Net.HttpWebRequest" /> instance for the specified URI string.</summary>
      <returns>An <see cref="T:System.Net.HttpWebRequest" /> instance for the specific URI string.</returns>
      <param name="requestUriString">A URI string that identifies the Internet resource. </param>
      <exception cref="T:System.NotSupportedException">The request scheme specified in <paramref name="requestUriString" /> is the http or https scheme. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUriString" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. </exception>
      <exception cref="T:System.UriFormatException">The URI specified in <paramref name="requestUriString" /> is not a valid URI. </exception>
    </member>
    <member name="M:System.Net.WebRequest.CreateHttp(System.Uri)">
      <summary>Initializes a new <see cref="T:System.Net.HttpWebRequest" /> instance for the specified URI.</summary>
      <returns>An <see cref="T:System.Net.HttpWebRequest" /> instance for the specific URI string.</returns>
      <param name="requestUri">A URI that identifies the Internet resource.</param>
      <exception cref="T:System.NotSupportedException">The request scheme specified in <paramref name="requestUri" /> is the http or https scheme. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. </exception>
      <exception cref="T:System.UriFormatException">The URI specified in <paramref name="requestUri" /> is not a valid URI. </exception>
    </member>
    <member name="P:System.Net.WebRequest.CreatorInstance">
      <summary>When overridden in a descendant class, gets the factory object derived from the <see cref="T:System.Net.IWebRequestCreate" /> class used to create the <see cref="T:System.Net.WebRequest" /> instantiated for making the request to the specified URI.</summary>
      <returns>The derived <see cref="T:System.Net.WebRequest" /> type returned by the <see cref="M:System.Net.IWebRequestCreate.Create(System.Uri)" /> method.</returns>
    </member>
    <member name="P:System.Net.WebRequest.Credentials">
      <summary>When overridden in a descendant class, gets or sets the network credentials used for authenticating the request with the Internet resource.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> containing the authentication credentials associated with the request. The default is null.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>When overridden in a descendant class, returns a <see cref="T:System.IO.Stream" /> for writing data to the Internet resource.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> to write data to.</returns>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references a pending request for a stream.</param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>When overridden in a descendant class, returns a <see cref="T:System.Net.WebResponse" />.</summary>
      <returns>A <see cref="T:System.Net.WebResponse" /> that contains a response to the Internet request.</returns>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references a pending request for a response.</param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="P:System.Net.WebRequest.Headers">
      <summary>When overridden in a descendant class, gets or sets the collection of header name/value pairs associated with the request.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection" /> containing the header name/value pairs associated with this request.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
    </member>
    <member name="P:System.Net.WebRequest.Method">
      <summary>When overridden in a descendant class, gets or sets the protocol method to use in this request.</summary>
      <returns>The protocol method to use in this request.</returns>
      <exception cref="T:System.NotImplementedException">If the property is not overridden in a descendant class, any attempt is made to get or set the property. </exception>
    </member>
    <member name="M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)">
      <summary>Registers a <see cref="T:System.Net.WebRequest" /> descendant for the specified URI.</summary>
      <returns>true if registration is successful; otherwise, false.</returns>
      <param name="prefix">The complete URI or URI prefix that the <see cref="T:System.Net.WebRequest" /> descendant services.</param>
      <param name="creator">The create method that the <see cref="T:System.Net.WebRequest" /> calls to create the <see cref="T:System.Net.WebRequest" /> descendant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> is null-or- <paramref name="creator" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="prefix" /> is unknown or not supported.</exception>
    </member>
    <member name="P:System.Net.WebRequest.RequestUri">
      <summary>When overridden in a descendant class, gets the URI of the Internet resource associated with the request.</summary>
      <returns>A <see cref="T:System.Uri" /> representing the resource associated with the request.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
    </member>
    <member name="P:System.Net.WebRequest.UseDefaultCredentials">
      <summary>When overridden in a descendant class, gets or sets a <see cref="T:System.Boolean" /> value that controls whether default credentials are sent with requests.</summary>
      <returns>true if the default credentials are used; otherwise false. For requests created using the default <see cref="P:System.Net.Browser.WebRequestCreator.BrowserHttp" /> stack, the default value is true.  For requests created using the <see cref="P:System.Net.Browser.WebRequestCreator.ClientHttp" /> stack, the default value is false.</returns>
      <exception cref="T:System.NotImplementedException">This property is not implemented.</exception>
    </member>
    <member name="T:System.Net.WebResponse">
      <summary>Provides a response from a Uniform Resource Identifier (URI). This is an abstract class.</summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.WebResponse" /> class.</summary>
    </member>
    <member name="M:System.Net.WebResponse.Close">
      <summary>When overridden by a descendant class, closes the response stream.</summary>
      <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="P:System.Net.WebResponse.ContentLength">
      <summary>When overridden in a descendant class, gets or sets the content length of data being received.</summary>
      <returns>The number of bytes returned from the Internet resource.</returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
    </member>
    <member name="P:System.Net.WebResponse.ContentType">
      <summary>When overridden in a derived class, gets or sets the content type of the data being received.</summary>
      <returns>A string that contains the content type of the response.</returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Net.WebResponse.GetResponseStream">
      <summary>When overridden in a descendant class, returns the data stream from the Internet resource.</summary>
      <returns>An instance of the <see cref="T:System.IO.Stream" /> class for reading data from the Internet resource.</returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="P:System.Net.WebResponse.Headers">
      <summary>When overridden in a derived class, gets a collection of header name-value pairs associated with this request.</summary>
      <returns>An instance of the <see cref="T:System.Net.WebHeaderCollection" /> class that contains header values associated with this response.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
    </member>
    <member name="P:System.Net.WebResponse.ResponseUri">
      <summary>When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.</summary>
      <returns>An instance of the <see cref="T:System.Uri" /> class that contains the URI of the Internet resource that actually responded to the request.</returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
    </member>
    <member name="P:System.Net.WebResponse.SupportsHeaders">
      <summary>Gets a value that indicates whether the <see cref="P:System.Net.WebResponse.Headers" /> property is supported by the descendant class for the <see cref="T:System.Net.WebResponse" /> instance.</summary>
      <returns>true if the <see cref="P:System.Net.WebResponse.Headers" /> property is supported by the <see cref="T:System.Net.HttpWebRequest" /> instance in the descendant class; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.WebResponse.System#IDisposable#Dispose">
      <summary>When overridden in a derived class, releases all resources used by the <see cref="T:System.Net.WebResponse" />.</summary>
      <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="T:System.Net.WriteStreamClosedEventArgs">
      <summary>Provides data for the <see cref="E:System.Net.WebClient.WriteStreamClosed" /> event.</summary>
    </member>
    <member name="P:System.Net.WriteStreamClosedEventArgs.Error">
      <summary>Gets the error associated with a <see cref="E:System.Net.WebClient.WriteStreamClosed" /> event.</summary>
      <returns>The exception associated with a <see cref="E:System.Net.WebClient.WriteStreamClosed" /> event when an error occurs.</returns>
    </member>
    <member name="T:System.Net.WriteStreamClosedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Net.WebClient.WriteStreamClosed" /> event of a <see cref="T:System.Net.WebClient" />.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Net.WriteStreamClosedEventArgs" /> containing event data.</param>
    </member>
    <member name="P:System.Net.HttpWebRequest.Credentials">
      <summary>Gets or sets authentication information for the request.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> that contains the authentication credentials associated with the request. The default is null.</returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.Finalize">
      <summary>Releases the resources held by the current <see cref="T:System.Net.HttpWebRequest" /> instance.</summary>
    </member>
    <member name="M:System.Net.HttpWebResponse.Close">
      <summary>Closes the response stream.</summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentLength">
      <summary>Gets the length of the content returned by the request.</summary>
      <returns>The number of bytes returned by the request. Content length does not include header information.</returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentType">
      <summary>Gets the content type of the response.</summary>
      <returns>A string that contains the content type of the response.</returns>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseStream">
      <summary>Gets the stream that is used to read the body of the response from the server.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> containing the body of the response.</returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.Headers">
      <summary>Gets the headers that are associated with this response from the server.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection" /> that contains the header information returned with the response.</returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.ResponseUri">
      <summary>Gets the URI of the Internet resource that responded to the request.</summary>
      <returns>A <see cref="T:System.Uri" /> that contains the URI of the Internet resource that responded to the request.</returns>
    </member>
    <member name="M:System.Net.HttpWebResponse.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Net.HttpWebResponse" />.</summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Net.WebHeaderCollection" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Net.WebHeaderCollection" />.</returns>
    </member>
    <member name="M:System.Net.WebResponse.Dispose"></member>
    <member name="T:System.Net.NetworkInformation.NetworkAddressChangedEventHandler">
      <summary>References one or more methods to be called when the address of a network interface changes.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains data about the event. </param>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkChange">
      <summary>Allows applications to receive notification when the Internet Protocol (IP) address of a network interface, also called a network card or adapter, changes.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkChange.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkChange" /> class.</summary>
    </member>
    <member name="E:System.Net.NetworkInformation.NetworkChange.NetworkAddressChanged">
      <summary>Occurs when the IP address of a network interface changes.</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInterface">
      <summary>Provides availability information for a network interface.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInterface" /> class.</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable">
      <summary>Indicates whether any network connection is available.</summary>
      <returns>true if a network connection is available; otherwise, false.</returns>
    </member>
    <member name="T:System.Net.Sockets.AddressFamily">
      <summary>Specifies the addressing scheme that an instance of the <see cref="T:System.Net.Sockets.Socket" /> class can use.</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unknown">
      <summary>An unknown address family.</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unspecified">
      <summary>An address family has not been specified.</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetwork">
      <summary>An address for IP version 4. </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetworkV6">
      <summary>An address for IP version 6.</summary>
    </member>
    <member name="T:System.Net.Sockets.ProtocolType">
      <summary>Specifies the protocol that the <see cref="T:System.Net.Sockets.Socket" /> class supports.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Tcp">
      <summary>The Transmission Control Protocol (TCP).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unspecified">
      <summary>The protocol type is unspecified.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unknown">
      <summary>An unknown protocol type. </summary>
    </member>
    <member name="T:System.Net.Sockets.Socket">
      <summary>Implements the Berkeley sockets interface.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified address family, socket type and protocol.</summary>
      <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</param>
      <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</param>
      <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</param>
      <exception cref="T:System.ArgumentException">A parameter was invalid. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">The combination of <paramref name="addressFamily" />, <paramref name="socketType" />, and <paramref name="protocolType" /> results in an invalid socket. </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.AddressFamily">
      <summary>Gets the address family of the <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Cancels an outstanding asynchronous socket operation for a remote host connection.</summary>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object for the asynchronous socket operation that should be canceled.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close">
      <summary>Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close(System.Int32)">
      <summary>Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources with a specified timeout to allow queued data to be sent.</summary>
      <param name="timeout">The maximum amount of time, in seconds, to wait in order to send any remaining data, and then close the <see cref="T:System.Net.Sockets.Socket" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout" /> is less than 0. </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Begins an asynchronous request for a remote host connection.</summary>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will not be raised. The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</param>
      <exception cref="T:System.ArgumentException">An argument is not valid. This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method. This exception also occurs if address family of the <see cref="T:System.Net.Sockets.Socket" /> and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Begins an asynchronous request for a remote host connection.</summary>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will not be raised. The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <param name="socketType">The socket type to use establishing the connection.</param>
      <param name="protocolType">The protocol type to use establishing the connection.</param>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</param>
      <exception cref="T:System.ArgumentException">An argument is not valid. This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method. This exception also occurs if address family of the <see cref="T:System.Net.Sockets.Socket" /> and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
      <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.Connected">
      <summary>Gets a value that indicates whether a <see cref="T:System.Net.Sockets.Socket" /> is connected to a remote host as of the last operation.</summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket" /> was connected to a remote resource as of the most recent operation; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.Socket" />, and optionally disposes of the managed resources.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.Socket" />, and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Finalize">
      <summary>Frees resources used by the <see cref="T:System.Net.Sockets.Socket" /> class.</summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.NoDelay">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> is using the Nagle algorithm.</summary>
      <returns>false if the <see cref="T:System.Net.Sockets.Socket" /> uses the Nagle algorithm; otherwise, true. The default is false.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />. See the Remarks section for more information. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv4">
      <summary>Gets a value indicating whether IPv4 support is available and enabled on the current host.</summary>
      <returns>true if the current host supports the IPv4 protocol; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv6">
      <summary>Gets a value indicating whether IPv6 support is available and enabled on the current host.</summary>
      <returns>true if the current host supports the IPv4 protocol; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.ProtocolType">
      <summary>Gets the protocol type of the <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket" /> object.</summary>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will not be raised. The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object in the <paramref name="e" /> parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</param>
      <exception cref="T:System.ArgumentException">An argument was invalid. The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for an internal socket option associated with the <see cref="T:System.Net.Sockets.Socket" /> was incorrect.</exception>
      <exception cref="T:System.InvalidOperationException">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.ReceiveBufferSize">
      <summary>Gets or sets a value that specifies the size of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the size, in bytes, of the receive buffer. The default is 8192.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than 0.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.RemoteEndPoint">
      <summary>Gets the remote endpoint.</summary>
      <returns>The <see cref="T:System.Net.EndPoint" /> with which the <see cref="T:System.Net.Sockets.Socket" /> is communicating.</returns>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</summary>
      <returns>Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will not be raised. The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter may be examined immediately after the method call returns to retrieve the result of the operation.</returns>
      <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for an internal socket option associated with the <see cref="T:System.Net.Sockets.Socket" /> was incorrect.</exception>
      <exception cref="T:System.InvalidOperationException">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP or later is required for this method.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">The <see cref="T:System.Net.Sockets.Socket" /> is not yet connected.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.SendBufferSize">
      <summary>Gets or sets a value that specifies the size of the send buffer of the <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the size, in bytes, of the send buffer. The default is 8192.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than 0.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)">
      <summary>Disables sends and receives on a <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <param name="how">One of the <see cref="T:System.Net.Sockets.SocketShutdown" /> values that specifies the operation that will no longer be allowed.</param>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.Ttl">
      <summary>Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>The TTL value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The TTL value cannot be set to a value less than 0.</exception>
      <exception cref="T:System.NotSupportedException">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket" /> has been closed. </exception>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncEventArgs">
      <summary>Represents an asynchronous socket operation.</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.#ctor">
      <summary>Creates an empty <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance.</summary>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer">
      <summary>Gets the data buffer to use with an asynchronous socket method.</summary>
      <returns>A <see cref="T:System.Byte" /> array that represents the data buffer to use with an asynchronous socket method.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList">
      <summary>Gets or sets an array of data buffers to use with an asynchronous socket method.</summary>
      <returns>An array of data buffers to use with an asynchronous socket method.</returns>
      <exception cref="T:System.ArgumentException">There are ambiguous buffers specified on a set operation. This exception occurs if a value other than null is passed and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property is also not null.</exception>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred">
      <summary>Gets the number of bytes transferred in the socket operation.</summary>
      <returns>The number of bytes transferred in the socket operation.</returns>
    </member>
    <member name="E:System.Net.Sockets.SocketAsyncEventArgs.Completed">
      <summary>An event that indicates an asynchronous operation is completed.</summary>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError">
      <summary>Gets the exception in the case of a connection failure when a <see cref="T:System.Net.DnsEndPoint" /> was used.</summary>
      <returns>A <see cref="T:System.Exception" /> that indicates the cause of the connection error when a <see cref="T:System.Net.DnsEndPoint" /> was specified for the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> property.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket">
      <summary>The created and connected <see cref="T:System.Net.Sockets.Socket" /> object after successful completion of the <see cref="Overload:System.Net.Sockets.Socket.ConnectAsync" /> method.</summary>
      <returns>The connected <see cref="T:System.Net.Sockets.Socket" /> object. </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Count">
      <summary>Gets the maximum amount of data, in bytes, to send or receive in an asynchronous operation.</summary>
      <returns>The maximum amount of data, in bytes, to send or receive.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance and optionally disposes of the managed resources.</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Finalize">
      <summary>Frees resources used by the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> class.</summary>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.LastOperation">
      <summary>Gets the type of socket operation most recently performed with this object.</summary>
      <returns>The type of socket operation most recently performed with this <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Offset">
      <summary>Gets the offset, in bytes, into the data buffer referenced by the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property.</summary>
      <returns>The offset, in bytes, into the data buffer referenced by the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Represents a method that is called when an asynchronous operation completes.</summary>
      <param name="e">The event that is signaled.</param>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint">
      <summary>Gets or sets the remote IP or DNS endpoint for an asynchronous operation.</summary>
      <returns>The remote IP endpoint for an asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)">
      <summary>Sets the data buffer to use with an asynchronous socket method.</summary>
      <param name="buffer">The data buffer to use with an asynchronous socket method.</param>
      <param name="offset">The offset, in bytes, in the data buffer where the operation starts.</param>
      <param name="count">The maximum amount of data, in bytes, to send or receive in the buffer.</param>
      <exception cref="T:System.ArgumentException">There are ambiguous buffers specified. This exception occurs if the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property is also not null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is also not null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">An argument was out of range. This exception occurs if the <paramref name="offset" /> parameter is less than zero or greater than the length of the array in the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property. This exception also occurs if the <paramref name="count" /> parameter is less than zero or greater than the length of the array in the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property minus the <paramref name="offset" /> parameter.</exception>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)">
      <summary>Sets the data buffer to use with an asynchronous socket method.</summary>
      <param name="offset">The offset, in bytes, in the data buffer where the operation starts.</param>
      <param name="count">The maximum amount of data, in bytes, to send or receive in the buffer.</param>
      <exception cref="T:System.ArgumentException">There are ambiguous buffers specified. This exception occurs if the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property is also not null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is also not null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">An argument was out of range. This exception occurs if the <paramref name="offset" /> parameter is less than zero or greater than the length of the array in the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property. This exception also occurs if the <paramref name="count" /> parameter is less than zero or greater than the length of the array in the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property minus the <paramref name="offset" /> parameter.</exception>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketClientAccessPolicyProtocol">
      <summary>Gets or sets the method to download the policy file that an instance of the <see cref="T:System.Net.Sockets.Socket" /> class will use.</summary>
      <returns>The method to download the policy file that an instance of the <see cref="T:System.Net.Sockets.Socket" /> class will use. The default is <see cref="F:System.Net.Sockets.SocketClientAccessPolicyProtocol.Tcp" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketError">
      <summary>Gets or sets the result of the asynchronous socket operation.</summary>
      <returns>The result of the asynchronous socket operation.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken">
      <summary>Gets or sets a user or application object associated with this asynchronous socket operation.</summary>
      <returns>An object that represents the user or application object associated with this asynchronous socket operation.</returns>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncOperation">
      <summary>The type of asynchronous socket operation most recently performed with this object.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.None">
      <summary>None of the socket operations.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Connect">
      <summary>A socket Connect operation.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Receive">
      <summary>A socket Receive operation.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Send">
      <summary>A socket Send operation.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketClientAccessPolicyProtocol">
      <summary>Specifies the method to download the policy file that an instance of the <see cref="T:System.Net.Sockets.Socket" /> class will use.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketClientAccessPolicyProtocol.Tcp">
      <summary>The <see cref="T:System.Net.Sockets.Socket" /> class will attempt to download the socket policy file using custom TCP protocol running on TCP port 943. </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketClientAccessPolicyProtocol.Http">
      <summary>The <see cref="T:System.Net.Sockets.Socket" /> class will attempt to download the socket policy file using HTTP. </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketError">
      <summary>Defines error codes for the <see cref="T:System.Net.Sockets.Socket" /> class.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Success">
      <summary>The <see cref="T:System.Net.Sockets.Socket" /> operation succeeded.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketError">
      <summary>An unspecified <see cref="T:System.Net.Sockets.Socket" /> error has occurred.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Interrupted">
      <summary>A blocking <see cref="T:System.Net.Sockets.Socket" /> call was canceled.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AccessDenied">
      <summary>An attempt was made to access a <see cref="T:System.Net.Sockets.Socket" /> in a way that is forbidden by its access permissions.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Fault">
      <summary>An invalid pointer address was detected by the underlying socket provider.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InvalidArgument">
      <summary>An invalid argument was supplied to a <see cref="T:System.Net.Sockets.Socket" /> member.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TooManyOpenSockets">
      <summary>There are too many open sockets in the underlying socket provider.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.WouldBlock">
      <summary>An operation on a nonblocking socket cannot be completed immediately.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InProgress">
      <summary>A blocking operation is in progress.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AlreadyInProgress">
      <summary>The nonblocking <see cref="T:System.Net.Sockets.Socket" /> already has an operation in progress.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotSocket">
      <summary>A <see cref="T:System.Net.Sockets.Socket" /> operation was attempted on a non-socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.DestinationAddressRequired">
      <summary>A required address was omitted from an operation on a <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.MessageSize">
      <summary>The datagram is too long.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolType">
      <summary>The protocol type is incorrect for this <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolOption">
      <summary>An unknown, invalid, or unsupported option or level was used with a <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolNotSupported">
      <summary>The protocol is not implemented or has not been configured.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketNotSupported">
      <summary>The support for the specified socket type does not exist in this address family.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationNotSupported">
      <summary>The address family is not supported by the protocol family.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolFamilyNotSupported">
      <summary>The protocol family is not implemented or has not been configured.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressFamilyNotSupported">
      <summary>The address family specified is not supported. This error is returned if the IPv6 address family was specified and the IPv6 stack is not installed on the local machine. This error is returned if the IPv4 address family was specified and the IPv4 stack is not installed on the local machine.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressAlreadyInUse">
      <summary>Only one use of an address is normally permitted.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressNotAvailable">
      <summary>The selected IP address is not valid in this context.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkDown">
      <summary>The network is not available.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkUnreachable">
      <summary>No route to the remote host exists.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkReset">
      <summary>The application tried to set an option on a connection that has already timed out.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionAborted">
      <summary>The connection was aborted by the .NET Framework or the underlying socket provider.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionReset">
      <summary>The connection was reset by the remote peer.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoBufferSpaceAvailable">
      <summary>No free buffer space is available for a <see cref="T:System.Net.Sockets.Socket" /> operation.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IsConnected">
      <summary>The <see cref="T:System.Net.Sockets.Socket" /> is already connected.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotConnected">
      <summary>The application tried to send or receive data, and the <see cref="T:System.Net.Sockets.Socket" /> is not connected.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Shutdown">
      <summary>A request to send or receive data was disallowed because the <see cref="T:System.Net.Sockets.Socket" /> has already been closed.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TimedOut">
      <summary>The connection attempt timed out, or the connected host has failed to respond.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionRefused">
      <summary>The remote host is actively refusing a connection.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostDown">
      <summary>The operation failed because the remote host is down.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostUnreachable">
      <summary>There is no network route to the specified host.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProcessLimit">
      <summary>Too many processes are using the underlying socket provider.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SystemNotReady">
      <summary>The network subsystem is unavailable.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.VersionNotSupported">
      <summary>The version of the underlying socket provider is out of range.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotInitialized">
      <summary>The underlying socket provider has not been initialized.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Disconnecting">
      <summary>A graceful shutdown is in progress.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TypeNotFound">
      <summary>The specified class was not found.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostNotFound">
      <summary>No such host is known. The name is not an official host name or alias.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TryAgain">
      <summary>The name of the host could not be resolved. Try again later.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoRecovery">
      <summary>The error is unrecoverable or the requested database cannot be located.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoData">
      <summary>The requested name or IP address was not found on the name server.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IOPending">
      <summary>The application has initiated an overlapped operation that cannot be completed immediately.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationAborted">
      <summary>The overlapped operation was aborted due to the closure of the <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketException">
      <summary>The exception that is thrown when a socket error occurs.</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException" /> class with the last operating system error code.</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException" /> class with the specified error code.</summary>
      <param name="errorCode">The error code that indicates the error that occurred.</param>
    </member>
    <member name="P:System.Net.Sockets.SocketException.ErrorCode">
      <summary>Gets the error code that is associated with this exception.</summary>
      <returns>An integer error code that is associated with this exception.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketException.SocketErrorCode">
      <summary>Gets the error code that is associated with this exception.</summary>
      <returns>A <see cref="T:System.Net.Sockets.SocketError" /> that is associated with this exception.</returns>
    </member>
    <member name="T:System.Net.Sockets.SocketShutdown">
      <summary>Defines constants that are used by the <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" /> method.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Receive">
      <summary>Disables a <see cref="T:System.Net.Sockets.Socket" /> for receiving.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Send">
      <summary>Disables a <see cref="T:System.Net.Sockets.Socket" /> for sending.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Both">
      <summary>Disables a <see cref="T:System.Net.Sockets.Socket" /> for both sending and receiving.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketType">
      <summary>Specifies the type of socket that an instance of the <see cref="T:System.Net.Sockets.Socket" /> class represents.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Stream">
      <summary>A socket type that supports reliable, two-way, connection-based byte streams without the duplication of data and without preservation of boundaries. A <see cref="T:System.Net.Sockets.Socket" /> of this type communicates with a single peer and requires a remote host connection before communication can begin. This socket type uses the Transmission Control Protocol (<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />) and the <see cref="T:System.Net.Sockets.AddressFamily" />.can be either <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Unknown">
      <summary>An unknown Socket type.</summary>
    </member>
    <member name="T:System.Net.Sockets.UdpAnySourceMulticastClient">
      <summary>A client receiver for multicast traffic from any source, also known as Any Source Multicast (ASM) or Internet Standard Multicast (ISM).</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>Creates a new <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> UDP client that can subscribe to a group address and receive datagrams from any source.</summary>
      <param name="groupAddress">The multicast group address for this receiver to subscribe to.</param>
      <param name="localPort">The local port for this receiver to bind to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="groupAddress" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="localPort" /> is less than 0-or-<paramref name="localPort" /> is greater than 65,535.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="localPort" /> is less than 1,024.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)">
      <summary>Binds the socket and begins a join operation to the multicast group to allow datagrams to be received from any group participant.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
      <param name="callback">A callback method to invoke when the operation completes.</param>
      <param name="state">Optional state information to pass to the <paramref name="callback" /> method for this operation.</param>
      <exception cref="T:System.InvalidOperationException">The multicast group has already been joined or a join operation is currently in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins the operation of receiving a packet from the joined multicast group and invokes the specified callback when a packet has arrived on the group from any sender.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
      <param name="buffer">The buffer to store the received data.</param>
      <param name="offset">The offset, in bytes, from the beginning of the <paramref name="buffer" /> where the data should be stored.</param>
      <param name="count">The maximum number of bytes to receive and store in the <paramref name="buffer" />. </param>
      <param name="callback">The callback method to invoke when the operation completes.</param>
      <param name="state">Optional state information to pass to the <paramref name="callback" /> method for this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0-or-<paramref name="offset" /> is greater than the length of the <paramref name="buffer" />.-or-<paramref name="count" /> is less than 0-or- <paramref name="offset" /> plus the <paramref name="count" /> is greater than the length of the <paramref name="buffer" />.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket for sending. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)">
      <summary>Begins the operation of sending a unicast packet to the specified destination.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
      <param name="buffer">The buffer that contains the data to send.</param>
      <param name="offset">The offset, in bytes, from the beginning of the <paramref name="buffer" /> to read the data to be sent.</param>
      <param name="count">The number of bytes to send from the <paramref name="buffer" />.</param>
      <param name="remoteEndPoint">The remote endpoint to which the packet is to be sent.</param>
      <param name="callback">The callback method to invoke when the operation completes.</param>
      <param name="state">Optional state information to pass to the <paramref name="callback" /> method for this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0-or-<paramref name="offset" /> is greater than the length of the <paramref name="buffer" />.-or-<paramref name="count" /> is less than 0-or- <paramref name="offset" /> plus the <paramref name="count" /> is greater than the length of the <paramref name="buffer" />.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket for sending. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins the operation of sending a packet to a joined multicast group and invokes the specified callback when a packet has been sent to the group.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
      <param name="buffer">The buffer that contains the data to send.</param>
      <param name="offset">The offset, in bytes, from the beginning of the <paramref name="buffer" /> to read the data to be sent.</param>
      <param name="count">The number of bytes to send from the <paramref name="buffer" />.</param>
      <param name="callback">The callback method to invoke when the operation completes.</param>
      <param name="state">Optional state information to pass to the <paramref name="callback" /> method for this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0-or-<paramref name="offset" /> is greater than the length of the <paramref name="buffer" />.-or-<paramref name="count" /> is less than 0-or- <paramref name="offset" /> plus the <paramref name="count" /> is greater than the length of the <paramref name="buffer" />.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket for sending. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)">
      <summary>Blocks a source so that multicast packets originating from it are no longer received.</summary>
      <param name="sourceAddress">The address of the source to block.</param>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose">
      <summary>Leaves the multicast group and releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> class and the underlying <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup(System.IAsyncResult)">
      <summary>Completes the asynchronous join group operation to a multicast group.</summary>
      <param name="result">The result of the asynchronous join operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup(System.IAsyncResult,System.Net.IPEndPoint@)">
      <summary>Completes the asynchronous operation of receiving a packet from the joined multicast group and provides the information received.</summary>
      <returns>The length, in bytes, of the message stored in the <paramref name="buffer" /> parameter passed to the <see cref="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method.</returns>
      <param name="result">The result of the asynchronous receive operation.</param>
      <param name="source">The source endpoint where the packet was received from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo(System.IAsyncResult)">
      <summary>Completes the operation of sending a unicast packet to the specified destination.</summary>
      <param name="result">The result of the asynchronous send operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup(System.IAsyncResult)">
      <summary>Completes the operation of sending a packet to a multicast group.</summary>
      <param name="result">The result of the asynchronous send operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback">
      <summary>Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.</summary>
      <returns>A value that indicates if outgoing packets to a multicast group are delivered to the sending application.</returns>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
    </member>
    <member name="P:System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize">
      <summary>Gets or sets the size, in bytes, of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" /> used for multicast receive operations on this <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> instance. </summary>
      <returns>The size, in bytes, of the receive buffer.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The buffer size specified is less than 0.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
    </member>
    <member name="P:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize">
      <summary>Gets or sets the size, in bytes, of the send buffer of the <see cref="T:System.Net.Sockets.Socket" /> used for multicast send operations on this <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> instance.</summary>
      <returns>The size, in bytes, of the send buffer.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The buffer size specified is less than 0.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
    </member>
    <member name="M:System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource(System.Net.IPAddress)">
      <summary>Unblocks a source that was previously blocked by a call to the <see cref="M:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)" /> method so that multicast packets originating from it can be received.</summary>
      <param name="sourceAddress">The address of the source to unblock.</param>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="T:System.Net.Sockets.UdpSingleSourceMulticastClient">
      <summary>A client receiver for multicast traffic from a single source, also known as Source Specific Multicast (SSM).</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)">
      <summary>Creates a new <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> UDP client that can subscribe to a group address and receive datagrams from a single source.</summary>
      <param name="sourceAddress">The sender source address for this receiver to subscribe to.</param>
      <param name="groupAddress">The multicast group address for this receiver to subscribe to.</param>
      <param name="localPort">The local port for this receiver to bind to.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceAddress" /> and <paramref name="groupAddress" /> must be the same address family.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceAddress" /> is null.-or-<paramref name="groupAddress" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="localPort" /> is less than 0-or-<paramref name="localPort" /> is greater than 65,535.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="localPort" /> is less than 1,024.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)">
      <summary>Binds the socket and begins a join operation to the multicast group to allow datagrams to be received from a single source address.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
      <param name="callback">A callback method to invoke when the operation completes.</param>
      <param name="state">Optional state information to pass to the <paramref name="callback" /> method for this operation.</param>
      <exception cref="T:System.InvalidOperationException">The multicast group has already been joined or a join operation is currently in progress.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins the operation of receiving a packet from the joined multicast group and invokes the specified callback when a packet has arrived on the group from a specified sender.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
      <param name="buffer">The buffer to store the received data.</param>
      <param name="offset">The offset, in bytes, from the beginning of the <paramref name="buffer" /> where the data should be stored.</param>
      <param name="count">The maximum number of bytes to receive and store in the <paramref name="buffer" />. </param>
      <param name="callback">The callback method to invoke when the operation completes.</param>
      <param name="state">Optional state information to pass to the <paramref name="callback" /> method for this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0-or-<paramref name="offset" /> is greater than the length of the <paramref name="buffer" />.-or-<paramref name="count" /> is less than 0-or- <paramref name="offset" /> plus the <paramref name="count" /> is greater than the length of the <paramref name="buffer" />.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket for receiving. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins the operation of sending a unicast packet to the source previously specified.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references this operation.</returns>
      <param name="buffer">The buffer that contains the data to send.</param>
      <param name="offset">The offset, in bytes, from the beginning of the <paramref name="buffer" /> to read the data to be sent.</param>
      <param name="count">The number of bytes to send from the <paramref name="buffer" />.</param>
      <param name="remotePort">The remote port to which the packet is to be sent. The remote address is specified by the <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" /> constructor.</param>
      <param name="callback">The callback method to invoke when the operation completes.</param>
      <param name="state">Optional state information to pass to the <paramref name="callback" /> method for this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0-or-<paramref name="offset" /> is greater than the length of the <paramref name="buffer" />.-or-<paramref name="count" /> is less than 0-or- <paramref name="offset" /> plus the <paramref name="count" /> is greater than the length of the <paramref name="buffer" />.<paramref name="remotePort" /> is less than 0-or-<paramref name="remotePort" /> is greater than 65,535.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket for sending. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose">
      <summary>Leaves the multicast group and releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> class and the underlying <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(System.IAsyncResult)">
      <summary>Completes the asynchronous join group operation to a multicast group.</summary>
      <param name="result">The result of the asynchronous join operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(System.IAsyncResult,System.Int32@)">
      <summary>Completes the asynchronous operation of receiving a packet from the joined multicast group and provides the information received from a specified sender.</summary>
      <returns>The length, in bytes, of the message stored in the <paramref name="buffer" /> parameter passed to the <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method.</returns>
      <param name="result">The result of the asynchronous receive operation.</param>
      <param name="sourcePort">The source port where the packet was received from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(System.IAsyncResult)">
      <summary>Completes the operation of sending a unicast packet to a single source.</summary>
      <param name="result">The result of the asynchronous send operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize">
      <summary>Gets or sets the size, in bytes, of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" /> used for multicast receive operations on this <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> instance.</summary>
      <returns>The size, in bytes, of the receive buffer.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The buffer size specified is less than 0.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed. </exception>
    </member>
    <member name="P:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize">
      <summary>Gets or sets the size, in bytes, of the send buffer of the <see cref="T:System.Net.Sockets.Socket" /> used for multicast send operations on this <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> instance.</summary>
      <returns>The size, in bytes, of the send buffer.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The buffer size specified is less than 0.</exception>
      <exception cref="T:System.InvalidOperationException">The multicast group has not yet been joined.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> has been disposed. </exception>
    </member>
  </members>
</doc>