<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) Microsoft Corporation.  All rights reserved.
-->
<doc>
  <assembly>
    <name>System.Runtime.Serialization</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.CollectionDataContractAttribute">
      <summary>When applied to a collection type, enables custom specification of the collection item elements. This attribute can be applied only to types that are recognized by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> as valid, serializable collections.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.CollectionDataContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.CollectionDataContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.IsReference">
      <summary>Gets or sets a value that indicates whether to preserve object reference data.</summary>
      <returns>true to keep object reference data using standard XML; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.ItemName">
      <summary>Gets or sets a custom name for a collection element.</summary>
      <returns>The name to apply to collection elements.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.KeyName">
      <summary>Gets or sets the custom name for a dictionary key name.</summary>
      <returns>The name to use instead of the default dictionary key name.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.Name">
      <summary>Gets or sets the data contract name for the collection type.</summary>
      <returns>The data contract name for the collection type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.Namespace">
      <summary>Gets or sets the namespace for the data contract.</summary>
      <returns>The namespace of the data contract.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.ValueName">
      <summary>Gets or sets the custom name for a dictionary value name.</summary>
      <returns>The name to use instead of the default dictionary value name.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ContractNamespaceAttribute">
      <summary>Specifies the CLR namespace and XML namespace of the data contract. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ContractNamespaceAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ContractNamespaceAttribute" /> class using a specified namespace. </summary>
      <param name="contractNamespace">The namespace of the contract.</param>
    </member>
    <member name="P:System.Runtime.Serialization.ContractNamespaceAttribute.ClrNamespace">
      <summary>Gets or sets the CLR namespace of the data contract type. </summary>
      <returns>The CLR-legal namespace of a type. </returns>
    </member>
    <member name="P:System.Runtime.Serialization.ContractNamespaceAttribute.ContractNamespace">
      <summary>Gets the namespace of the data contract members.</summary>
      <returns>The namespace of the data contract members.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractAttribute">
      <summary>Specifies that the type defines or implements a data contract and can be serialized by a serializer, such as the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.IsReference">
      <summary>Gets or sets a value that indicates whether to preserve object reference data.</summary>
      <returns>true to keep object reference data using standard XML; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.Name">
      <summary>Gets or sets the name of the data contract for the type.</summary>
      <returns>The local name of the data contract. The default value is the name of the class that the attribute is applied to. </returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
      <summary>Gets or sets the namespace for the data contract for the type.</summary>
      <returns>The namespace of the data contract.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractSerializer">
      <summary>Serializes and deserializes an instance of a type into an XML stream or document using a supplied data contract. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type, and a collection of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" />  of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type using the supplied XML root element and namespace.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">The name of the XML element that encloses the content to serialize or deserialize.</param>
      <param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two string parameters as well as a list of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">The root element name of the content.</param>
      <param name="rootNamespace">The namespace of the root element.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" />  of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type using the XML root element and namespace specified through the parameters of type <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element name of the content.</param>
      <param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the namespace of the root element.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two <see cref="T:System.Xml.XmlDictionaryString" /> parameters as well as a list of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element name of the content.</param>
      <param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the namespace of the root element.</param>
      <param name="knownTypes">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the known types that may be present in the object graph.</param>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.IgnoreExtensionDataObject">
      <summary>Gets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.</summary>
      <returns>true to omit the extension data; otherwise, false. The default value is true.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>Determines whether the <see cref="T:System.Xml.XmlDictionaryReader" /> is positioned on an object that can be deserialized.</summary>
      <returns>true if the reader is at the start element of the stream to read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>Determines whether the <see cref="T:System.Xml.XmlReader" /> is positioned on an object that can be deserialized.</summary>
      <returns>true if the reader is at the start element of the stream to read; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream.</param>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.KnownTypes">
      <summary>Gets a collection of types that may be present in the object graph serialized using this instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the expected types passed in as known types to the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> constructor.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph">
      <summary>Gets the maximum number of items in an object graph to serialize or deserialize.</summary>
      <returns>The maximum number of items to serialize or deserialize. The default is <see cref="F:System.Int32.MaxValue" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of items exceeds the maximum value.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences">
      <summary>Gets a value that specifies whether to use non-standard XML constructs to preserve object reference data.</summary>
      <returns>true to keep the references; otherwise, false. The default value is false.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Reads the XML stream with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value. </summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream.</param>
      <param name="verifyObjectName">true to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, false. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <paramref name="verifyObjectName" /> parameter is set to true, and the element name and namespace do not correspond to the values set in the constructor. </exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>Reads the XML stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>Reads the XML stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream.</param>
      <param name="verifyObjectName">true to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, false.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <paramref name="verifyObjectName" /> parameter is set to true, and the element name and namespace do not correspond to the values set in the constructor. </exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes all the object data (starting XML element, content, and closing element) to an XML document or stream with an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the data to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the XML content using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the stream.</param>
      <param name="graph">The object to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the XML content using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the stream.</param>
      <param name="graph">The object to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML start element.</param>
      <param name="graph">The object to write.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML start element.</param>
      <param name="graph">The object to write.</param>
    </member>
    <member name="T:System.Runtime.Serialization.DataMemberAttribute">
      <summary>When applied to the member of a type, specifies that the member is part of a data contract and is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue">
      <summary>Gets or sets a value that specifies whether to serialize the default value for a field or property being serialized. </summary>
      <returns>true if the default value for a member should be generated in the serialization stream; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.IsRequired">
      <summary>Gets or sets a value that instructs the serialization engine whether the member must be present in the serialized data when it is being deserializing.</summary>
      <returns>true, if the member is required; otherwise, false. The default is false.</returns>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The member is not present or the member is present but it has a default value with <see cref="P:System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue" /> set to true.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.Name">
      <summary>Gets or sets a data member name. </summary>
      <returns>The name of the data member. The default name of a data contract for a given type of data member is the CLR member name of that type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.Order">
      <summary>Gets or sets the order of serialization and deserialization of a member.</summary>
      <returns>The numeric order of serialization or deserialization.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.EnumMemberAttribute">
      <summary>Specifies that the field is an enumeration member and should be serialized.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.EnumMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.EnumMemberAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.EnumMemberAttribute.Value">
      <summary>Gets or sets the value associated with the enumeration member the attribute is applied to.</summary>
      <returns>The value associated with the enumeration member.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IgnoreDataMemberAttribute">
      <summary>When applied to the member of a type, specifies that the member is not part of a data contract and is not serialized.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IgnoreDataMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.IgnoreDataMemberAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.Serialization.InvalidDataContractException">
      <summary>The exception that is thrown when the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> encounters an invalid data contract during serialization and deserialization. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> class with the specified error message. </summary>
      <param name="message">A description of the error. </param>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> class with the specified error message and inner exception. </summary>
      <param name="message">A description of the error. </param>
      <param name="innerException">The original <see cref="T:System.Exception" />. </param>
    </member>
    <member name="T:System.Runtime.Serialization.KnownTypeAttribute">
      <summary>Specifies types that should be recognized by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> when serializing or deserializing a given type. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> class with the name of a method that returns an <see cref="T:System.Collections.IEnumerable" /> of known types.</summary>
      <param name="methodName">The name of the method that returns an <see cref="T:System.Collections.IEnumerable" /> of types used when serializing or deserializing data.</param>
    </member>
    <member name="M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> class with the specified type. </summary>
      <param name="type">The <see cref="T:System.Type" /> that is included as a known type when serializing or deserializing data.</param>
    </member>
    <member name="P:System.Runtime.Serialization.KnownTypeAttribute.MethodName">
      <summary>Gets the name of a method that returns a list of types that should be recognized during serialization or deserialization. </summary>
      <returns>The name of the method on the type defined by the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> class.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.KnownTypeAttribute.Type">
      <summary>Gets the type that should be recognized during serialization or deserialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. </summary>
      <returns>The <see cref="T:System.Type" /> that is used during serialization or deserialization. </returns>
    </member>
    <member name="T:System.Runtime.Serialization.XmlObjectSerializer">
      <summary>Provides the base class used to serialize objects as XML streams or documents. This class is abstract.</summary>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized. </exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>Gets a value that specifies whether the <see cref="T:System.Xml.XmlDictionaryReader" /> is positioned over an XML element that can be read.</summary>
      <returns>true if the reader can read the data; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream or document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>Gets a value that specifies whether the <see cref="T:System.Xml.XmlReader" /> is positioned over an XML element that can be read.</summary>
      <returns>true if the reader is positioned over the starting element; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML stream or document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.IO.Stream)">
      <summary>Reads the XML stream or document with a <see cref="T:System.IO.Stream" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="stream">A <see cref="T:System.IO.Stream" /> used to read the XML stream or document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>When implemented in a derived class, reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML document.</param>
      <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; otherwise, false to skip the verification.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML stream or document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object. It also enables you to specify whether the serializer can read the data before attempting to read it.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML document or stream.</param>
      <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; false to skip the verification.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the end of the object data as a closing XML element to the XML document or stream with an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document or stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>Writes the end of the object data as a closing XML element to the XML document or stream with an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the data to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the content to the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes only the content of the object to the XML document or stream using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>Writes only the content of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the start of the object's data as an opening XML element using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document.</param>
      <param name="graph">The object to serialize.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the start of the object's data as an opening XML element using the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document.</param>
      <param name="graph">The object to serialize.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="T:System.Xml.IStreamProvider">
      <summary>An interface that can be implemented by classes providing streams.</summary>
    </member>
    <member name="M:System.Xml.IStreamProvider.GetStream">
      <summary>Gets a stream.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" />.</returns>
    </member>
    <member name="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)">
      <summary>Releases a stream to output.</summary>
      <param name="stream">The stream being released.</param>
    </member>
    <member name="T:System.Xml.IXmlDictionary">
      <summary>An interface that defines the contract that an XML dictionary must implement to be used by <see cref="T:System.Xml.XmlDictionaryReader" /> and <see cref="T:System.Xml.XmlDictionaryWriter" /> implementations.</summary>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>Attempts to look up an entry in the dictionary.</summary>
      <returns>true if <paramref name="key" /> is in the dictionary; otherwise, false.</returns>
      <param name="key">The key to check for.</param>
      <param name="result">If <paramref name="key" /> is found in the <see cref="T:System.Xml.IXmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified string value.</summary>
      <returns>true if <paramref name="value" /> is in the dictionary; otherwise, false.</returns>
      <param name="value">The string to check for.</param>
      <param name="result">If <paramref name="value" /> is found in the <see cref="T:System.Xml.IXmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>true if <see cref="T:System.Xml.XmlDictionaryString" /> is in the dictionary; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Xml.XmlDictionaryString" /> being checked for.</param>
      <param name="result">If <paramref name="value" /> is found in the <see cref="T:System.Xml.IXmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
    </member>
    <member name="T:System.Xml.UniqueId">
      <summary>Represents a unique identifier optimized for GUIDs.</summary>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Xml.UniqueId" /> class with a new, unique GUID.</summary>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Byte[])">
      <summary>Creates a new instance of the <see cref="T:System.Xml.UniqueId" /> class using a byte array that represents a <see cref="T:System.Guid" />.</summary>
      <param name="guid">A byte array that represents a <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid" /> provides less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Byte[],System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Xml.UniqueId" /> class that starts from an offset within a byte array that represents a <see cref="T:System.Guid" />.</summary>
      <param name="guid">A byte array that represents a <see cref="T:System.Guid" />.</param>
      <param name="offset">Offset position within the byte array that represents a <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the length of the array.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid" /> and <paramref name="offset" /> provide less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>Creates a new instance of this class starting from an offset within a char using a specified number of entries.</summary>
      <param name="chars">A char array that represents a <see cref="T:System.Guid" />.</param>
      <param name="offset">Offset position within the char array that represents a <see cref="T:System.Guid" />.</param>
      <param name="count">Number of array entries to use, starting from <paramref name="offset" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> less than zero or greater than the length of the array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> less than zero or greater than the length of the array minus <paramref name="offset" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="count" /> equals zero.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Xml.UniqueId" /> class using a <see cref="T:System.Guid" />.</summary>
      <param name="guid">A <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> is null.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Xml.UniqueId" /> class using a string.</summary>
      <param name="value">A string used to generate the <see cref="T:System.Xml.UniqueId" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.FormatException">Length of <paramref name="value" /> is zero.</exception>
    </member>
    <member name="P:System.Xml.UniqueId.CharArrayLength">
      <summary>Gets a value that indicates the length of the string representation of the <see cref="T:System.Xml.UniqueId" />.</summary>
      <returns>The length of the string representation of the <see cref="T:System.Xml.UniqueId" />.</returns>
    </member>
    <member name="M:System.Xml.UniqueId.Equals(System.Object)">
      <summary>Tests whether an object equals this <see cref="T:System.Xml.UniqueId" />.</summary>
      <returns>true if the object equals this <see cref="T:System.Xml.UniqueId" />; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Xml.UniqueId.GetHashCode">
      <summary>Creates a hash-code representation of this <see cref="T:System.Xml.UniqueId" />.</summary>
      <returns>An integer hash-code representation of this <see cref="T:System.Xml.UniqueId" />.</returns>
    </member>
    <member name="P:System.Xml.UniqueId.IsGuid">
      <summary>Gets a value that indicates whether the <see cref="T:System.Xml.UniqueId" /> is a <see cref="T:System.Guid" />.</summary>
      <returns>true if the <see cref="T:System.Xml.UniqueId" /> is a <see cref="T:System.Guid" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.UniqueId.op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Overrides the equality operator to test for equality of two <see cref="T:System.Xml.UniqueId" /> objects.</summary>
      <returns>true if the two <see cref="T:System.Xml.UniqueId" />s are equal or are both null; false if they are not equal or if only one of them is null.</returns>
      <param name="id1">The first <see cref="T:System.Xml.UniqueId" />.</param>
      <param name="id2">The second <see cref="T:System.Xml.UniqueId" />.</param>
    </member>
    <member name="M:System.Xml.UniqueId.op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Overrides the equality operator to test for inequality of two <see cref="T:System.Xml.UniqueId" />s.</summary>
      <returns>true if the overridden equality operator returns false; otherwise, false.</returns>
      <param name="id1">The first <see cref="T:System.Xml.UniqueId" />.</param>
      <param name="id2">The second <see cref="T:System.Xml.UniqueId" />.</param>
    </member>
    <member name="M:System.Xml.UniqueId.ToCharArray(System.Char[],System.Int32)">
      <summary>Puts the <see cref="T:System.Xml.UniqueId" /> value into a char array.</summary>
      <returns>Number of entries in the char array filled by the <see cref="T:System.Xml.UniqueId" /> value.</returns>
      <param name="chars">The char array.</param>
      <param name="offset">Position in the char array to start inserting the <see cref="T:System.Xml.UniqueId" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the length of the array.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid " /> and <paramref name=" offset" /> provide less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.ToString">
      <summary>Displays the <see cref="T:System.Xml.UniqueId" /> value in string format.</summary>
      <returns>The <see cref="T:System.Xml.UniqueId" /> value.</returns>
    </member>
    <member name="M:System.Xml.UniqueId.TryGetGuid(System.Byte[],System.Int32)">
      <summary>Tries to get the value of the <see cref="T:System.Xml.UniqueId" /> as a <see cref="T:System.Guid" /> and store it in the given byte array at the specified offset.</summary>
      <returns>true if the value stored in this instance of <see cref="T:System.Xml.UniqueId" /> is a <see cref="T:System.Guid" />; otherwise, false.</returns>
      <param name="buffer">byte array that will contain the <see cref="T:System.Guid" />.</param>
      <param name="offset">Position in the byte array to start inserting the <see cref="T:System.Guid" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> less than zero or greater than the length of the array.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> and <paramref name="offset" /> provide less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.TryGetGuid(System.Guid@)">
      <summary>Tries to get the value of the <see cref="T:System.Xml.UniqueId" /> as a <see cref="T:System.Guid" />.</summary>
      <returns>true if the <see cref="T:System.Xml.UniqueId" /> represents a <see cref="T:System.Guid" />; otherwise, false.</returns>
      <param name="guid">The <see cref="T:System.Guid" /> if successful; otherwise, <see cref="F:System.Guid.Empty" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> and <paramref name="offset" /> provide less than 16 valid bytes.</exception>
    </member>
    <member name="T:System.Xml.XmlBinaryReaderSession">
      <summary>Enables optimized strings to be managed in a dynamic way.</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Xml.XmlBinaryReaderSession" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.Add(System.Int32,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryString" /> from the input parameters and adds it to an internal collection.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryString" />.</returns>
      <param name="id">The key value.</param>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">An entry with key = <paramref name="id" /> already exists.</exception>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.Clear">
      <summary>Clears the internal collection of all contents.</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>Checks whether the internal collection contains an entry with a specified key.</summary>
      <returns>true if an entry that matches the <paramref name="key" /> was found; otherwise, false.</returns>
      <param name="key">The key to match.</param>
      <param name="result">The <see cref="T:System.Xml.XmlDictionaryString" />, if found; otherwise, null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>Checks whether the internal collection contains an entry with a specified string value.</summary>
      <returns>true if an entry that matches the <paramref name="value" /> was found; otherwise, false.</returns>
      <param name="value">The string value to match.</param>
      <param name="result">The <see cref="T:System.Xml.XmlDictionaryString" />, if found; otherwise, null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>Checks whether the internal collection contains a specified entry.</summary>
      <returns>true if an entry that matches the <paramref name="value" /> was found; otherwise, false.</returns>
      <param name="value">The value to match.</param>
      <param name="result">The <see cref="T:System.Xml.XmlDictionaryString" />, if found; otherwise, null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:System.Xml.XmlBinaryWriterSession">
      <summary>Enables using a dynamic dictionary to compress common strings that appear in a message and maintain state.</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Xml.XmlBinaryWriterSession" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.Reset">
      <summary>Clears out the internal collections.</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.TryAdd(System.Xml.XmlDictionaryString,System.Int32@)">
      <summary>Tries to add an <see cref="T:Sytem.Xml.XmlDictionaryString" /> to the internal collection.</summary>
      <returns>true, unless an exception was thrown.</returns>
      <param name="value">The <see cref="T:Sytem.Xml.XmlDictionaryString" /> to add.</param>
      <param name="key">The key of the <see cref="T:Sytem.Xml.XmlDictionaryString" /> that was successfully added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">An entry with key = <paramref name="key" /> already exists.</exception>
    </member>
    <member name="T:System.Xml.XmlDictionary">
      <summary>Implements a dictionary used to optimize Silverlight version 4's XML reader/writer implementations.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionary.#ctor">
      <summary>Creates an empty <see cref="T:System.Xml.XmlDictionary" />.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionary.#ctor(System.Int32)">
      <summary>Creates a <see cref="T:System.Xml.XmlDictionary" /> with an initial capacity.</summary>
      <param name="capacity">The initial size of the dictionary.</param>
    </member>
    <member name="M:System.Xml.XmlDictionary.Add(System.String)">
      <summary>Adds a string to the <see cref="T:System.Xml.XmlDictionary" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlDictionaryString" /> that was added.</returns>
      <param name="value">String to add to the dictionary.</param>
    </member>
    <member name="P:System.Xml.XmlDictionary.Empty">
      <summary>Gets a static empty <see cref="T:System.Xml.IXmlDictionary" />.</summary>
      <returns>A static empty <see cref="T:System.Xml.IXmlDictionary" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>Attempts to look up an entry in the dictionary.</summary>
      <returns>true if key is in the XML dictionary; otherwise, false.</returns>
      <param name="key">Key to look up.</param>
      <param name="result">If <paramref name="key" /> is in the <see cref="T:System.Xml.XmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified string value.</summary>
      <returns>true if value is in the <see cref="T:System.Xml.XmlDictionary" />; otherwise, false.</returns>
      <param name="value">String value being checked for.</param>
      <param name="result">If <paramref name="value" /> is in the <see cref="T:System.Xml.XmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>true if <see cref="T:System.Xml.XmlDictionaryString" /> is in the dictionary; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Xml.XmlDictionaryString" /> being checked for.</param>
      <param name="result">If <paramref name="value" /> is in the <see cref="T:System.Xml.XmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:System.Xml.XmlDictionaryReader">
      <summary>An abstractSilverlight class that provides some additional serialization and deserialization functionality to <see cref="T:System.Xml.XmlReader" />.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.#ctor">
      <summary>When implemented by a non-abstract class derived from this base class, creates a new instance of that derived class.</summary>
    </member>
    <member name="P:System.Xml.XmlDictionaryReader.CanCanonicalize">
      <summary>This property always returns false. Its derived classes can override to return true if they support canonicalization.</summary>
      <returns>Returns false.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero or greater than the buffer length minus the offset.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of the <see cref="T:System.Xml.XmlDictionaryReader" /> class.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <param name="session">The instance of <see cref="T:System.Xml.XmlBinaryReaderSession" /> used by the reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero or greater than the buffer length minus the offset.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero or greater than the buffer length minus the offset.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="quotas" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <param name="session">The instance of <see cref="T:System.Xml.XmlBinaryReaderSession" /> used by the reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> from an existing <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="reader">An instance of <see cref="T:System.Xml.XmlReader" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="quotas">The quotas applied to the reader.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="quotas">The quotas applied to the reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="quotas">The quotas applied to the reader.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.EndCanonicalization">
      <summary>This method is not supported on this base class and can be implemented on a derived class.</summary>
      <exception cref="T:System.NotSupportedException">This method is not supported on this base class.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>When overridden in a derived class, gets the value of an attribute.</summary>
      <returns>The value of the attribute.</returns>
      <param name="localName">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the local name of the attribute.</param>
      <param name="namespaceUri">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the namespace of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[],System.String)">
      <summary>Gets the index of the local name of the current node within an array of names.</summary>
      <returns>The index of the local name of the current node within an array of names.</returns>
      <param name="localNames">The string array of local names to be searched.</param>
      <param name="namespaceUri">The namespace of the current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localNames" /> or any of the names in the array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)">
      <summary>Gets the index of the local name of the current node within an array of names.</summary>
      <returns>The index of the local name of the current node within an array of names.</returns>
      <param name="localNames">The <see cref="T:System.Xml.XmlDictionaryString" /> array of local names to be searched.</param>
      <param name="namespaceUri">The namespace of the current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localNames" /> or any of the names in the array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.String)">
      <summary>Checks whether the parameter, <paramref name="localName" />, is the local name of the current node.</summary>
      <returns>true if <paramref name="localName" /> matches the local name of the current node; otherwise, false.</returns>
      <param name="localName">The local name of the current node.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)">
      <summary>Checks whether the parameter, <paramref name="localName" />, is the local name of the current node.</summary>
      <returns>true if <paramref name="localName" /> matches the local name of the current node; otherwise, false.</returns>
      <param name="localName">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the local name of the current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)">
      <summary>Checks whether the parameter, <paramref name="namespaceUri" />, is the namespace of the current node.</summary>
      <returns>true if <paramref name="namespaceUri" /> matches the namespace of the current node; otherwise, false.</returns>
      <param name="namespaceUri">The namespace of the current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)">
      <summary>Checks whether the parameter, <paramref name="namespaceUri" />, is the namespace of the current node.</summary>
      <returns>true if <paramref name="namespaceUri" /> matches the namespace of the current node; otherwise, false.</returns>
      <param name="namespaceUri">The namespace of current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsStartArray(System.Type@)">
      <summary>Checks whether the reader is positioned at the start of an array. This class returns false, but derived classes that have the concept of arrays might return true.</summary>
      <returns>true if the reader is positioned at the start of an array node; otherwise, false.</returns>
      <param name="type">Type of the node, if a valid node; otherwise, null.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Tests whether the first element is a start element or empty element and whether the local name and namespace URI match those of the current node.</summary>
      <returns>true if the first element in the array is a start element or empty element and matches <paramref name="localName" /> and <paramref name="namespaceUri" />; otherwise, false.</returns>
      <param name="localName">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the local name of the attribute.</param>
      <param name="namespaceUri">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the namespace of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsTextNode(System.Xml.XmlNodeType)">
      <summary>Tests whether the current node is a text node.</summary>
      <returns>true if the node type is <see cref="F:System.Xml.XmlNodetype.Text" />, <see cref="F:System.Xml.XmlNodetype.Whitespace" />, <see cref="F:System.Xml.XmlNodetype.SignificantWhitespace" />, <see cref="F:System.Xml.XmlNodetype.CDATA" />, or <see cref="F:System.Xml.XmlNodetype.Attribute" />; otherwise, false.</returns>
      <param name="nodeType">Type of the node being tested.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement">
      <summary>Tests whether the current content node is a start element.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)">
      <summary>Tests whether the current content node is a start element and if the <see cref="P:System.Xml.XmlReader.Name" /> property of the element matches the given argument.</summary>
      <param name="name">The <see cref="P:System.Xml.XmlReader.Name" /> property of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String,System.String)">
      <summary>Tests whether the current content node is a start element and whether the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element match the given arguments.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Tests whether the current content node is a start element and whether the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element match the given argument.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="P:System.Xml.XmlDictionaryReader.Quotas">
      <summary>Gets the quota values that apply to the current instance of this reader class.</summary>
      <returns>Returns <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The local name of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.DateTime" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Decimal" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Double" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Guid" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of short integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of long integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of float numbers into a typed array.</summary>
      <returns>The number of float numbers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the float numbers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of float numbers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.TimeSpan" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.DateTime" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Decimal" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Double" /> nodes type into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Guid" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of short integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of long integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of float numbers into a typed array.</summary>
      <returns>The number of float numbers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the float numbers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of float numbers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.TimeSpan" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String,System.String)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>A <see cref="T:System.Boolean" /> array of the <see cref="T:System.Boolean" /> nodes.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>A <see cref="T:System.Boolean" /> array of the <see cref="T:System.Boolean" /> nodes.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Converts a node's content to a specified type.</summary>
      <returns>The concatenated text content or attribute value converted to the requested type.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the value to be returned.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName" /> object to an xs:string. This value can be a null reference.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBase64">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>A <see cref="T:System.Byte" /> array that contains the Base64 decoded binary bytes.</returns>
      <exception cref="T:System.Xml.XmlException">The array size is greater than the MaxArrayLength quota for this reader.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>A byte array that contains the BinHex decoded binary bytes.</returns>
      <exception cref="T:System.Xml.XmlException">The array size is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex(System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>A byte array that contains the BinHex decoded binary bytes.</returns>
      <param name="maxByteArrayContentLength">The maximum array length.</param>
      <exception cref="T:System.Xml.XmlException">The array size is greater than <paramref name="maxByteArrayContentLength" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[],System.Int32,System.Int32)">
      <summary>Reads the content into a char array.</summary>
      <returns>Number of characters read.</returns>
      <param name="chars">The array into which the characters are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of characters to put in the array.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsDecimal">
      <summary>Converts a node's content to decimal.</summary>
      <returns>The decimal representation of the node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsFloat">
      <summary>Converts a node's content to float.</summary>
      <returns>The float representation of the node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsGuid">
      <summary>Converts a node's content to guid.</summary>
      <returns>The guid representation of the node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(System.String@,System.String@)">
      <summary>Converts a node's content to a qualified name representation.</summary>
      <param name="localName">The <see cref="P:System.Xml.XmlReader.LocalName" /> part of the qualified name (out parameter).</param>
      <param name="namespaceUri">The <see cref="P:System.Xml.XmlReader.NamespaceURI" /> part of the qualified name (out parameter).</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in a string representation.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Int32)">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in string representation.</returns>
      <param name="maxStringContentLength">The maximum string length.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[],System.Int32@)">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in a string representation.</returns>
      <param name="strings">The array of strings to match content against.</param>
      <param name="index">The index of the entry in <paramref name="strings" /> that matches the content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strings" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">An entry in <paramref name="strings" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in a string representation.</returns>
      <param name="strings">The array of <see cref="T:System.Xml.XmlDictionaryString" /> objects to match content against.</param>
      <param name="index">The index of the entry in <paramref name="strings" /> that matches the content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strings" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">An entry in <paramref name="strings" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan">
      <summary>Converts a node's content to <see cref="T:System.TimeSpan" />.</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> representation of node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsUniqueId">
      <summary>Converts a node's content to a unique identifier.</summary>
      <returns>The node's content represented as a unique identifier.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String,System.String)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.DateTime" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.DateTime" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String,System.String)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Decimal" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Decimal" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String,System.String)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Double" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Double" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBase64">
      <summary>Converts a node's content to a array of Base64 bytes.</summary>
      <returns>Returns <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex">
      <summary>Converts a node's content to an array of BinHex bytes.</summary>
      <returns>Returns <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean">
      <summary>Converts an element's content to a <see cref="T:System.Boolean" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDateTime">
      <summary>Converts an element's content to a <see cref="T:System.DateTime" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The element is not in valid format.</exception>
      <exception cref="T:System.FormatException">The element is not in valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal">
      <summary>Converts an element's content to a <see cref="T:System.Decimal" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDouble">
      <summary>Converts an element's content to a <see cref="T:System.Double" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsFloat">
      <summary>Converts an element's content to a floating point number (<see cref="T:System.Single" />).</summary>
      <returns>The node's content represented as a floating point number (<see cref="T:System.Single" />).</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsGuid">
      <summary>Converts an element's content to a <see cref="T:System.Guid" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Guid" />.</returns>
      <exception cref="T:System.ArgumentException">The element is not in valid format.</exception>
      <exception cref="T:System.FormatException">The element is not in valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsInt">
      <summary>Converts an element's content to an integer (<see cref="T:System.Int32" />).</summary>
      <returns>The node's content represented as an integer (<see cref="T:System.Int32" />).</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsLong">
      <summary>Converts an element's content to a long integer (<see cref="T:System.Int64" />).</summary>
      <returns>The node's content represented as a long integer (<see cref="T:System.Int64" />).</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsString">
      <summary>Converts an element's content to a <see cref="T:System.String" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan">
      <summary>Converts an element's content to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId">
      <summary>Converts an element's content to a unique identifier.</summary>
      <returns>The node's content represented as a unique identifier.</returns>
      <exception cref="T:System.ArgumentException">The element is not in valid format.</exception>
      <exception cref="T:System.FormatException">The element is not in valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement">
      <summary>Checks whether the current node is a start element and whether it is a nonempty element, and reads it if these conditions are satisfied, advancing the reader to the next node. Throws an exception if it is not a start element or if it is an empty element.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)">
      <summary>Checks whether the named node is a start element and whether it is a nonempty element, and reads it if these conditions are satisfied, advancing the reader to the next node. Throws an exception if it is not a start element or if it is an empty element.</summary>
      <param name="name">The qualified name of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String,System.String)">
      <summary>Checks whether the node with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> is a start element and whether it is a nonempty element, and reads it if these conditions are satisfied, advancing the reader to the next node. Throws an exception if it is not a start element or if it is an empty element.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Checks whether the node with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> is a start element and whether it is a nonempty element, and reads it if these conditions are satisfied, advancing the reader to the next node. Throws an exception if it is not a start element or if it is an empty element.</summary>
      <param name="localName">The local <see cref="T:System.Xml.XmlDictionaryString" /> name of the element.</param>
      <param name="namespaceUri">The <see cref="T:System.Xml.XmlDictionaryString" /> namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of <see cref="T:System.Guid" />.</summary>
      <returns>An array of <see cref="T:System.Guid" />.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of <see cref="T:System.Guid" />.</summary>
      <returns>An array of <see cref="T:System.Guid" />.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of short integers (<see cref="T:System.Int16" />).</summary>
      <returns>An array of short integers (<see cref="T:System.Int16" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of short integers (<see cref="T:System.Int16" />).</summary>
      <returns>An array of short integers (<see cref="T:System.Int16" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of integers (<see cref="T:System.Int32" />).</summary>
      <returns>An array of integers (<see cref="T:System.Int32" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of integers (<see cref="T:System.Int32" />).</summary>
      <returns>An array of integers (<see cref="T:System.Int32" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of long integers (<see cref="T:System.Int64" />).</summary>
      <returns>An array of long integers (<see cref="T:System.Int64" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of long integers (<see cref="T:System.Int64" />).</summary>
      <returns>An array of long integers (<see cref="T:System.Int64" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of float numbers (<see cref="T:System.Single" />).</summary>
      <returns>An array of float numbers (<see cref="T:System.Single" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of float numbers (<see cref="T:System.Single" />).</summary>
      <returns>An array of float numbers (<see cref="T:System.Single" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Checks whether the node with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> is a start element and advances the reader to the next node. Throws an exception if the node is not a start element.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into a <see cref="T:System.TimeSpan" /> array.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into a <see cref="T:System.TimeSpan" /> array.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>This method is not supported by this class.</summary>
      <returns>A <see cref="T:System.Int32" />. </returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <exception cref="T:System.NotSupportedException">Always.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary>This method is not supported in this class. It may be implemented in a derived class.</summary>
      <param name="stream">The stream to read from.</param>
      <param name="includeComments">Determines whether comments are included.</param>
      <param name="inclusivePrefixes">The prefixes to be included.</param>
      <exception cref="T:System.NotSupportedException">Always.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetArrayLength(System.Int32@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="count">Returns 0, unless overridden in a derived class.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(System.Int32@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="length">Returns 0, unless overridden in a derived class.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="localName">Returns null, unless overridden in a derived class.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="namespaceUri">Returns null, unless overridden in a derived class.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="value">Returns null, unless overridden in a derived class.</param>
    </member>
    <member name="T:System.Xml.XmlDictionaryReaderQuotas">
      <summary>Contains quota values for <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.Max">
      <summary>Gets an instance of this class with all properties set to maximum values.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> with properties set to <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength">
      <summary>Gets the maximum allowed array length.</summary>
      <returns>The maximum allowed array length. The default value is <see cref="F:System.Int32.MaxValue" />.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead">
      <summary>Gets the maximum allowed bytes returned for each read.</summary>
      <returns>The maximum allowed bytes returned for each read. The default is 4096.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxDepth">
      <summary>Gets the maximum nested node depth.</summary>
      <returns>The maximum nested node depth. The default is 32;</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount">
      <summary>Gets the maximum number of characters allowed in a table name.</summary>
      <returns>The maximum number of characters allowed in a table name. The default is 16384.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength">
      <summary>Gets the maximum string length returned by the reader.</summary>
      <returns>The maximum string length returned by the reader. The default is 8192.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="T:System.Xml.XmlDictionaryString">
      <summary>Represents an entry stored in a <see cref="T:System.Xml.XmlDictionary" />.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryString.#ctor(System.Xml.IXmlDictionary,System.String,System.Int32)">
      <summary>Creates an instance of the <see cref="T:System.Xml.XmlDictionaryString" /> class.</summary>
      <param name="dictionary">The <see cref="T:System.Xml.IXmlDictionary" /> that contains this instance.</param>
      <param name="value">The string that is the value of the dictionary entry.</param>
      <param name="key">The integer that is the key of the dictionary entry.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="key" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" /> / 4.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Dictionary">
      <summary>Represents the <see cref="T:System.Xml.IXmlDictionary" /> passed to the constructor of this instance of <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>The <see cref="T:System.Xml.IXmlDictionary" /> for this dictionary entry.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Empty">
      <summary>Gets an <see cref="T:System.Xml.XmlDictionaryString" /> that represents the empty string.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Key">
      <summary>Gets the integer key for this <see cref="T:System.Xml.XmlDictionaryString" /> dictionary entry.</summary>
      <returns>The integer key for this dictionary entry.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryString.ToString">
      <summary>Returns a text representation for this instance of <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>The string value for this instance of the class.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Value">
      <summary>Gets the string value for this <see cref="T:System.Xml.XmlDictionaryString" /> dictionary entry.</summary>
      <returns>The string value for this dictionary entry.</returns>
    </member>
    <member name="T:System.Xml.XmlDictionaryWriter">
      <summary>An abstract class that Silverlight version 4 derives from to do serialization and deserialization.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.#ctor">
      <summary>Creates an instance of this class. Invoked only by its derived classes because this class is abstract.</summary>
    </member>
    <member name="P:System.Xml.XmlDictionaryWriter.CanCanonicalize">
      <summary>This property always returns false. Its derived classes can override to return true if they support canonicalization.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes Silverlight binary XML format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes Silverlight binary XML format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use as the shared dictionary.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes Silverlight binary XML format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use as the shared dictionary.</param>
      <param name="session">The <see cref="T:System.Xml.XmlBinaryWriterSession" /> to use.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes Silverlight binary XML format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use as the shared dictionary.</param>
      <param name="session">The <see cref="T:System.Xml.XmlBinaryWriterSession" /> to use.</param>
      <param name="ownsStream">If true, stream is closed by the writer when done; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> from an existing <see cref="T:System.Xml.XmlWriter" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="writer">An instance of <see cref="T:System.Xml.XmlWriter" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes text XML. </summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes text XML.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding of the output.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes text XML.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding of the stream.</param>
      <param name="ownsStream">If true, stream is closed by the writer when done; otherwise false.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.EndCanonicalization">
      <summary>This method is not yet implemented. </summary>
      <exception cref="T:System.NotSupportedException">This method is not yet implemented.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary>This method is not yet implemented. Calling it throws a <see cref="T:System.NotSupportedException" />.</summary>
      <param name="stream">The stream to write to.</param>
      <param name="includeComments">Determines whether comments are included.</param>
      <param name="inclusivePrefixes">The prefixes to be included.</param>
      <exception cref="T:System.NotSupportedException">This method is not yet implemented.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
      <summary>Writes values from a <see cref="T:System.Boolean" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the data.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of values to write from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.DateTime" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Decimal" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Double" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Guid" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int16" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int32" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int64" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Single" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.TimeSpan" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Boolean" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.DateTime" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Decimal" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Double" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Guid" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int16" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int32" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int64" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Single" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.TimeSpan" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an attribute qualified name and value.</summary>
      <param name="prefix">The prefix of the attribute.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
      <param name="value">The attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an attribute qualified name and value.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
      <param name="value">The attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an element with a text content.</summary>
      <param name="prefix">The prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="value">The element content.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an element with a text content.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="value">The element content.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Writes the current XML node from an <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" />.</param>
      <param name="defattr">If true, copy the default attributes from the XmlReader; otherwise if true, use default attributes; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>Writes the current XML node from an <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" />.</param>
      <param name="defattr">If true, copy the default attributes from the <see cref="T:System.Xml.XmlReader" />; otherwise, false. If true, use default attributes; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
      <param name="localName">The local name of the qualified name.</param>
      <param name="namespaceUri">The namespace URI of the qualified name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the start of an attribute with the specified prefix, local name, and namespace URI.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the start of an attribute with the specified local name and namespace URI.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the specified start element and associates it with the given namespace and prefix.</summary>
      <param name="prefix">The prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the specified start element and associates it with the given namespace.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)">
      <summary>Writes the given text content.</summary>
      <param name="value">The text to write.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteTextNode(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Writes the text node that an <see cref="T:System.Xml.XmlDictionaryReader" /> is currently positioned on.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> to get the text value from.</param>
      <param name="isAttribute">Specifies whether the reader is positioned on an attribute value or element content.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)">
      <summary>Writes a <see cref="T:System.Guid" /> value.</summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.TimeSpan)">
      <summary>Writes a <see cref="T:System.TimeSpan" /> value.</summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.IStreamProvider)">
      <summary>Writes a value from an <see cref="T:System.Xml.IStreamProvider" />.</summary>
      <param name="value">The <see cref="T:System.Xml.IStreamProvider" /> for the stream that contains the values to be written.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)">
      <summary>Writes a unique ID value.</summary>
      <param name="value">The unique ID value to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)">
      <summary>Writes a <see cref="T:System.Xml.XmlDictionaryString" /> value.</summary>
      <param name="value">The <see cref="T:System.Xml.XmlDictionaryString" /> value.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)">
      <summary>Writes a standard XML attribute in the current node.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="value">The value of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes an XML attribute in the current node.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="value">The value of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
      <summary>Writes a namespace declaration attribute.</summary>
      <param name="prefix">The prefix that is bound to the given namespace.</param>
      <param name="namespaceUri">The namespace to which the prefix is bound.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)">
      <summary>Writes a namespace declaration attribute.</summary>
      <param name="prefix">The prefix that is bound to the given namespace.</param>
      <param name="namespaceUri">The namespace to which the prefix is bound.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReaderQuotas.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> class </summary>
    </member>
  </members>
</doc>