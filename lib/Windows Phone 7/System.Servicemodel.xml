<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) Microsoft Corporation.  All rights reserved.
-->
<doc>
  <assembly>
    <name>System.ServiceModel</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Generic.KeyedByTypeCollection`1">
      <summary>Provides a collection whose items are types that serve as keys.</summary>
      <typeparam name="TItem">The item types contained in the collection that also serve as the keys for the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> class. </summary>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Find``1">
      <summary>Returns the first item in the collection of a specified type.</summary>
      <returns>The object of type <paramref name="T" /> if it is a reference type and the value of type <paramref name="T" /> if it is a value type. The default value of the type is returned if no object of type <paramref name="T" /> is contained in the collection; null if it is a reference type and 0 if it is a value type.</returns>
      <typeparam name="T">The type of item in the collection to find.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1">
      <summary>Returns a collection of objects of type <paramref name="T" /> that are contained in the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <paramref name="T" /> that contains the objects of type <paramref name="T" /> from the original collection.</returns>
      <typeparam name="T">The type of item in the collection to find.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)">
      <summary>Gets the type of an item contained in the collection.</summary>
      <returns>The type of the specified <paramref name="item" /> in the collection.</returns>
      <param name="item">The item in the collection whose type is to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the collection at a specific location.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Remove``1">
      <summary>Removes an object of a specified type from the collection.</summary>
      <returns>The object removed from the collection.</returns>
      <typeparam name="T">The type of item in the collection to remove.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1">
      <summary>Removes all of the elements of a specified type from the collection.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> that contains the objects of type <paramref name="T" /> from the original collection.</returns>
      <typeparam name="T">The type of item in the collection to remove.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the item at the specified index with a new object.</summary>
      <param name="index">The zero-based index of the <paramref name="item" /> to be replaced.</param>
      <param name="item">The object to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1">
      <summary>Provides a thread-safe, read-only collection that contains objects of a type specified by the generic parameter as elements.</summary>
      <typeparam name="T">The type of object contained as items in the thread-safe, read-only collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" /> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe, read-only collection.</summary>
      <param name="syncRoot">The object used to synchronize access to the thread-safe, read-only collection.</param>
      <param name="list">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of elements used to initialize the thread-safe, read-only collection.</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)">
      <summary>Determines whether the collection contains an element with a specific value.</summary>
      <returns>true if the element <paramref name="value" /> is found in the collection; otherwise, false.</returns>
      <param name="value">The object to locate in the collection.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an object of the type contained in the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the collection to a specified array, starting at a particular index.</summary>
      <param name="array">The <see cref="T:System.Array" /> that is the destination for the elements copied from the collection.</param>
      <param name="index">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count">
      <summary>Gets the number of elements contained in the thread-safe, read-only collection.</summary>
      <returns>The number of elements contained in the thread-safe, read-only collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the synchronized, read-only collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for objects of the type stored in the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)">
      <summary>Returns the index of the first occurrence of a value in the collection.</summary>
      <returns>The zero-based index of the first occurrence of the <paramref name="value" /> in the collection.</returns>
      <param name="value">The element whose index is being retrieved.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)">
      <summary>Gets an element from the thread-safe, read-only collection with a specified index.</summary>
      <returns>The element from read-only collection with the specified index.</returns>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items">
      <summary>Gets the list of elements contained in the thread-safe, read-only collection.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IList`1" /> of elements that are contained in the thread-safe, read-only collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="value">The element to be added to the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be added to a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <exception cref="T:System.NotSupportedException">Items cannot be cleared from a read-only collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Returns true.</summary>
      <returns>true.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The method returns false to indicate that the item was not removed from the read-only collection.</returns>
      <param name="value">The value to be removed from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> is to be inserted.</param>
      <param name="value">The object to insert into the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be inserted into a read-only collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Gets the element at the specified index.</summary>
      <returns>The element of type <paramref name="T" /> at the specified index.</returns>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be set in a read only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to a specified array, starting at a specified index.</summary>
      <param name="array">The <see cref="T:System.Array" /> that is the destination for the elements copied from the collection.</param>
      <param name="index">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the synchronized, read-only collection.</summary>
      <returns>The <see cref="T:System.Collections.IEnumerator" />  that iterates through the synchronized, read-only collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Throws a <see cref="T:System.NotSupportedException" />.</summary>
      <returns>The <see cref="T:System.NotSupportedException" />.</returns>
      <param name="value">The element to be added to the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be added to a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Items cannot be cleared from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the collection contains an element with a specific value.</summary>
      <returns>Returns true if the element <paramref name="value" /> is found in the collection; otherwise, false.</returns>
      <param name="value">The object to locate in the collection.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an object of the type contained in the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the collection.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The element whose index is being retrieved.</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> is to be inserted.</param>
      <param name="value">The object to insert into the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be inserted into a read-only collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the collection has a fixed size.</summary>
      <returns>true</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets the element at the specified index and throws an exception if an element is set.</summary>
      <returns>The object at the specified location in the collection.</returns>
      <param name="index">The zero-based index of the element in the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be set in a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="T:System.ServiceModel.ActionNotSupportedException">
      <summary>This exception is thrown on the client when the action related to the invoked operation does not match the action of any operation available in the service.</summary>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ActionNotSupportedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ActionNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown. </param>
    </member>
    <member name="T:System.ServiceModel.BasicHttpBinding">
      <summary>Represents a binding that a Silverlight version 4 client can use to configure endpoints that can communicate with ASMX-based Web services and other services that conform to the WS-I Basic Profile 1.1.</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class with a specified type of security used by the binding.</summary>
      <param name="securityMode">The value of <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> that specifies the type of security that is used with the SOAP message and for the client.</param>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements">
      <summary>Returns an ordered collection of binding elements contained in the current binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements described by the <see cref="T:System.ServiceModel.BasicHttpBinding" />.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.EnableHttpCookieContainer">
      <summary>Gets or sets a value that indicates whether the <see cref="T:P:System.ServiceModel.BasicHttpBinding" /> will include the <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" />.</summary>
      <returns>true if the binding contains the <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" />; false if it does not.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.EnvelopeVersion">
      <summary>Gets the version of SOAP that is used for messages that are processed by this binding.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.EnvelopeVersion" /> that is used with this binding. The value is always SOAP 1.1.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MaxBufferSize">
      <summary>Gets or sets the maximum size for a buffer that receives messages from the channel.</summary>
      <returns>The maximum size, in bytes, of a buffer that stores messages while they are processed for an endpoint configured with this binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for a message that can be received on a channel configured with this binding.</summary>
      <returns>The maximum size, in bytes, for a message that is processed by the binding. The default value is 65,536 bytes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero.</exception>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Scheme">
      <summary>Gets the URI transport scheme for the channels and listeners that are configured with this binding.</summary>
      <returns>"https" if the security mode in the transport binding element is set to <see cref="F:System.ServiceModel.BasicHttpSecurityMode.Transport" /> or <see cref="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredentials" />; otherwise, "http".</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Security">
      <summary>Gets the type of security used with this binding. </summary>
      <returns>The <see cref="T:System.ServiceModel.BasicHttpSecurity" /> that is used with this binding. The default value is <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />. </returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.TextEncoding">
      <summary>Gets or sets the character encoding that is used for the message text.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> that indicates the character encoding that is used. The default is <see cref="T:System.Text.UTF8Encoding" />.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.TransferMode">
      <summary>Gets or sets a value that indicates whether messages are sent buffered or streamed.</summary>
      <returns>The <see cref="T:System.ServiceModel.TransferMode" /> that indicates whether messages are sent buffered or streamed.</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpMessageCredentialType">
      <summary>Enumerates credential types that the client can authenticate with when security is enabled in the BasicHttpBinding binding.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpMessageCredentialType.UserName">
      <summary>Indicates that the client be authenticated using a username credential.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpMessageCredentialType.Certificate">
      <summary>Present only in Silverlight for Windows Phone, but not supported.</summary>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurity">
      <summary>Specifies the security used for a Silverlight client configured with a <see cref="T:System.ServiceModel.BasicHttpBinding" />.</summary>
    </member>
    <member name="P:System.ServiceModel.BasicHttpSecurity.Mode">
      <summary>Gets or sets the mode of security for a client configured with a <see cref="T:System.ServiceModel.BasicHttpBinding" />.</summary>
      <returns>A value in the <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> enumeration. The default value for this property is <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is not a legal value for <see cref="T:System.ServiceModel.BasicHttpSecurityMode" />.</exception>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurityMode">
      <summary>Specifies the types of security that can be used with the system-provided <see cref="T:System.ServiceModel.BasicHttpBinding" /> binding.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.None">
      <summary>The SOAP message is not secured during transfer. This is the default behavior.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.Transport">
      <summary>Security is provided using HTTPS. The service must be configured with SSL certificates. The SOAP message is protected as a whole using HTTPS. The service is authenticated by the client using the service’s SSL certificate.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential">
      <summary>This mode provides integrity, confidentiality, and server authentication using HTTPS. The service must be configured with a certificate. Client authentication is provided by SOAP message security.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly">
      <summary>This mode provides only HTTP-based client authentication. It does not provide message integrity or confidentiality.</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory">
      <summary>Creates and manages the channels that are used by clients to send messages to service endpoints.</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)">
      <summary>Initializes the channel factory with the behaviors provided by a specified configuration file and with those in the service endpoint of the channel factory.</summary>
      <param name="configurationName">The name of the configuration file.</param>
      <exception cref="T:System.InvalidOperationException">The service endpoint of the channel factory is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateDescription">
      <summary>When implemented in a derived class, creates a description of the service endpoint associated with the channel factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> associated with the channel factory.</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateFactory">
      <summary>Builds the channel factory for the current endpoint of the factory.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory" /> for the endpoint of the current factory.</returns>
      <exception cref="T:System.InvalidOperationException">The endpoint of the service that the factory channels connect to is null, or the endpoint's binding is null or is missing the element with the configuration name specified.</exception>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Credentials">
      <summary>Gets the credentials used by clients to communicate a service endpoint over the channels produced by the factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ClientCredentials" /> used by clients if they are configured for the factory or if the endpoint is not a null reference and is in either the <see cref="F:System.ServiceModel.CommunicationState.Created" />or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> communication state; otherwise, null.</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout">
      <summary>Gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout">
      <summary>Gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Endpoint">
      <summary>Gets the service endpoint to which the channels produced by the factory connect.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to which the channels produced by the factory connect.</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.EnsureOpened">
      <summary>Opens the current channel factory if it is not yet opened.</summary>
      <exception cref="T:System.ObjectDisposedException">The current factory is either closing or closed and so cannot be opened.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.GetProperty``1">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack, or null if not present.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present, or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes the service endpoint of the channel factory with a specified binding and address.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> with which to initialize the endpoint for the channel factory.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> with which to initialize the endpoint for the channel factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Initializes the service endpoint of the channel factory with a specified service endpoint.</summary>
      <param name="endpoint">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to initialize the channel factory.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoint" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes the service endpoint of the channel factory with a specified address and configuration.</summary>
      <param name="configurationName">The name of the configuration file with which to initialize the channel factory.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> with which to initialize endpoints for the channel factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnAbort">
      <summary>Terminates the inner channel factory of the current channel factory.</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous close operation on the inner channel factory of the current channel factory that has a state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous open operation on the inner channel factory of the current channel factory that has a state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)">
      <summary>Calls close on the inner channel factory with a specified time-out for the completion of the operation.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the operation has to complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous close operation on the inner channel factory of the current channel factory. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous open operation on the inner channel factory of the current channel factory. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)">
      <summary>Calls open on the inner channel factory of the current channel factory with a specified time-out for the completion of the operation.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</param>
      <exception cref="T:System.InvalidOperationException">The inner channel of the current channel is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpened">
      <summary>Initializes a read-only copy of the <see cref="T:System.ServiceModel.Description.ClientCredentials" /> object for the channel factory.</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpening">
      <summary>Builds the inner channel factory for the current channel.</summary>
      <exception cref="T:System.InvalidOperationException">The inner channel factory for the channel factory is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose">
      <summary>Closes the current channel factory.</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory`1">
      <summary>A factory that creates channels of different types that are used by clients to send messages to variously configured service endpoints.</summary>
      <typeparam name="TChannel">The type of channel produced by the channel factory. This type must be either <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> or <see cref="T:System.ServiceModel.Channels.IRequestChannel" />.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class with a specified endpoint address and binding configuration.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> used to configure the channels created by the factory.</param>
      <param name="remoteAddress">The destination <see cref="T:System.ServiceModel.EndpointAddress" /> for channels created by the factory.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="binding" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class and configures the endpoint.</summary>
      <param name="endpointConfigurationName">The name of the file that contains the service endpoint configuration for the channels created by the factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class with a specified endpoint address and endpoint configuration.</summary>
      <param name="endpointConfigurationName">The name of the file that contains the service endpoint configuration for the channels created by the factory.</param>
      <param name="remoteAddress">The destination <see cref="T:System.ServiceModel.EndpointAddress" /> for channels created by the factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class.</summary>
      <param name="channelType">An interface that identifies the type of channel produced by the factory.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelType" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="channelType" /> is not an interface.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel">
      <summary>Creates a channel that is used to send messages to a service.</summary>
      <returns>The <paramref name="TChannel" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> created by the factory.</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>Creates a channel that is used to send messages to a service at a specific endpoint address.</summary>
      <returns>The <paramref name="TChannel" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> created by the factory.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a channel that is used to send messages to a service at a specific endpoint address through a specified transport address.</summary>
      <returns>The <paramref name="TChannel" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> created by the factory.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which the channel sends messages.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.ServiceModel.ChannelFactory" /> has duplex operations it does not support.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateDescription">
      <summary>Creates a description of the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> of the service.</returns>
      <exception cref="T:System.InvalidOperationException">The callback contract is null, but the service endpoint requires one that is not null (Nothing).</exception>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1">
      <summary>Provides the base implementation used to create Silverlight version 4 client objects (proxies) that can call services.</summary>
      <typeparam name="TChannel">The channel used to connect to the service that identifies the type of service contract encapsulated by this proxy.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using the default target endpoint from the application configuration file. </summary>
      <exception cref="T:System.InvalidOperationException">Either there is no default endpoint information in the configuration file, more than one endpoint in the file, or no configuration file.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using a specified binding and target address. </summary>
      <param name="binding">The binding used to configure the way that calls are made to the service.</param>
      <param name="remoteAddress">The address of the service endpoint.</param>
      <exception cref="T:System.ArgumentNullException">The binding is null.</exception>
      <exception cref="T:System.ArgumentNullException">The remote address is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using the configuration information specified in the application configuration file by <paramref name="endpointConfigurationName" />. </summary>
      <param name="endpointConfigurationName">The name of the endpoint in the application configuration file.</param>
      <exception cref="T:System.ArgumentNullException">The specified endpoint information is null.</exception>
      <exception cref="T:System.InvalidOperationException">The endpoint cannot be found or the endpoint contract is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using the specified target address and endpoint information. </summary>
      <param name="endpointConfigurationName">The name of the endpoint in the application configuration file.</param>
      <param name="remoteAddress">The address of the service.</param>
      <exception cref="T:System.ArgumentNullException">The endpoint is null.</exception>
      <exception cref="T:System.ArgumentNullException">The remote address is null.</exception>
      <exception cref="T:System.InvalidOperationException">The endpoint cannot be found or the endpoint contract is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class.</summary>
      <param name="endpointConfigurationName">The name of the endpoint in the application configuration file.</param>
      <param name="remoteAddress">The address of the service.</param>
      <exception cref="T:System.ArgumentNullException">The endpoint is null.</exception>
      <exception cref="T:System.ArgumentNullException">The remote address is null.</exception>
      <exception cref="T:System.InvalidOperationException">The endpoint cannot be found or the endpoint contract is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.Abort">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition immediately from its current state into the closed state.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Channel">
      <summary>Gets the inner channel used to communicate with the service.</summary>
      <returns>An implementation of the target service contract interface passed as the type parameter to the constructor.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelFactory">
      <summary>Gets the underlying <see cref="T:System.ServiceModel.ChannelFactory`1" /> object.</summary>
      <returns>A <see cref="T:System.ServiceModel.ChannelFactory`1" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ClientCredentials">
      <summary>Gets the client credentials used to call an operation.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.ClientCredentials" /> object that represents the proof of identity presented by the client.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.CreateChannel">
      <summary>Returns a new channel from the client to the service.</summary>
      <returns>A channel of type <paramref name="TChannel" /> that identifies the type of service contract encapsulated by this client object (proxy).</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Endpoint">
      <summary>Gets the target endpoint for the service to which the Silverlight version 4 client can connect.</summary>
      <returns>The target <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> object.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1">
      <summary>Replicates the behavior of the default keyword in C#.</summary>
      <returns>Returns null if T is a reference type and zero if T is a numeric value type.</returns>
      <typeparam name="T">A C# type.</typeparam>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InnerChannel">
      <summary>Gets the underlying <see cref="T:System.ServiceModel.IClientChannel" /> implementation.</summary>
      <returns>The client channel for the Silverlight version 4 client object.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)">
      <summary>Provides support for implementing the event-based asynchronous pattern. 
    For more information about 
   this pattern, see Event-based Asynchronous Pattern Overview.</summary>
      <param name="beginOperationDelegate">A delegate that is used for calling the asynchronous operation.</param>
      <param name="inValues">The input values to the asynchronous call.</param>
      <param name="endOperationDelegate">A delegate that is used to end the asynchronous call after it has completed.</param>
      <param name="operationCompletedCallback">A client-supplied callback that is invoked when the asynchronous method is complete. The callback is passed to the <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />.</param>
      <param name="userState">The <paramref name="userState" /> object to associate with the asynchronous call.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.State">
      <summary>Gets the current state of the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close the <see cref="T:System.ServiceModel.ClientBase`1" />.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="callback">The method that receives the callback on completion.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close the <see cref="T:System.ServiceModel.ClientBase`1" /> with a specified time-out.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous begin close operation.</returns>
      <param name="timeout">The period within which the call must complete.</param>
      <param name="callback">The callback object invoked when the operation completes.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The method that receives the callback on completion.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open the <see cref="T:System.ServiceModel.ClientBase`1" /> object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation.</returns>
      <param name="timeout">The time within which the call must complete.</param>
      <param name="callback">The method that receives the callback on completion.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from its current state into the closed state.</summary>
      <param name="timeout">The time within which the call must complete.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object has transitioned from its current state to the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object transitions from its current state to the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> used to complete the asynchronous close operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> used to complete the asynchronous end open operation.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>The event handler that is invoked when a fault occurs while performing an operation on the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from the created state into the opened state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The time period within which the call must complete.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object has transitioned from the created state to the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object transitions from the created state to the opened state.</summary>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate">
      <summary>A delegate that is used by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> for calling asynchronous operations on the client. </summary>
      <returns>The result of the asynchronous call.</returns>
      <param name="inValues">The input values to the asynchronous call.</param>
      <param name="asyncCallback">Reference to the method to be called when the corresponding asynchronous operation completes.</param>
      <param name="state">An <see cref="T:System.Object" /> that lets the client distinguish between different asynchronous calls. It is made available to the client in the <paramref name="arguments" /> parameter of the event completion callback.</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <summary>This class is used by automatically generated client proxies to call services and should not be used otherwise. 
</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.#ctor(System.ServiceModel.ClientBase{`1})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class from an existing instance of the class.</summary>
      <param name="client">The <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> object used to initialize the new instance of the class.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
      <summary>Starts an asynchronous call of a specified method by name.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous method invoked.</returns>
      <param name="methodName">The name of the method to be called asynchronously.</param>
      <param name="args">An array of arguments for the method invoked.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">The <see cref="T:System.AsyncCallback" /> delegate. </param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(System.String,System.Object[],System.IAsyncResult)">
      <summary>Completes an asynchronous invocation by name of a specified method. </summary>
      <returns>
The <see cref="T:System.Object" /> output by the method invoked.
</returns>
      <param name="methodName">The name of the method called asynchronously.</param>
      <param name="args">An array of arguments for the method invoked.</param>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#IDisposable#Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources associated with the channel.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <typeparam name="TProperty">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel. </param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous send operation.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation send completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#EndSend(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to transmit a message to the destination of the output channel. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IOutputChannel.BeginSend" />  method.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#RemoteAddress">
      <summary>Gets the destination of the service to which messages are sent out on the output channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the service to which the output channel sends messages.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)">
      <summary>Transmits a message to the destination of the output channel. </summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message on the current output channel within a specified interval of time.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the output channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received. (On the defaults, see the remarks.)</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#EndRequest(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to return a message-based response to a transmitted request. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#RemoteAddress">
      <summary>Gets the remote address to which the request channel sends messages. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> to which the request channel sends messages. </returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)">
      <summary>Sends a message-based request and returns the correlated message-based response. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message-based request and returns the correlated message-based response within a specified interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Via">
      <summary>Gets the transport address to which the request is sent.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#AllowInitializationUI">
      <summary>The <see cref="T:System.ServiceModel.EndpointAddress" /> serves as both the ultimate destination and the physical address if a <see cref="P:System.ServiceModel.Channels.IOutputChannel.Via" /> is not specified. If the <see cref="P:System.ServiceModel.Channels.IOutputChannel.Via" /> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>An asynchronous call to begin using a user interface to obtain credential information.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> to use to call back when processing has completed.</returns>
      <param name="callback">The method that is called when this method completes.</param>
      <param name="state">Information about the state of the channel.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DidInteractiveInitialization">
      <summary>Gets a value that indicates whether a call was done to a user interface to obtain credential information. </summary>
      <returns>true if the <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> method was called (or the <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> and <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> methods); otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DisplayInitializationUI">
      <summary>A call to a user interface to obtain credential information.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>Called when the call to <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> has finished.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" />.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#UnknownMessageReceived">
      <summary>This is a reserved event.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the client channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the channel.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Abort">
      <summary>Causes a communication object to transition immediately from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object with a specified time-out.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object has transitioned from its current state to the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object transitions from its current state to the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen" /> method.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>The event handler that is invoked when a fault occurs while performing an operation on the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>Causes a communication object to transition from the created state into the opened state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object has transitioned from the created state to the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object transitions from the created state to the opened state.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#State">
      <summary>Gets the current state of the communication-oriented object.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#AllowOutputBatching">
      <summary>Gets or sets a value that instructs Silverlight version 4 to store a set of messages before giving the messages to the transport.</summary>
      <returns>true if the batching of outgoing messages is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#InputSession">
      <summary>Gets the input session for the channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IInputSession" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#LocalAddress">
      <summary>Gets the local endpoint for the channel.</summary>
      <returns>The local <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OperationTimeout">
      <summary>Gets or sets the time period within which an operation must complete or an exception is thrown.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that specifies the time period within which an operation must complete.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OutputSession">
      <summary>Gets the output session associated with the channel, if any.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.IOutputSession" /> implementation if an input session exists; otherwise, null.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#RemoteAddress">
      <summary>Gets the remote address associated with the channel.</summary>
      <returns>The remote <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#SessionId">
      <summary>Returns an identifier for the current session, if any.</summary>
      <returns>The current session identifier, if any.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IExtensibleObject{T}#Extensions">
      <summary>Gets a collection of extension objects for this extensible object.</summary>
      <returns>A <see cref="T:System.ServiceModel.IExtensionCollection`1" /> of extension objects.</returns>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.EndOperationDelegate">
      <summary>A delegate that is invoked by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> on successful completion of the call made by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> to <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />.</summary>
      <returns>An array of <see cref="T:System.Object" /> that contains the results of the call to the asynchronous method. The operation may have multiple return values, which are all returned in this object array.</returns>
      <param name="result">The result returned by the call made by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" />to <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />.</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs">
      <summary>Stores the results from an asynchronous call made by the client.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs.Results">
      <summary>Gets the results from an asynchronous call made by the client.</summary>
      <returns>An array of type<see cref="T:System.Object" /> that contains the results from an asynchronous call made by the client.</returns>
    </member>
    <member name="T:System.ServiceModel.CommunicationException">
      <summary>Represents a communication error in either the service or client application.</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationException" /> class, using the specified message.</summary>
      <param name="message">The description of the error condition.</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationException" /> class, using the specified message and the inner exception.</summary>
      <param name="message">The description of the error condition.</param>
      <param name="innerException">The inner exception to be used.</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectAbortedException">
      <summary>The exception that is thrown when the call is to an <see cref="T:System.ServiceModel.ICommunicationObject" /> object that has aborted.</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> class with the specified message. </summary>
      <param name="message">The message carried in the exception.</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> class using the specified message and inner exception. </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectFaultedException">
      <summary>The exception that is thrown when a call is made to a communication object that has faulted. </summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> class using the specified message.</summary>
      <param name="message">The message that describes the exception.</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> class using the specified message and inner exception.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationState">
      <summary>Defines the states in which an <see cref="T:System.ServiceModel.ICommunicationObject" /> can exist. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Created">
      <summary>Indicates that the communication object has been instantiated and is configurable, but not yet open or ready for use.</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opening">
      <summary>Indicates that the communication object is being transitioned from the <see cref="F:System.ServiceModel.CommunicationState.Created" /> state to the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opened">
      <summary>Indicates that the communication object is now open and ready to be used. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closing">
      <summary>Indicates that the communication object is transitioning to the <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closed">
      <summary>Indicates that the communication object has been closed and is no longer usable. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Faulted">
      <summary>Indicates that the communication object has encountered an error or fault from which it cannot recover and from which it is no longer usable. </summary>
    </member>
    <member name="T:System.ServiceModel.DataContractFormatAttribute">
      <summary>Instructs the Silverlight version 4 infrastructure to use the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.ServiceModel.DataContractFormatAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.DataContractFormatAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.DataContractFormatAttribute.Style">
      <summary>Gets or sets the SOAP style of the serialized data.</summary>
      <returns>One of the <see cref="T:System.ServiceModel.OperationFormatStyle" /> values. The default is <see cref="F:System.ServiceModel.OperationFormatStyle.Document" />.</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointAddress">
      <summary>Provides a unique network address that a client uses to communicate with a service endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointAddress" /> class with a specified URI string.</summary>
      <param name="uri">The URI that identifies the endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.Channels.AddressHeader[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointAddress" /> class with a specified URI and headers.</summary>
      <param name="uri">The <see cref="T:System.Uri" /> that identifies the endpoint location.</param>
      <param name="addressHeaders">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.AddressHeader" /> that contains address information used to interact with the endpoint.</param>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.AnonymousUri">
      <summary>Gets a version-neutral representation of the anonymous URI.</summary>
      <returns>A <see cref="T:System.Uri" /> with the value http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/Anonymous.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ApplyTo(System.ServiceModel.Channels.Message)">
      <summary>Assigns the URI and properties of the endpoint address to the values of the headers of a specified message.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> whose header values are being assigned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.Equals(System.Object)">
      <summary>Returns a value that indicates whether a specified object is equivalent to the current endpoint address.</summary>
      <returns>true if the specified object is equivalent to the current address; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to be compared to the current endpoint address.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.GetHashCode">
      <summary>Provides a unique hash code for the current endpoint address. </summary>
      <returns>A unique hash code for the current endpoint address.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Headers">
      <summary>Gets the collection of address headers for the endpoints that the builder can create.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> that contains address information for the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsAnonymous">
      <summary>Gets a value that indicates whether the endpoint is anonymous.</summary>
      <returns>true if the endpoint is <see cref="P:System.ServiceModel.EndpointAddress.AnonymousUri" />; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsNone">
      <summary>Gets a value that indicates whether the URI for the endpoint is the <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" />.</summary>
      <returns>true if the URI of the endpoint is <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" />; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.NoneUri">
      <summary>Gets a version-neutral URI used for the address of an endpoint to which a message must not be sent.</summary>
      <returns>A <see cref="T:System.Uri" /> with the value http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/None.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Equality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>Returns a value that indicates whether specified endpoint addresses are not equivalent.</summary>
      <returns>true if the endpoint addresses are equivalent; otherwise, false.</returns>
      <param name="address1">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
      <param name="address2">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Inequality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>Returns a value that indicates whether specified endpoint addresses are not equivalent.</summary>
      <returns>true if the endpoint addresses are not equivalent; otherwise, false.</returns>
      <param name="address1">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
      <param name="address2">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader)">
      <summary>Reads an endpoint address for a specified address version from a specified XML dictionary reader.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the specified version read from the XML reader.</returns>
      <param name="addressingVersion">The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> of the current endpoint address.</param>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> from which the endpoint address is obtained.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ToString">
      <summary>Returns a canonical string representation of the URI that is contained in the endpoint address.</summary>
      <returns>The URI that identifies the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Uri">
      <summary>Gets the URI for the endpoint.</summary>
      <returns>The <see cref="T:System.Uri" /> for the endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)">
      <summary>Saves all the child nodes of the node to the XML dictionary writer specified.</summary>
      <param name="addressingVersion">The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> of the current endpoint address.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> to which the endpoint address is saved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> or <paramref name="addressingVersion" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.EndpointAddressBuilder">
      <summary>A factory for producing new (immutable) endpoint addresses with specific property values.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> class from the values of an existing endpoint address.</summary>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> whose property values are used to initialize the property values of this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Headers">
      <summary>Gets the collection of address headers for the endpoints that the builder can create.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.ServiceModel.Channels.AddressHeader" /> that contains the address headers for the endpoints that the builder can create.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.ToEndpointAddress">
      <summary>Creates a new endpoint address initialized with the property values of the current endpoint address builder.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> whose property are initialized with the values of the current endpoint address builder.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Uri">
      <summary>Gets or sets the URI for the endpoints that the builder can create.</summary>
      <returns>The <see cref="T:System.Uri" /> that specifies the endpoint address.</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointNotFoundException">
      <summary>The exception that is thrown when a remote endpoint could not be found or reached.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointNotFoundException" /> class with a specified error message and the inner exception that caused the current exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.EnvelopeVersion">
      <summary>Contains information related to the version of SOAP associated with a message and its exchange.</summary>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.GetUltimateDestinationActorValues">
      <summary>Gets a string that contains the URI name for the SOAP role associated with the current message version for the ultimate destination.</summary>
      <returns>An empty string if SOAP 1.1 is used; a string that contains http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver if SOAP 1.2 is used.</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.NextDestinationActorValue">
      <summary>Gets a string that contains the URI name for the SOAP role associated with the current message version for the next destination.</summary>
      <returns>A string that contains http://schemas.xmlsoap.org/soap/actor/next if <see cref="P:System.ServiceModel.EnvelopeVersion.Soap11" /> is used; a string that contains http://www.w3.org/2003/05/soap-envelope/role/next if <see cref="P:System.ServiceModel.EnvelopeVersion.Soap12" /> is used; and an empty string if the <see cref="T:System.ServiceModel.EnvelopeVersion" /> is <see cref="P:System.ServiceModel.EnvelopeVersion.None" />.</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.None">
      <summary>Gets the envelope version not using a version of SOAP.</summary>
      <returns>The envelope version not using SOAP formatting.</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap11">
      <summary>Gets the SOAP 1.1 envelope version.</summary>
      <returns>The SOAP 1.1 <see cref="T:System.ServiceModel.EnvelopeVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap12">
      <summary>Gets the SOAP 1.2 envelope version.</summary>
      <returns>The SOAP 1.2 <see cref="T:System.ServiceModel.EnvelopeVersion" />.</returns>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.ToString">
      <summary>Gets a string that represents the current envelope version.</summary>
      <returns>The current envelope version.</returns>
    </member>
    <member name="T:System.ServiceModel.ExceptionDetail">
      <summary>Represents fault detail information.</summary>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ExceptionDetail" /> class from the exception. </summary>
      <param name="exception">The exception to be serialized as an <see cref="T:System.ServiceModel.ExceptionDetail" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.InnerException">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.ExceptionDetail" /> object that represents the inner exception.</summary>
      <returns>The inner exception information.</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Message">
      <summary>Gets or sets the message from the exception passed to the constructor.</summary>
      <returns>The exception message.</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.StackTrace">
      <summary>Gets or sets the stack trace information from the exception passed to the constructor.</summary>
      <returns>The stack trace of the exception.</returns>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.ToString">
      <summary>Returns the exception detail information for the exception passed to the constructor.</summary>
      <returns>The message and stack trace of the exception.</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Type">
      <summary>Gets or sets the type string for the exception passed to the constructor.</summary>
      <returns>The type string for the exception passed to the constructor.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultCode">
      <summary>Represents a SOAP fault code. </summary>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultCode" /> class. </summary>
      <param name="name">The name of the fault code.</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.ServiceModel.FaultCode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultCode" /> class.</summary>
      <param name="name">The name of the fault code.</param>
      <param name="subCode">The fault subcode.</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultCode" /> class with the specified name and namespace. </summary>
      <param name="name">The local name of the fault code. </param>
      <param name="ns">The namespace name of the fault code. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="ns" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is an empty string. </exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String,System.ServiceModel.FaultCode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultCode" /> class with the specified name, namespace, and fault subcode.</summary>
      <param name="name">The local name of the fault code. </param>
      <param name="ns">The namespace name of the fault code. </param>
      <param name="subCode">A <see cref="T:System.ServiceModel.FaultCode" /> object that represents the fault subcode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="ns" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is an empty string. </exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.ServiceModel.FaultCode)">
      <summary>Creates a sender fault code with the specified subcode. </summary>
      <returns>A <see cref="T:System.ServiceModel.FaultCode" /> object with the created SOAP fault subcode in the <see cref="P:System.ServiceModel.FaultCode.SubCode" /> property. </returns>
      <param name="subCode">A <see cref="T:System.ServiceModel.FaultCode" /> object that represents the fault subcode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subCode" /> is null. </exception>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsPredefinedFault">
      <summary>Gets a value that indicates whether the fault is a SOAP 1.1 or SOAP 1.2 fault.</summary>
      <returns>true if the fault is a SOAP 1.1 or SOAP 1.2 fault; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsReceiverFault">
      <summary>Gets a value that indicates whether the fault is a SOAP 1.1 server fault or a SOAP 1.2 receiver fault.</summary>
      <returns>true if the fault is a SOAP 1.1 server fault or a SOAP 1.2 receiver fault; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsSenderFault">
      <summary>Gets a value that indicates whether the fault is a SOAP 1.1 client fault or a SOAP 1.2 sender fault.</summary>
      <returns>true if the fault is a SOAP 1.1 client fault or a SOAP 1.2 sender fault; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Name">
      <summary>Gets the local name of the fault code. </summary>
      <returns>The local name of the fault code. </returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Namespace">
      <summary>Gets the namespace for the fault code. </summary>
      <returns>A Uniform Resource Identifier (URI) for the namespace name. </returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.SubCode">
      <summary>Gets the fault subcode. </summary>
      <returns>A <see cref="T:System.ServiceModel.FaultCode" /> object that represents the fault subcode. </returns>
    </member>
    <member name="T:System.ServiceModel.FaultContractAttribute">
      <summary>Specifies one or more SOAP faults that are returned when a service operation encounters processing errors.</summary>
    </member>
    <member name="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultContractAttribute" /> class. </summary>
      <param name="detailType">The serializable type that contains error information for the caller.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="detailType" /> argument is null.</exception>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Action">
      <summary>Gets or sets the action of the SOAP fault message that is specified as part of the operation contract.</summary>
      <returns>The value of the action for the SOAP fault message.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.DetailType">
      <summary>Gets the type of a serializable object that contains error information.</summary>
      <returns>The type that represents the serializable error class.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Name">
      <summary>Gets or sets the name of the fault message in Web Services Description Language (WSDL).</summary>
      <returns>The fault message name. The default is the name of the type used as the fault detail.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Namespace">
      <summary>Gets or sets the namespace of the SOAP fault.</summary>
      <returns>The namespace of the SOAP fault.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException">
      <summary>Represents a SOAP fault.</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultException" /> class using the specified message fault values and the provided action string.</summary>
      <param name="fault">The message fault that contains the default SOAP fault values to use.</param>
      <param name="action">The action of the SOAP fault.</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultException" /> class using the specified reason, fault code, and action value.</summary>
      <param name="reason">The reason for the SOAP fault.</param>
      <param name="code">The fault code for the SOAP fault.</param>
      <param name="action">The action value for the SOAP fault.</param>
    </member>
    <member name="P:System.ServiceModel.FaultException.Action">
      <summary>Gets the value of the SOAP action for the fault message.</summary>
      <returns>The value of the SOAP action for the fault message.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Code">
      <summary>Gets the fault code for the SOAP fault.</summary>
      <returns>The fault code for the SOAP fault.</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.String,System.Type[])">
      <summary>Returns a <see cref="T:System.ServiceModel.Channels.FaultException" /> object from the specified message fault, action, and an array of detail types.</summary>
      <returns>A <see cref="T:System.ServiceModel.FaultException" /> object that you can throw to indicate that a SOAP fault message was received.</returns>
      <param name="messageFault">The message fault that contains default SOAP fault information.</param>
      <param name="action">The fault action value.</param>
      <param name="faultDetailTypes">An array of types that contains fault details.</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.Type[])">
      <summary>Returns a <see cref="T:System.ServiceModel.Channels.FaultException" /> object from the specified message fault and an array of detail types.</summary>
      <returns>A <see cref="T:System.ServiceModel.FaultException" /> object that you can throw to indicate that a SOAP fault message was received.</returns>
      <param name="messageFault">The message fault that contains default SOAP fault information.</param>
      <param name="faultDetailTypes">An array of types that contains fault details.</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateMessageFault">
      <summary>Returns an in-memory <see cref="T:System.ServiceModel.Channels.MessageFault" /> object.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageFault" /> object that is passed to <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> to create a message that contains a fault.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Message">
      <summary>Gets the message for the exception.</summary>
      <returns>The exception message.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Reason">
      <summary>Gets the <see cref="T:System.ServiceModel.FaultReason" /> for the SOAP fault.</summary>
      <returns>The reason for the SOAP fault.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException`1">
      <summary>Used in a client application to catch contractually specified SOAP faults.</summary>
      <typeparam name="TDetail">The serializable error detail type.</typeparam>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultException`1" /> class that uses a specified detail object and SOAP fault reason, code and action values. </summary>
      <param name="detail">The object used as the SOAP fault detail.</param>
      <param name="reason">The reason for the SOAP fault.</param>
      <param name="code">The fault code for the SOAP fault.</param>
      <param name="action">The action of the SOAP fault.</param>
    </member>
    <member name="P:System.ServiceModel.FaultException`1.Detail">
      <summary>Gets the object that contains the detail information of the fault condition.</summary>
      <returns>The detail object that is the type parameter of the <see cref="T:System.ServiceModel.FaultException`1" /> object.</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.ToString">
      <summary>Returns a string for the <see cref="T:System.ServiceModel.FaultException`1" /> object.</summary>
      <returns>The string for the SOAP fault.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReason">
      <summary>Provides a text description of a SOAP fault. </summary>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.FaultReasonText})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultReason" /> class using the specified list of fault translations. </summary>
      <param name="translations">A list of <see cref="T:System.ServiceModel.FaultReasonText" /> objects; each object describes the fault in a specific language. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="translations" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="translations" /> is empty or one or more items is null. </exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.ServiceModel.FaultReasonText)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultReason" /> class using the specified text element that describes the fault in a specific language. </summary>
      <param name="translation">An array of <see cref="T:System.ServiceModel.FaultReasonText" /> objects that correspond to fault descriptions in different languages.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="translation" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultReason" /> class using the specified text.</summary>
      <param name="text">A description of the reason the fault occurred.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation">
      <summary>Gets the fault description in the language used by the current thread.</summary>
      <returns>The fault text in the specified language.</returns>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation(System.Globalization.CultureInfo)">
      <summary>Gets the fault description in the specified language.</summary>
      <returns>A <see cref="T:System.ServiceModel.FaultReasonText" /> object that contains the translated fault description.</returns>
      <param name="cultureInfo">A <see cref="T:System.Globalization.CultureInfo" /> object that specifies the language of the fault description.</param>
    </member>
    <member name="M:System.ServiceModel.FaultReason.ToString">
      <summary>Returns the fault reason as a string.</summary>
      <returns>The reason for the fault.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultReason.Translations">
      <summary>Gets a collection of fault descriptions in different languages.</summary>
      <returns>A <see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" /> of <see cref="T:System.ServiceModel.FaultReasonText" /> objects, where each object describes the fault in a different language.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReasonText">
      <summary>Represents the text of the reason of a SOAP fault.</summary>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultReasonText" /> class that uses a specified fault text.</summary>
      <param name="text">The text that is the SOAP fault reason.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultReasonText" /> class that uses the specified fault text.</summary>
      <param name="text">The text that is the SOAP fault reason.</param>
      <param name="xmlLang">The language of the fault.</param>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.Matches(System.Globalization.CultureInfo)">
      <summary>Returns a value that indicates whether the language of the description matches the provided <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>true if the specified <see cref="T:System.Globalization.CultureInfo" /> matches; otherwise, false.</returns>
      <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo" /> object to compare with the language of the description.</param>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.Text">
      <summary>Gets the text of the SOAP fault reason.</summary>
      <returns>The text of the SOAP fault reason.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.XmlLang">
      <summary>Gets the language of the SOAP fault reason.</summary>
      <returns>The language of the SOAP fault reason.</returns>
    </member>
    <member name="T:System.ServiceModel.IClientChannel">
      <summary>Defines the behavior of outbound request and request/reply channels used by client applications.</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.AllowInitializationUI">
      <summary>Gets or sets a value that indicates whether <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> attempts to call the <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" /> objects in the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers" /> property or throws and exception if that collection is not empty. </summary>
      <returns>true if Windows Communication Foundation (WCF) is permitted to invoke interactive channel initializers; otherwise, false. </returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>An asynchronous call to begin using a user interface to obtain credential information.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> to use to call back when processing has completed.</returns>
      <param name="callback">The method that is called when this method completes.</param>
      <param name="state">Information about the state of the channel.</param>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization">
      <summary>Gets a value that indicates whether a call was done to a user interface to obtain credential information. </summary>
      <returns>true if the <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> method was called (or the <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> and <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> methods); otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.DisplayInitializationUI">
      <summary>A call to a user interface to obtain credential information.</summary>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>Called when the call to <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> has finished.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" />.</param>
    </member>
    <member name="E:System.ServiceModel.IClientChannel.UnknownMessageReceived">
      <summary>This is a reserved event. </summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the client channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the channel.</returns>
    </member>
    <member name="T:System.ServiceModel.ICommunicationObject">
      <summary>Defines the contract for the basic state machine for all communication-oriented objects in the system, including channels, the channel managers, factories, listeners, and dispatchers, and service hosts.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Abort">
      <summary>Causes a communication object to transition immediately from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object with a specified time-out.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The specified time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default open time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The specified time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default close time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closed">
      <summary>Occurs when the communication object completes its transition from the closing state into the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closing">
      <summary>Occurs when the communication object first enters the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> method.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen" /> method.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Faulted">
      <summary>Occurs when the communication object first enters the faulted state.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open">
      <summary>Causes a communication object to transition from the created state into the opened state.</summary>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default open time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
      <summary>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The specified time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opened">
      <summary>Occurs when the communication object completes its transition from the opening state into the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opening">
      <summary>Occurs when the communication object first enters the opening state.</summary>
    </member>
    <member name="P:System.ServiceModel.ICommunicationObject.State">
      <summary>Gets the current state of the communication-oriented object.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
    </member>
    <member name="T:System.ServiceModel.IContextChannel">
      <summary>Defines the interface for the context control of a channel.</summary>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.AllowOutputBatching">
      <summary>Gets or sets a value that instructs Silverlight version 4 to store a set of messages before giving the messages to the transport.</summary>
      <returns>true if the batching of outgoing messages is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.InputSession">
      <summary>Gets the input session for the channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IInputSession" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.LocalAddress">
      <summary>Gets the local endpoint for the channel.</summary>
      <returns>The local <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OperationTimeout">
      <summary>Gets or sets the time period within which an operation must complete or an exception is thrown.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that specifies the time period within which an operation must complete.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OutputSession">
      <summary>Gets the output session associated with the channel, if any.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IOutputSession" /> implementation if an input session exists; otherwise, null.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.RemoteAddress">
      <summary>Gets the remote address associated with the channel.</summary>
      <returns>The remote <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.SessionId">
      <summary>Returns an identifier for the current session, if any.</summary>
      <returns>The current session identifier, if any.</returns>
    </member>
    <member name="T:System.ServiceModel.IDefaultCommunicationTimeouts">
      <summary>Defines the interface for specifying the communication time-outs used by channels and channel managers, such as channel factories.</summary>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout">
      <summary>Gets the interval of time after which the close method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the close method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout">
      <summary>Gets the interval of time after which the open method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the open method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout">
      <summary>Gets the interval of time after which the receive method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the receive method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout">
      <summary>Gets the interval of time after which the send method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the send method to time out.</returns>
    </member>
    <member name="T:System.ServiceModel.IExtensibleObject`1">
      <summary>Enables an object to participate in custom behavior, such as registering for events, or watching state transitions.</summary>
      <typeparam name="T">The type of the extension class.</typeparam>
    </member>
    <member name="P:System.ServiceModel.IExtensibleObject`1.Extensions">
      <summary>Gets a collection of extension objects for this extensible object.</summary>
      <returns>A <see cref="T:System.ServiceModel.IExtensionCollection`1" /> of extension objects.</returns>
    </member>
    <member name="T:System.ServiceModel.IExtension`1">
      <summary>Enables an object to extend another object through aggregation.</summary>
      <typeparam name="T">The object that participates in the custom behavior.</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Attach(`0)">
      <summary>Enables an extension object to find out when it has been aggregated. Called when the extension is added to the <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> property.</summary>
      <param name="owner">The extensible object that aggregates this extension.</param>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Detach(`0)">
      <summary>Enables an object to find out when it is no longer aggregated. Called when an extension is removed from the <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> property.</summary>
      <param name="owner">The extensible object that aggregates this extension.</param>
    </member>
    <member name="T:System.ServiceModel.IExtensionCollection`1">
      <summary>A collection of the <see cref="T:System.ServiceModel.IExtension`1" /> objects that allow for retrieving the <see cref="T:System.ServiceModel.IExtension`1" /> objects by their type.</summary>
      <typeparam name="T">The type of the extension objects.</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.Find``1">
      <summary>Finds the specified extension object in the collection.</summary>
      <returns>The extension object that was found.</returns>
      <typeparam name="E">The type of extension object.</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.FindAll``1">
      <summary>Finds all extension objects in the collection specified by <paramref name="E" />.</summary>
      <returns>A collection of all extension objects in the collection that implements the specified type.</returns>
      <typeparam name="E">The type of extension object.</typeparam>
    </member>
    <member name="T:System.ServiceModel.InvalidMessageContractException">
      <summary>Represents a message contract that is not valid.</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.InvalidMessageContractException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.InvalidMessageContractException" /> class using the specified message.</summary>
      <param name="message">The message for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.InvalidMessageContractException" /> class that uses the specified message and inner exception.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.ServiceModel.MessageBodyMemberAttribute">
      <summary>Specifies that a member is serialized as an element inside the SOAP body.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.MessageBodyMemberAttribute.Order">
      <summary>Gets or sets a value that indicates the position in which the member is serialized into the SOAP body.</summary>
      <returns>The location of the element in the SOAP body.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value passed to the property setter is a negative integer.</exception>
    </member>
    <member name="T:System.ServiceModel.MessageContractAttribute">
      <summary>Defines a strongly typed class that corresponds to a SOAP message.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.IsWrapped">
      <summary>Gets or sets a value that specifies whether the message body has a wrapper element.</summary>
      <returns>true if the message body has a wrapper element; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperName">
      <summary>Gets or sets the name of the wrapper element of the message body.</summary>
      <returns>The name of the wrapper element in the message body.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace">
      <summary>Gets or sets the namespace of the message body wrapper element.</summary>
      <returns>The wrapper element namespace.</returns>
    </member>
    <member name="T:System.ServiceModel.MessageContractMemberAttribute">
      <summary>Declares the base members for <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> and <see cref="T:System.ServiceModel.MessageHeaderAttribute" />.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Name">
      <summary>Specifies the name of the element that corresponds to this member. </summary>
      <returns>The name of the element that corresponds to this member. This string must be a valid XML element name. </returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Namespace">
      <summary>Specifies the namespace of the element that corresponds to this member. </summary>
      <returns>A namespace URI of the element that corresponds to this member. </returns>
    </member>
    <member name="T:System.ServiceModel.MessageHeaderException">
      <summary>The exception that is thrown when the expectations regarding headers of a SOAP message are not satisfied when the message is processed.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class with the specified message.</summary>
      <param name="message">The message carried in the exception.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message and a value that indicates whether the message header is a duplicate or is missing.</summary>
      <param name="message">The exception message.</param>
      <param name="isDuplicate">true if the multiple message header is a duplicate; false if there are no message headers.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message and the inner exception that caused the exception.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that contains the inner exception that caused the exception.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace, and a value that indicates whether the message header is a duplicate or is missing.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
      <param name="isDuplicate">true if the multiple message header is a duplicate; false if there are no message headers.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace, a value that indicates whether the message header is a duplicate or is missing, and the inner exception that caused the exception.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
      <param name="isDuplicate">true if the multiple message header is a duplicate; false if there are no message headers.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that contains the inner exception that caused the exception.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace, and the inner exception that caused the exception.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that contains the inner exception that caused the exception.</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderName">
      <summary>Gets the name of the SOAP header that caused the exception.</summary>
      <returns>The name of the SOAP header.</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderNamespace">
      <summary>Gets the namespace of the SOAP header that caused the exception.</summary>
      <returns>The namespace of the SOAP header.</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.IsDuplicate">
      <summary>Gets a value that indicates whether there are multiple message headers or no message headers.</summary>
      <returns>true if the multiple message header is a duplicate; false if there are no message headers.</returns>
    </member>
    <member name="T:System.ServiceModel.MessageParameterAttribute">
      <summary>Controls the name of the request and response parameter names. Cannot be used with <see cref="T:System.ServiceModel.Channels.Message" /> or message contracts.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageParameterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageParameterAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.MessageParameterAttribute.Name">
      <summary>Obtains or sets the name attribute of the parameter in the XML Schema (XSD).</summary>
      <returns>The name attribute of the parameter in the XSD.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="T:System.ServiceModel.OperationContext">
      <summary>Provides access to the execution context of a service method.</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContext" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> in a client application. </summary>
      <param name="channel">The <see cref="T:System.ServiceModel.IContextChannel" /> used to create a new client <see cref="T:System.ServiceModel.OperationContext" />.</param>
      <exception cref="T:System.ArgumentNullException">The channel is null.</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Current">
      <summary>Gets or sets the execution context for the current thread.</summary>
      <returns>The <see cref="T:System.ServiceModel.OperationContext" /> that represents the messaging and execution context of the current method.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Extensions">
      <summary>Gets the collection of service extensions from the current message context.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.OperationContext" /> extension objects.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageHeaders">
      <summary>Gets the incoming message headers for the <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that contains the incoming message headers.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageProperties">
      <summary>Gets the message properties for the incoming message in the <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> object that contains the message properties on the incoming message.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageVersion">
      <summary>Gets the incoming SOAP message version for the <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>The SOAP version of the incoming message.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IsUserContext">
      <summary>This property is intended for system use and should not be called by users.</summary>
      <returns>true.</returns>
    </member>
    <member name="E:System.ServiceModel.OperationContext.OperationCompleted">
      <summary>Occurs when the operation has completed.</summary>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders">
      <summary>Gets the outgoing message headers for the active <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that contains outbound message headers for the active <see cref="T:System.ServiceModel.OperationContext" />.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageProperties">
      <summary>Gets the message properties for the outbound message in the active <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> object that contains the message properties on the outbound message.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.RequestContext">
      <summary>Gets or sets the request context implementation for this method.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.RequestContext" /> implementation, or null if there is no request context.</returns>
    </member>
    <member name="T:System.ServiceModel.OperationContextScope">
      <summary>Creates a block within which an <see cref="T:System.ServiceModel.OperationContext" /> object is in scope.</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> to create a new <see cref="T:System.ServiceModel.OperationContext" /> for the scope.</summary>
      <param name="channel">The channel to use when creating the scope for a new <see cref="T:System.ServiceModel.OperationContext" />.</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class to create a scope for the specified <see cref="T:System.ServiceModel.OperationContext" /> object.</summary>
      <param name="context">The active <see cref="T:System.ServiceModel.OperationContext" /> in the created scope.</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.Dispose">
      <summary>Restores the original <see cref="T:System.ServiceModel.OperationContext" /> to the active context and recycles the <see cref="T:System.ServiceModel.OperationContextScope" /> object.</summary>
    </member>
    <member name="T:System.ServiceModel.OperationContractAttribute">
      <summary>Indicates that a method defines an operation that is part of a service contract in a Silverlight application. </summary>
    </member>
    <member name="M:System.ServiceModel.OperationContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Action">
      <summary>Gets or sets the WS-Addressing action of the request message. </summary>
      <returns>The action to use in generating the WS-Addressing Action header.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.AsyncPattern">
      <summary>Indicates that an operation is implemented asynchronously using a Begin&lt;methodName&gt; and End&lt;methodName&gt; method pair in a service contract. </summary>
      <returns>true if the Begin&lt;methodName&gt;method is matched by an End&lt;methodName&gt; method and can be treated by the infrastructure as an operation that is implemented as an asynchronous method pair on the service interface; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.IsOneWay">
      <summary>Gets or sets a value that indicates whether an operation returns a reply message.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Name">
      <summary>Gets or sets the name of the operation.</summary>
      <returns>The name of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.ReplyAction">
      <summary>Gets or sets the value of the SOAP action for the reply message of the operation.</summary>
      <returns>The value of the SOAP action for the reply message.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.OperationFormatStyle">
      <summary>Represents the SOAP style that determines how the WSDL metadata for the service is formatted.</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Document">
      <summary>Causes the WSDL representation to contain a single element that represents the document that is exchanged for the operation.</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Rpc">
      <summary>Causes the WSDL representation of messages exchanged for an operation and contains parameters as if it were a remote procedure call.</summary>
    </member>
    <member name="T:System.ServiceModel.ProtocolException">
      <summary>The exception seen on the client that is thrown when communication with the remote party is impossible due to mismatched data transfer protocols.</summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ProtocolException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ProtocolException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown. </param>
    </member>
    <member name="T:System.ServiceModel.QuotaExceededException">
      <summary>The exception that is thrown when a message quota has been exceeded.</summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.QuotaExceededException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.QuotaExceededException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.ServerTooBusyException">
      <summary>The exception that is thrown when a server is too busy to accept a message.</summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServerTooBusyException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServerTooBusyException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.ServiceActivationException">
      <summary>The exception that is thrown when a service fails to activate.</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceActivationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceActivationException" /> class with a specified error message and the inner exception provided.  </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown. </param>
    </member>
    <member name="T:System.ServiceModel.ServiceContractAttribute">
      <summary>Indicates that an interface or a class defines a service contract in a Silverlight client application. </summary>
    </member>
    <member name="M:System.ServiceModel.ServiceContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
      <summary>Gets or sets the type of callback contract when the contract is a duplex contract.</summary>
      <returns>A <see cref="T:System.Type" /> that indicates the callback contract. The default is null.</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
      <summary>Gets or sets the name used to locate the service in an application configuration file.</summary>
      <returns>The name used to locate the service element in an application configuration file. The default is the name of the service implementation class.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Name">
      <summary>Gets or sets the name for the &lt;portType&gt; element in Web Services Description Language (WSDL). </summary>
      <returns>The default value is the name of the class or interface to which the <see cref="T:System.ServiceModel.ServiceContractAttribute" /> is applied. </returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Namespace">
      <summary>Gets or sets the namespace of the &lt;portType&gt; element in Web Services Description Language (WSDL).</summary>
      <returns>The WSDL namespace of the &lt;portType&gt; element. The default value is "http://tempuri.org". </returns>
    </member>
    <member name="T:System.ServiceModel.ServiceKnownTypeAttribute">
      <summary>Specifies known types to be used by a service when serializing or deserializing.</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> class and specifies the name of a method that returns the known types.</summary>
      <param name="methodName">The name of a method that returns the known types.</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> class with the name of a method that returns the known types and the type that contains the method (or methods) that returns the known types.</summary>
      <param name="methodName">The name of a method that returns the known types.</param>
      <param name="declaringType">The type that can use the known types in its object graph.</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> class with the specified known type.</summary>
      <param name="type">Specifies a known type that can be used in a parameter or return value defined by the service.</param>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType">
      <summary>Gets the type that contains the methods that return the known types.</summary>
      <returns>The methods that return the known types.</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
      <summary>Gets the name of a method that returns the collection of known types.</summary>
      <returns>The name of the method that returns the known types.</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.Type">
      <summary>The known type that can be included in an object graph.</summary>
      <returns>The <see cref="T:System.Type" /> of the known type.</returns>
    </member>
    <member name="T:System.ServiceModel.TransferMode">
      <summary>Indicates whether a channel uses streamed or buffered modes for the transfer of request and response messages.</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.Buffered">
      <summary>The request and response messages are both buffered.</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.StreamedResponse">
      <summary>The request message is buffered and the response message is streamed.</summary>
    </member>
    <member name="T:System.ServiceModel.UnknownMessageReceivedEventArgs">
      <summary>Contains the message received by a channel and cannot be associated with any pending request.</summary>
    </member>
    <member name="P:System.ServiceModel.UnknownMessageReceivedEventArgs.Message">
      <summary>Gets the unknown message that caused the event.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that caused the event.</returns>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointNotFoundException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ProtocolException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.QuotaExceededException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServerTooBusyException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceActivationException" /> class. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeader">
      <summary>Represents a header that encapsulates an address information item used to identify or interact with an endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeader" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeader" /> class with a specified value, name and namespace.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeader" /> with the specified <paramref name="name" /> and <paramref name="ns" /> that contains the information item specified by <paramref name="value" />.</returns>
      <param name="name">The name of the address header.</param>
      <param name="ns">The namespace of the address header.</param>
      <param name="value">The information item for the address header.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> is null or <paramref name="name" />.Length == 0.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeader" /> class with a specified name and namespace that uses a specified formatter to serialize the information item from a specified object.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeader" /> with the specified <paramref name="name" /> and <paramref name="ns" /> that contains the information item specified by <paramref name="value" />.</returns>
      <param name="name">The name of the address header.</param>
      <param name="ns">The namespace of the address header.</param>
      <param name="value">The information item for the address header.</param>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> used to serialize the specified object in the <paramref name="value" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="serializer" /> is null or <paramref name="name" />.Length == 0.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.Equals(System.Object)">
      <summary>Determines whether the information item in a specified object is equal to the object contained in the current address header.</summary>
      <returns>true if the information item in a specified <paramref name="obj" /> is equivalent to the information item contained in the current address header; otherwise, false. In particular, returns false if <paramref name="obj" /> is null.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the object contained in the current address header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetAddressHeaderReader">
      <summary>Returns an XML reader that can serialize the current address header object.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can serialize the current address header object.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetHashCode">
      <summary>Provides a unique hash code for an address header. </summary>
      <returns>A unique hash code for the current address header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1">
      <summary>Deserializes the information item from the current address header to an object of a specified type.</summary>
      <returns>An instance of a class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</returns>
      <typeparam name="T">A class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Deserializes the information item from the current address header to an object of a specified type that uses a specified formatter to serialize this information.</summary>
      <returns>An instance of a class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</returns>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> used to deserialize the information item from the current address header object.</param>
      <typeparam name="T">A class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serializer" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Name">
      <summary>When implemented, gets the name of the address header.</summary>
      <returns>The name of the address header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Namespace">
      <summary>When implemented, gets the namespace of the address header.</summary>
      <returns>The namespace of the address header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>When overridden in a derived class, is invoked when the address header contents are written to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header contents to a stream or file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>When overridden in a derived class, is invoked when the address header contents begin to be written to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.ToMessageHeader">
      <summary>Wraps the address header as a message header.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageHeader" /> that wraps the current address header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the address header to a stream or file using a specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlWriter)">
      <summary>Writes the address header to a stream or file using a specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the address header contents to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header contents to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>Starts to write the address header contents to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeaderCollection">
      <summary>Represents a thread-safe, read-only collection of address headers.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.AddressHeader})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> class from an enumerable set of address headers.</summary>
      <param name="addressHeaders">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> set of <see cref="T:System.ServiceModel.Channels.AddressHeader" /> objects used to initialize the collection.</param>
      <exception cref="T:System.ArgumentException">One of the address headers in the <paramref name="addressHeaders" /> parameter is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.AddHeadersTo(System.ServiceModel.Channels.Message)">
      <summary>Adds the headers in the collection to the headers of a specified message.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to which the headers are added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindAll(System.String,System.String)">
      <summary>Finds all the address headers in the collection with the specified name and namespace.</summary>
      <returns>The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.AddressHeader" /> that contains all the headers in the collection with the specified name and namespace.</returns>
      <param name="name">The name of the address header to be found.</param>
      <param name="ns">The namespace of the address header to be found.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="ns" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindHeader(System.String,System.String)">
      <summary>Finds the first address header in the collection with a specified name and namespace.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeader" /> in the collection with the specified name and namespace.</returns>
      <param name="name">The name of the address header to be found.</param>
      <param name="ns">The namespace of the address header to be found.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="ns" /> is null.</exception>
      <exception cref="T:System.ArgumentException">There is more than one header that has the specified <paramref name="name" /> and <paramref name="ns" />.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressingVersion">
      <summary>The WS-Addressing version associated with a SOAP message or understood by an endpoint.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.None">
      <summary>Gets the addressing version that indicates that no version of WS-Addressing is being used.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> that does not use a version of WS-Addressing.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressingVersion.ToString">
      <summary>A string that represents the current addressing version.</summary>
      <returns>The current addressing version.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.WSAddressing10">
      <summary>Gets an identifier for the address version associated with WS-Addressing 1.0.</summary>
      <returns>A singleton instance that identifies the <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> that is associated with WS-Addressing 1.0.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement">
      <summary>The binding element that specifies the .NET Binary Format for XML used to encode messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel for a specified context.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> for the specified context.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel.</param>
      <typeparam name="TChannel">The type of channel that the channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.Clone">
      <summary>Creates a new <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> object initialized from the current one.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> object with property values equal to those of the current element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>Creates a factory for binary message encoders that employ the SOAP and WS-Addressing versions and the character encoding specified by the current encoding binding element.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> that this binding element creates.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MessageVersion">
      <summary>Gets or sets the SOAP message and WS-Addressing versions that are used or expected.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used or expected.</returns>
      <exception cref="T:System.ArgumentNullException">The value set is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value set is an unsupported envelope version.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.Binding">
      <summary>Contains the binding elements that specify the protocols, transports, and message encoders used for communication between clients and services.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.Binding" /> class with a default name and namespace. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.Binding" /> class from a specified binding of the service.</summary>
      <param name="name">The <see cref="P:System.ServiceModel.Channels.Binding.Name" /> of the binding.</param>
      <param name="ns">The <see cref="P:System.ServiceModel.Channels.Binding.Namespace" /> of the binding.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or an empty string.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ns" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by an object array.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> that satisfies the features specified by the collection.</returns>
      <param name="parameters">The object array that specifies requirements for the channel factory that is built.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
      <exception cref="T:System.InvalidOperationException">Transport element is missing or out of order or scheme is invalid or the message version is not specified.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by a collection of binding parameters.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> that satisfies the features specified by the collection.</returns>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> that specifies requirements for the channel factory built.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
      <exception cref="T:System.InvalidOperationException">Transport element is missing or out of order or scheme is invalid or the message version is not specified.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])">
      <summary>Returns a value that indicates whether the current binding can build a channel factory stack on the client that satisfies the requirements specified by an object array.</summary>
      <returns>true if the specified channel factory stack can be build on the client; otherwise, false.</returns>
      <param name="parameters">The object array that specifies requirements for the channel factory that is built.</param>
      <typeparam name="TChannel">The type of channel for which the factory is being tested.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Returns a value that indicates whether the current binding can build a channel factory stack on the client that satisfies the collection of binding parameters specified.</summary>
      <returns>true if the specified channel factory stack can be build on the client; otherwise, false.</returns>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> that specifies requirements for the channel factory that is built.</param>
      <typeparam name="TChannel">The type of channel for which the factory is being tested.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.CloseTimeout">
      <summary>Gets or sets the interval of time provided for a connection to close before the transport raises an exception.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out. The default value is 1 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
      <summary>When overridden in a derived class, creates a collection that contains the binding elements that are part of the current binding. </summary>
      <returns>A <see cref="T:System.Collections.Generic.ICollection`1" /> object of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains the binding elements from the current binding object in the correct order.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> that specifies requirements for the channel that is built.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.MessageVersion">
      <summary>Gets the message version used by clients and services configured with the binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> used by clients and services configured with the binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Name">
      <summary>Gets or sets the name of the binding.</summary>
      <returns>The name of the binding. The default name is null.</returns>
      <exception cref="T:System.ArgumentException">The value set cannot be null or an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Namespace">
      <summary>Gets or sets the XML namespace of the binding.</summary>
      <returns>The XML namespace of the binding. The default value is "http://tempuri.org/".</returns>
      <exception cref="T:System.ArgumentNullException">The value set cannot be null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.OpenTimeout">
      <summary>Gets or sets the interval of time provided for a connection to open before the transport raises an exception.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out. The default value is 1 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.ReceiveTimeout">
      <summary>Gets or sets the interval of time that a connection can remain inactive, during which no application messages are received, before it is dropped.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the application has to receive a message before timing out. The default value is 10 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Scheme">
      <summary>When implemented in a derived class, sets the URI scheme that specifies the transport used by the channel factories that are built by the bindings.</summary>
      <returns>The URI scheme that is used by the channels that are created by the factories built by the current binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.SendTimeout">
      <summary>Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the write operation has to complete before timing out. The default value is 1 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingContext">
      <summary>Provides information about the addresses, bindings, binding elements and binding parameters required to build the channel factories on a Silverlight version 4 client.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.#ctor(System.ServiceModel.Channels.CustomBinding,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingContext" /> class for a specified binding and collection of binding parameters.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.CustomBinding" /> for the channel.</param>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> for the channel.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.Binding">
      <summary>Gets the binding for the channel built in the current context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.CustomBinding" /> for the channel built in the current context.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.BindingParameters">
      <summary>Gets the collection of binding parameters for the channel built in the current context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> for the channel built in the current context.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.BuildInnerChannelFactory``1">
      <summary>Builds the inner channel factory for channels of a specified type below the current channel factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> that represents the inner channel factory of the current channel factory.</returns>
      <typeparam name="TChannel">The type of <see cref="T:System.ServiceModel.Channels.IChannel" /> object the inner channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.CanBuildInnerChannelFactory``1">
      <summary>Returns a value that indicates whether the inner channel factory can produce a specified type of channel.</summary>
      <returns>true if the inner channel factory can produce the specified <paramref name="TChannel" />; otherwise, false.</returns>
      <typeparam name="TChannel">The type of <see cref="T:System.ServiceModel.Channels.IChannel" /> object the inner channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.Clone">
      <summary>Returns a copy of the current channel build context.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BindingContext" /> object that is a copy of the current channel build context.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.GetInnerProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T " />requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.RemainingBindingElements">
      <summary>Gets the binding elements that are used by other binding elements to construct the channel stack.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the binding elements that are used by other binding elements to construct the channel stack.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElement">
      <summary>The elements of the bindings that build the channel factories for various types of channels that are used to process outgoing messages on a Silverlight client.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor(System.ServiceModel.Channels.BindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElement" /> class from a specified binding element.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be cloned.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Initializes a channel factory for producing channels of a specified type from the binding context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> initialized from the <paramref name="context" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides context for the binding element. </param>
      <typeparam name="TChannel">The type of channel the factory builds.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the binding element can build a channel factory for a specific type of channel.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> can be built by the binding element; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides context for the binding element. </param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.Clone">
      <summary>When overridden in a derived class, returns a copy of the binding element object.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BindingElement" /> object that is a deep clone of the original.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>When overridden in a derived class, returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not present.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the binding element.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElementCollection">
      <summary>Represents the collection of binding elements used in a binding.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> class from an enumerable set of binding elements.</summary>
      <param name="elements">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> of generic type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> class from an array of binding elements.</summary>
      <param name="elements">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.AddRange(System.ServiceModel.Channels.BindingElement[])">
      <summary>Adds binding elements from an array to the collection of binding elements.</summary>
      <param name="elements">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be added to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Clone">
      <summary>Creates a copy of the binding element collection.</summary>
      <returns>A copy of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Contains(System.Type)">
      <summary>Returns a value that indicates whether a specified type of binding element belongs to the collection of binding elements.</summary>
      <returns>true if the type of binding element specified is contained in the collection; otherwise, false.</returns>
      <param name="bindingElementType">The type of binding element being tested for inclusion in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementType" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Find``1">
      <summary>Returns the first item of a specified type from the collection of binding elements.</summary>
      <returns>The item of type <see cref="T:System.Type" /> if found; if not found, 0 if <paramref name="T" /> is a value type and null if <paramref name="T" /> is a reference type.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.FindAll``1">
      <summary>Returns all of the items of a specified type from the collection of binding elements.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of all of the items of type <see cref="T:System.Type" /> if found; if none are found, 0 if <paramref name="T" /> is a value type and null if <paramref name="T" /> is a reference type.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.InsertItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>Inserts a binding element at a specified location within a collection of binding elements.</summary>
      <param name="index">The location at which to insert the binding element in the collection.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be inserted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Remove``1">
      <summary>Removes a binding element of a specified type from the collection of binding elements.</summary>
      <returns>The item of type <see cref="T:System.Type" /> removed.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.RemoveAll``1">
      <summary>Removes all of the binding elements of a specified type from the collection of binding elements.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of all of the items of type <see cref="T:System.Type" /> found.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.SetItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>Replaces a binding element at the specified index in the collection of binding elements.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the <see cref="T:System.ServiceModel.Channels.BindingElement" /> item at the specified <paramref name="index" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingParameterCollection">
      <summary>Represents a collection of binding parameters that store information used by binding elements to build factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> class. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.BodyWriter">
      <summary>Represents the writer of the message body.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BodyWriter" /> class that explicitly indicates whether to buffer.</summary>
      <param name="isBuffered">true if the body writer can be called multiple times; otherwise false.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.CreateBufferedCopy(System.Int32)">
      <summary>Creates a buffered copy of the body.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BodyWriter" /> that contains a copy of this object.</returns>
      <param name="maxBufferSize">The maximum size of the buffer for the body.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferSize" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The body has already been written and cannot be written again, or the body writer is not buffered.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BodyWriter.IsBuffered">
      <summary>Gets a value that indicates whether the write method can be called multiple times.</summary>
      <returns>true if the body writer can be called multiple times; otherwise false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnCreateBufferedCopy(System.Int32)">
      <summary>Provides an extensibility point when the body contents are written.</summary>
      <returns>A  <see cref="T:System.ServiceModel.Channels.BodyWriter" /> with the specified maximum buffer size.</returns>
      <param name="maxBufferSize">The maximum size of the buffer for the body.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>When implemented, provides an extensibility point when the body contents are written.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write out the message body.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>Writes out the contents of the message body.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write out the message body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BufferManager">
      <summary>When implemented in a derived class, you can use the <see cref="T:System.ServiceModel.Channels.BufferManager" /> class to manage a buffer pool. The pool and its buffers are created when you instantiate this class and destroyed when the buffer pool is reclaimed by garbage collection. Every time you need to use a buffer, you take one from the pool, use it, and return it to the pool when done. This process is much faster and uses fewer resources than creating and destroying a buffer every time you need to use one.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BufferManager" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.Clear">
      <summary>Releases the buffers currently cached in the manager.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.CreateBufferManager(System.Int64,System.Int32)">
      <summary>Creates a new BufferManager with a specified maximum buffer pool size and a maximum size for each individual buffer in the pool.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.BufferManager" /> object with the specified parameters.</returns>
      <param name="maxBufferPoolSize">The maximum size of the pool.</param>
      <param name="maxBufferSize">The maximum size of an individual buffer.</param>
      <exception cref="T:System.InsufficientMemoryException">There was insufficient memory to create the requested buffer pool.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferPoolSize" /> or <paramref name="maxBufferSize" /> was less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.ReturnBuffer(System.Byte[])">
      <summary>Returns a buffer to the pool.</summary>
      <param name="buffer">A reference to the buffer being returned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> reference cannot be null.</exception>
      <exception cref="T:System.ArgumentException">Length of <paramref name="buffer" /> does not match the pool's buffer length property.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.TakeBuffer(System.Int32)">
      <summary>Gets a buffer of at least the specified size from the pool. </summary>
      <returns>A byte array that is the requested size of the buffer.</returns>
      <param name="bufferSize">The size, in bytes, of the requested buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> cannot be less than zero.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelBase">
      <summary>Provides the base implementation for custom channels.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.#ctor(System.ServiceModel.Channels.ChannelManagerBase)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelBase" /> class. </summary>
      <param name="channelManager">The <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> that provides default timeouts for the channel operations (send, receive, open, and close).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelManager" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultCloseTimeout">
      <summary>Gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultOpenTimeout">
      <summary>Gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultReceiveTimeout">
      <summary>Gets the default interval of time provided for a receive operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the receive operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout">
      <summary>Gets the default interval of time provided for a send operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.GetProperty``1">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested, if it is present, or null, if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.Manager">
      <summary>Gets the channel manager that is associated with the current channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> that is associated with the current channel.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>Gets the interval of time after which the close method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the close method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>Gets the interval of time after which the open method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the open method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>Gets the interval of time after which the receive method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the receive method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>Gets the interval of time after which the send method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the send method to time out.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase">
      <summary>Provides a common base implementation for all custom channel factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> class with specified default communication timeouts.</summary>
      <param name="timeouts">The <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" /> that specifies the default timeouts for open, send, receive, and close operations when exchanging messages. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultCloseTimeout">
      <summary>Gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultOpenTimeout">
      <summary>Gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultReceiveTimeout">
      <summary>Gets the default interval of time provided for a receive operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the receive operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultSendTimeout">
      <summary>Gets the default interval of time provided for a send operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty``1">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnAbort">
      <summary>Inserts processing on a communication object after it transitions to the closing state due to the invocation of a synchronous abort operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close each of the channels that were created by the factory.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on close operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation on close completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on close operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnClose(System.TimeSpan)">
      <summary>Inserts processing on a communication object after it transitions into the opening state, which must complete within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnEndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close channels that were opened by the factory.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase`1">
      <summary>Provides a common base implementation for channel factories on the client to create channels of a specified type connected to a specified address.</summary>
      <typeparam name="TChannel">The type of channel the factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> class with the default communication timeouts specified.</summary>
      <param name="timeouts">The <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" /> that specifies the default timeouts for open, send, receive, and close operations when exchanging messages.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>Creates a particular type of channel with a specified endpoint address.</summary>
      <returns>A channel of type <paramref name="TChannel" /> with the specified <paramref name="address" />.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> of the remote endpoint to which the channel sends messages.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a particular type of channel with specified transport and endpoint addresses.</summary>
      <returns>A channel of type <paramref name="TChannel" /> with the specified remote and transport addresses.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> of the remote endpoint to which the channel sends messages.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> or <paramref name="via" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnAbort">
      <summary>Aborts each channel managed by the channel factory.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close all the channels associated with the channel factory within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on-close operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on-close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous completion of the on-close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on-close operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnClose(System.TimeSpan)">
      <summary>Closes all the channels associated with the channel factory within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on-close operation has to complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnCreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>When implemented in a derived class, provides an extensibility point when creating channels.</summary>
      <returns>A channel of type <paramref name="TChannel" /> with the specified addresses.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> of the remote endpoint to which the channel sends messages.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnEndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close all the channels associated with the channel factory within a specified interval of time.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.ValidateCreateChannel">
      <summary>Confirms that the channel factory is opened and ready to create channels.</summary>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.InvalidOperationException">The current channel factory is not in the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelManagerBase">
      <summary>Provides a base implementation for managing the default timeouts that are associated with channel and listener factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelManagerBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultReceiveTimeout">
      <summary>When overridden in a derived class, gets the default interval of time a channel has to complete the reception of a message.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the channel has to complete the reception of a message before timing out once the receive method has been invoked.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultSendTimeout">
      <summary>When overridden in a derived class, gets the default interval of time a channel has to complete the sending of a message.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the channel has to complete the sending of a message before timing out once the send method has been invoked.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>Gets the interval of time after which the close method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the close method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>Gets the interval of time after which the open method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the open method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>Gets the interval of time after which the receive method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the receive method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>Gets the interval of time after which the send method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the send method to time out.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelParameterCollection">
      <summary>Represents a collection of channel parameters.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor(System.ServiceModel.Channels.IChannel)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> class. </summary>
      <param name="channel">The channel whose parameters are in this collection.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelParameterCollection.Channel">
      <summary>Gets the channel whose parameters are in this collection. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannel" /> whose parameters are in this collection.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.ClearItems">
      <summary>Clears the collection of parameters.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.InsertItem(System.Int32,System.Object)">
      <summary>Inserts the specified item into the collection using the specified index.</summary>
      <param name="index">The index of the item in the collection.</param>
      <param name="item">The item to add to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.PropagateChannelParameters(System.ServiceModel.Channels.IChannel)">
      <summary>Adds the parameters in the current collection to a specified channel's <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" />.</summary>
      <param name="innerChannel">The channel that receives the current collection's parameters.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.RemoveItem(System.Int32)">
      <summary>Removes a parameter from the collection.</summary>
      <param name="index">Index of the parameter to remove.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.SetItem(System.Int32,System.Object)">
      <summary>Replaces an item in the collection at a specified index.</summary>
      <param name="index">Index of the item to replace.</param>
      <param name="item">Value of the replacement item.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.CommunicationObject">
      <summary>Provides a common base implementation for the basic state machine common to all communication-oriented objects in the system, including channels and the channel factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> class with the mutually exclusive lock to protect the state transitions specified.</summary>
      <param name="mutex">The mutually exclusive lock that protects the class instance during a state transition.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Abort">
      <summary>Causes a communication object to transition immediately from its current state into the closing state.</summary>
      <exception cref="T:System.InvalidOperationException">Either the base class <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" /> method or the base class <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnClosed" /> method is not called.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object with a specified timeout.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)">
      <summary>Causes a communication object to transition from its current state into the closed state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closed">
      <summary>Occurs when a communication object transitions into the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closing">
      <summary>Occurs when a communication object transitions into the closing state.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultCloseTimeout">
      <summary>When overridden in a derived class, gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultOpenTimeout">
      <summary>When overridden in a derived class, gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Fault">
      <summary>Causes a communication object to transition from its current state into the faulted state.</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Faulted">
      <summary>Occurs when a communication object transitions into the faulted state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType">
      <summary>Gets the type of communication object.</summary>
      <returns>The type of communication object.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed">
      <summary>Gets a value that indicates whether the communication object has been disposed.</summary>
      <returns>true if the communication object is in a closed state; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnAbort">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions to the closing state due to the invocation of a synchronous abort operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, inserts processing after a communication object transitions to the closing state due to the invocation of an asynchronous close operation.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on close operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous on close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on close operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions to the opening state due to the invocation of an asynchronous open operation.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on open operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous on open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on open operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClose(System.TimeSpan)">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions to the closing state due to the invocation of a synchronous close operation.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosed">
      <summary>Invoked during the transition of a communication object into the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosing">
      <summary>Invoked during the transition of a communication object into the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)">
      <summary>When implemented in a derived class, completes an asynchronous operation on the close of a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)" /> method.</param>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)">
      <summary>When implemented in a derived class, completes an asynchronous operation on the open of a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)" /> method.</param>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted">
      <summary>Inserts processing on a communication object after it transitions to the faulted state due to the invocation of a synchronous fault operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpen(System.TimeSpan)">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions into the opening state which must complete within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on open operation has to complete before timing out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpened">
      <summary>Invoked during the transition of a communication object into the opened state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpening">
      <summary>Invoked during the transition of a communication object into the opening state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open">
      <summary>Causes a communication object to transition from the created state into the opened state.</summary>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)">
      <summary>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opened">
      <summary>Occurs when a communication object transitions into the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opening">
      <summary>Occurs when a communication object transitions into the opening state.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.State">
      <summary>Gets a value that indicates the current state of the communication object.</summary>
      <returns>A value from the <see cref="T:System.ServiceModel.CommunicationState" /> enumeration that indicates the current state of the object.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.ThisLock">
      <summary>Gets the mutually exclusive lock that protects the class instance during a state transition.</summary>
      <returns>The mutually exclusive lock that protects the class instance during a state transition.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed">
      <summary>Throws an exception if the communication object is disposed.</summary>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable">
      <summary>Throws an exception if the communication object the <see cref="P:System.ServiceModel.Channels.CommunicationObject.State" /> property is not set to the <see cref="F:System.ServiceModel.CommunicationState.Created" /> state.</summary>
      <exception cref="T:System.InvalidOperationException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Opening" /> or <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen">
      <summary>Throws an exception if the communication object is not in the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state.</summary>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Created" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be used.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.CustomBinding">
      <summary>Defines a binding from a list of binding elements. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class with the binding elements from a complete channel stack.</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains the binding elements of the channel stack in top-down order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.Binding)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class from the values of a specified binding.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> that is used to initialize the custom binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class from an array of binding elements.</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the custom binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.String,System.String,System.ServiceModel.Channels.BindingElement[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class from an array of binding elements with a specified name and namespace.</summary>
      <param name="name">The name of the binding.</param>
      <param name="ns">The namespace of the binding.</param>
      <param name="bindingElementsInTopDownChannelStackOrder">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the custom binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.CreateBindingElements">
      <summary>Returns a generic collection of the binding elements from the custom binding.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> object of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains the binding elements from the custom binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Elements">
      <summary>Gets the binding elements from the custom binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the binding elements from the custom binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Scheme">
      <summary>Gets the URI scheme for transport used by the custom binding.</summary>
      <returns>The URI scheme for transport used by the custom binding; or an empty string if there is no transport (<see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> is null).</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.FaultConverter">
      <summary>Converts exceptions thrown by a channel into SOAP fault messages that conform to the channel's protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.FaultConverter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.GetDefaultFaultConverter(System.ServiceModel.Channels.MessageVersion)">
      <summary>Gets the default fault converter.</summary>
      <returns>An instance of the <see cref="T:System.ServiceModel.Channels.FaultConverter" />.</returns>
      <param name="version">The <see cref="T:System.ServiceModel.Channels.MessageVersion" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>When implemented in a derived class, tries to create the exception.</summary>
      <returns>true if fault was successfully converted; otherwise, false. The default is false.</returns>
      <param name="message">The fault <see cref="T:System.ServiceModel.Channels.Message" />.</param>
      <param name="fault">The fault.</param>
      <param name="exception">If the conversion is successful, the SOAP <see cref="T:System.Exception" /> returned as an out parameter.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateFaultMessage(System.Exception,System.ServiceModel.Channels.Message@)">
      <summary>When implemented in a derived class, tries to create the fault message after the fault has been converted to a SOAP exception.</summary>
      <returns>true if fault message was successfully created; otherwise, false. The default is false.</returns>
      <param name="exception">The SOAP exception.</param>
      <param name="message">The fault message returned as an out parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> returned true but <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.TryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>Wraps <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> with error checking.</summary>
      <returns>true if fault was successfully converted; otherwise, false. The default is false.</returns>
      <param name="message">The fault message.</param>
      <param name="fault">The fault.</param>
      <param name="exception">If conversion is successful, the SOAP exception, returned as an out parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> or <paramref name="fault" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> returned true, but <paramref name="exception" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> returned false, but <paramref name="exception" /> is not null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement">
      <summary>Enables management of how HTTP cookies are handled in HTTP requests and responses.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.#ctor(System.ServiceModel.Channels.HttpCookieContainerBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" /> class from a specified binding element.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be cloned.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Initializes a channel factory for producing channels of a specified type from the binding context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> initialized from the <paramref name="context" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides context for the binding element.</param>
      <typeparam name="TChannel">The type of channel that the factory builds.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.Clone">
      <summary>Returns a copy of the current binding element object.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElement" /> object that is a deep clone of the original.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present, or null if it is not present.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the binding element.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpRequestMessageProperty">
      <summary>Provides access to the HTTP request to access and respond to the additional information that is made available for requests over the HTTP protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpRequestMessageProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpRequestMessageProperty" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Headers">
      <summary>Gets the HTTP headers from the HTTP request.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection" /> that contains the HTTP headers in the HTTP request.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Method">
      <summary>Gets or sets the HTTP verb for the HTTP request.</summary>
      <returns>The HTTP verb for the HTTP request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> set is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Name">
      <summary>Gets the name of the message property associated with the <see cref="T:System.ServiceModel.Channels.HttpRequestMessageProperty" /> class.</summary>
      <returns>The value "httpRequest".</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.QueryString">
      <summary>Gets or sets the query string for the HTTP request.</summary>
      <returns>The query string from the HTTP request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> set is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.SuppressEntityBody">
      <summary>Gets or sets a value that indicates whether the body of the message is ignored and only the headers are sent.</summary>
      <returns>true if the message body is suppressed; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpResponseMessageProperty">
      <summary>Provides access to the HTTP response in order to access and respond to the additional information made available for requests over the HTTP protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpResponseMessageProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpResponseMessageProperty" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.Headers">
      <summary>Gets the HTTP headers from the HTTP response.</summary>
      <returns>Returns a <see cref="T:System.Net.WebHeaderCollection" /> that contains the HTTP headers in the HTTP response.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.Name">
      <summary>Gets the name of the message property associated with the <see cref="T:System.ServiceModel.Channels.HttpResponseMessageProperty" /> class.</summary>
      <returns>Returns “httpResponse”.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusCode">
      <summary>Gets or sets the status code of the current HTTP response to which this property is attached.</summary>
      <returns>The <see cref="T:System.Net.HttpStatusCode" /> to send on the HTTP response.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is set to less than 100 or greater than 599.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusDescription">
      <summary>Gets or sets the description of the status code of the current HTTP response to which this property is attached.</summary>
      <returns>The status description to send for the HTTP response.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpsTransportBindingElement">
      <summary>Represents the binding element used to specify an HTTPS transport for transmitting messages. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpsTransportBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> class.</summary>
      <param name="elementToBeCloned">An instance of the <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> class.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory of a specified type that can be used to create a channel.</summary>
      <returns>A channel factory of the specified type that is configured based on the values set in the transport binding element.</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> members that describe bindings, behaviors, contracts and other information required to create the channel factory.</param>
      <typeparam name="TChannel">Type of channel.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.Clone">
      <summary>Creates a copy of the current binding element.</summary>
      <returns>A copy of the current binding element.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpsTransportBindingElement.Scheme">
      <summary>Returns the URI scheme for the transport.</summary>
      <returns>The URI scheme for the transport, which is "HTTPS".</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpTransportBindingElement">
      <summary>Represents the binding element used to specify an HTTP transport for transmitting messages. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpTransportBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> class. </summary>
      <param name="elementToBeCloned">An instance of the <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> class.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory that can be used to create a channel.</summary>
      <returns>A channel factory of the specified type.</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> members that describe bindings, behaviors, contracts and other information required to create the channel factory.</param>
      <typeparam name="TChannel">Type of channel factory.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Determines whether a channel factory of the specified type can be built.</summary>
      <returns>true if a channel factory can be built; otherwise false.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" />for the channel to be built.</param>
      <typeparam name="TChannel">The type of channel to check.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.Clone">
      <summary>Creates a copy of the current binding element.</summary>
      <returns>A copy of the current binding element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</summary>
      <returns>The property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</returns>
      <param name="context">A <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T">The property to get.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.MaxBufferSize">
      <summary>Gets or sets the maximum size of the buffer to use. For buffered messages this value is the same as <see cref="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize" />. For streamed messages, this value is the maximum size of the SOAP headers, which must be read in buffered mode.</summary>
      <returns>The maximum size, in bytes, of the buffer. </returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>Returns <see cref="F:System.Uri.UriSchemeHttp" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.TransferMode">
      <summary>Gets or sets a value that indicates whether messages are sent buffered or streamed.</summary>
      <returns>One of the following member values of <see cref="P:System.ServiceModel.Channels.HttpTransportBindingElement.TransferMode" />:<see cref="F:System.ServiceModel.TransferMode.Buffered" /><see cref="F:System.ServiceModel.TransferMode.StreamedResponse" /></returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannel">
      <summary>Defines the basic interface that all channel objects must implement. It requires that they implement the state machine interface shared by all communication objects and that they implement a method to retrieve objects from the channel stack. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannel.GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory">
      <summary>Defines the interface that must be implemented by a channel factory to produce channels.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested, if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory`1">
      <summary>Defines the interface that must be implemented by channel factories that create type-specific channels.</summary>
      <typeparam name="TChannel">The type of channel that the channel factory creates.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>Creates a channel of a specified type to a specified endpoint address.</summary>
      <returns>A channel of type <paramref name="TChannel" /> to the specified endpoint address.</returns>
      <param name="to">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a channel of a specified type to a specified endpoint address and transport address to which messages are sent.</summary>
      <returns>A channel of type <paramref name="TChannel" /> to the specified endpoint address and transport address.</returns>
      <param name="to">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexChannel">
      <summary>Defines the interface that a channel must implement to both send and receive messages.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSession">
      <summary>Defines the interface for the session implemented on each side of a bi-directional communication between messaging endpoints.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to terminate the outbound session.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous outbound session termination.</returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object that contains state information for this request.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to terminate the outbound session with a specified timeout within which the operation must complete.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous outbound session termination.</returns>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which the operation must complete.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object that contains state information for this request. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession">
      <summary>Terminates the outbound session that indicates that no more messages will be sent from this endpoint on the channel associated with the session. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession(System.TimeSpan)">
      <summary>Terminates the outbound session that indicates that no more messages will be sent from this endpoint on the channel associated with the session within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which the operation must complete.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.EndCloseOutputSession(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to terminate the outbound session that indicates that no more messages will be sent from this endpoint on the channel associated with the session. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession" /> methods.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSessionChannel">
      <summary>Defines the interface that associates a duplex channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IHttpCookieContainerManager">
      <summary>Defines the interface used to provide access to an optional instance of <see cref="T:System.Net.CookieContainer" /> that can be used to manage a collection of cookies.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IHttpCookieContainerManager.CookieContainer">
      <summary>Gets or sets the <see cref="T:System.Net.CookieContainer" /> object to be used, if one is to be used.</summary>
      <returns>The <see cref="T:System.Net.CookieContainer" /> to use, if a container is to be used, or null if a container is not to be used.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputChannel">
      <summary>Defines the interface that a channel must implement to receive a message. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message that has a state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for a message to become available.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for a message to become available.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for a message to become available.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to receive a message. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received. </returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
      <summary>Completes the specified asynchronous operation to receive a message.</summary>
      <returns>true if a message is received before the specified interval of time elapses; otherwise false.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> received. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
      <summary>Completes the specified asynchronous wait-for-a-message operation.</summary>
      <returns>true if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise false.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
      <summary>Gets the address on which the input channel receives messages. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive">
      <summary>Returns the message received, if one is available. If a message is not available, blocks for a default interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
      <summary>Returns the message received, if one is available. If a message is not available, blocks for a specified interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
      <summary>Tries to receive a message within a specified interval of time. </summary>
      <returns>true if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise false.</returns>
      <param name="timeout">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</param>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> received. </param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
      <summary>Returns a value that indicates whether a message has arrived within a specified interval of time.</summary>
      <returns>true if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise false.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSession">
      <summary>Defines the interface for the session implemented on the receiving side of a one-way communication between messaging endpoints. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSessionChannel">
      <summary>Defines the interface that associates an input channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IMessageProperty">
      <summary>Defines an interface that you can implement to describe a set of properties for a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IMessageProperty.CreateCopy">
      <summary>Creates a copy of the current instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.IMessageProperty" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputChannel">
      <summary>Defines the interface that a channel must implement to send a message. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel. </param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous send operation.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation send completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.EndSend(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to transmit a message to the destination of the output channel. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IOutputChannel.BeginSend" /> method. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.RemoteAddress">
      <summary>Gets the destination of the service to which messages are sent out on the output channel. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the service to which the output channel sends messages. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message)">
      <summary>Transmits a message to the destination of the output channel. </summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message on the current output channel within a specified interval of time.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the output channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSession">
      <summary>Defines the interface for the session implemented on the sending side of a one-way communication between messaging endpoints. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSessionChannel">
      <summary>Defines the interface that associates an output channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestChannel">
      <summary>Defines the contract that a channel must implement to be on the requesting side of a request-reply communication between messaging endpoints. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received. (On the defaults, see the remarks.)</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to return a message-based response to a transmitted request. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress">
      <summary>Gets the remote address to which the request channel sends messages. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> to which the request channel sends messages. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)">
      <summary>Sends a message-based request and returns the correlated message-based response. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message-based request and returns the correlated message-based response within a specified interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.Via">
      <summary>Gets the transport address to which the request is send.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestSessionChannel">
      <summary>Defines the interface to associate a request channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.ISession">
      <summary>Defines the interface to establish a shared context among parties that exchange messages by providing an ID for the communication session. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ISession.Id">
      <summary>Gets the ID that uniquely identifies the session. </summary>
      <returns>The ID that uniquely identifies the session. </returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ISessionChannel`1">
      <summary>Defines the interface that associates a channel with a specific type of session.</summary>
      <typeparam name="TSession">The type of <see cref="T:System.ServiceModel.Channels.ISession" /> associated with the channel.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ISessionChannel`1.Session">
      <summary>Gets the type of session associated with the channel.</summary>
      <returns>The generic parameter <paramref name="TSession" /> that defines the session associated with the channel.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.LocalClientSecuritySettings">
      <summary>Specifies local client security settings.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalClientSecuritySettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalClientSecuritySettings.Clone">
      <summary>Creates a new instance of this class that is a copy of the current instance.</summary>
      <returns>A new cloned instance of <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.MaxClockSkew">
      <summary>Gets or sets the maximum allowable time difference between the system clocks of the two parties that are communicating. </summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the maximum allowable time difference between the system clocks of the two parties that are communicating. The default is 5 minutes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property value is less than 0.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.ReplayWindow">
      <summary>Gets or sets the maximum time that a message nonce is valid.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the maximum time that a message nonce is valid. The default is five minutes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property value is less than 0.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.TimestampValidityDuration">
      <summary>Gets or sets the maximum duration that the messages are valid when sent by the client. If a message is received by the service after this duration, it should discard the message.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the maximum duration that the messages are valid when sent by the client. The default is five minutes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property value is less than 0.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.Message">
      <summary>Represents the unit of communication between endpoints in a distributed environment. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.Message" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.Close">
      <summary>Closes the <see cref="T:System.ServiceModel.Channels.Message" /> and releases any resources. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String)">
      <summary>Creates a message that contains a version and an action.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message.</param>
      <param name="action">A description of how the message should be processed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> or <paramref name="action" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object)">
      <summary>Creates a message with the specified version, action and body. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a message using the specified version, action, message body and serializer.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The body of the message. </param>
      <param name="serializer">A <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="fault" /> or <paramref name="action" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.ServiceModel.Channels.BodyWriter)">
      <summary>Creates a message with a body that consists of an array of bytes. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">A <see cref="T:System.ServiceModel.Channels.BodyWriter" /> of type byte. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlDictionaryReader)">
      <summary>Creates a message with the specified version, action and body. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlReader)">
      <summary>Creates a message using the specified reader, action and version. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The <see cref="T:System.Xml.XmlReader" /> object to be used for reading the SOAP message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.Xml.XmlDictionaryReader,System.Int32,System.ServiceModel.Channels.MessageVersion)">
      <summary>Creates a message using a specified dictionary reader, size allocation for the message headers, and version.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="envelopeReader">The <see cref="T:System.Xml.XmlDictionaryReader" /> object to be used for reading the SOAP message.</param>
      <param name="maxSizeOfHeaders">The maximum size in bytes of the message headers.</param>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeReader" /> or <paramref name="version" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.Xml.XmlReader,System.Int32,System.ServiceModel.Channels.MessageVersion)">
      <summary>Creates a message using a specified XML reader, size allocation for the message headers, and version.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="envelopeReader">The <see cref="T:System.Xml.XmlDictionaryReader" /> object to be used for reading the SOAP message.</param>
      <param name="maxSizeOfHeaders">The maximum size in bytes of a header. </param>
      <param name="version">A valid <see cref="T:System.ServiceModel.Channels.MessageVersion" /> value that specifies the SOAP version to use for the message. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeReader" /> or <paramref name="version" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1">
      <summary>Retrieves the body of this <see cref="T:System.ServiceModel.Channels.Message" /> instance.</summary>
      <returns>An object of type <paramref name="T" /> that contains the body of this message.</returns>
      <typeparam name="T">The body of the message.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Retrieves the body of this <see cref="T:System.ServiceModel.Channels.Message" /> using the specified serializer.</summary>
      <returns>An object of type <paramref name="T" /> that contains the body of this message.</returns>
      <param name="serializer">A <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <typeparam name="T">The body of the message.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBodyAttribute(System.String,System.String)">
      <summary>Retrieves the attributes of the message body.</summary>
      <returns>The attributes of the message body.</returns>
      <param name="localName">The local name of the XML node.The name of the element that corresponds to this member. This string must be a valid XML element name.</param>
      <param name="ns">The namespace to which this XML element belongs.The namespace URI of the element that corresponds to this member. The system does not validate any URIs other than transport addresses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> or <paramref name="ns" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetReaderAtBodyContents">
      <summary>Gets the XML dictionary reader that accesses the body content of this message.</summary>
      <returns>A <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message is empty, or has been copied, read or written.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Headers">
      <summary>When overridden in a derived class, gets the headers of the message. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that represents the headers of the message. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsDisposed">
      <summary>Returns a value that indicates whether the <see cref="T:System.ServiceModel.Channels.Message" /> is disposed. </summary>
      <returns>true if the message is disposed; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsEmpty">
      <summary>Returns a value that indicates whether the <see cref="T:System.ServiceModel.Channels.Message" /> is empty. </summary>
      <returns>true if the message is empty; otherwise, false. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsFault">
      <summary>Gets a value that indicates whether this message generates any SOAP faults.</summary>
      <returns>true if this message generates any SOAP faults; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnBodyToString(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the message body is converted to a string.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to convert the message body to a string. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnClose">
      <summary>Called when the message is closing.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnCreateBufferedCopy(System.Int32)">
      <summary>Called when a message buffer is created to store this message.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageBuffer" />.</returns>
      <param name="maxBufferSize">The maximum size of the buffer to be created.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetBodyAttribute(System.String,System.String)">
      <summary>Called when the attributes of the message body is retrieved.</summary>
      <returns>The attributes of the message body.</returns>
      <param name="localName">The local name of the XML node.The name of the element that corresponds to this member. This string must be a valid XML element name.</param>
      <param name="ns">The namespace to which this XML element belongs.The namespace URI of the element that corresponds to this member. The system does not validate any URIs other than transport addresses.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents">
      <summary>Called when an XML dictionary reader that can access the body content of this message can be retrieved.</summary>
      <returns>A <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the message body is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write this message body to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the entire message is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write this message to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the start body is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write the start body to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the start envelope is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write the start envelope to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartHeaders(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the start header is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write the start header to an XML file.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Properties">
      <summary>When overridden in a derived class, gets a set of processing-level annotations to the message. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> that contains a set of processing-level annotations to the message.</returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.State">
      <summary>Gets the current state of this <see cref="T:System.ServiceModel.Channels.Message" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageState" /> that contains the current state of this <see cref="T:System.ServiceModel.Channels.Message" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.System#IDisposable#Dispose">
      <summary>Closes all the resources used by this message. This method cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.ServiceModel.Channels.Message" />. </summary>
      <returns>The current <see cref="T:System.ServiceModel.Channels.Message" />. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Version">
      <summary>When overridden in a derived class, gets the SOAP and WS-Addressing versions of the message. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that represents the SOAP and WS-Addressing versions used by the message. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the body element using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the body element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlWriter)">
      <summary>Serializes the message body using the specified <see cref="T:System.Xml.XmlWriter" />. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to be used to write the body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is disposed. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the body content using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the body element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the entire message using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlWriter)">
      <summary>Serializes the entire message using the specified <see cref="T:System.Xml.XmlWriter" />. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to be used to write the body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the start body using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the start body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlWriter)">
      <summary>Serializes the start body using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the start body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the start envelope using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the start envelope.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageBuffer">
      <summary>Represents a memory buffer that stores an entire message for future consumption.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.BufferSize">
      <summary>Gets the approximate number of bytes accessed by this <see cref="T:System.ServiceModel.Channels.MessageBuffer" />. </summary>
      <returns>The approximate number of bytes accessed by this <see cref="T:System.ServiceModel.Channels.MessageBuffer" />. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.Close">
      <summary>Finishes working with the buffer.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateMessage">
      <summary>Returns a copy of the original message.</summary>
      <returns>An identical copy of the original <see cref="T:System.ServiceModel.Channels.Message" /> instance you previously provided to the <see cref="M:System.ServiceModel.Channels.Message.CreateBufferedCopy(System.Int32)" /> method of a <see cref="T:System.ServiceModel.Channels.Message" /> instance. </returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.MessageContentType">
      <summary>Gets the type of message content stored in this buffer.</summary>
      <returns>The type of message content stored in this buffer.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.System#IDisposable#Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> and optionally releases the managed resources. This method cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.WriteMessage(System.IO.Stream)">
      <summary>Writes the entire content of this buffer to the specified I/O stream.</summary>
      <param name="stream">An I/O stream that the entire content of this buffer is written to.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoder">
      <summary>The encoder is the component that is used to write messages to a stream and to read messages from a stream.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
      <summary>When overridden in a derived class, gets the MIME content type used by the encoder.</summary>
      <returns>The content type that is supported by the message encoder.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T " />requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
      <summary>Returns a value that indicates whether a specified message-level content-type value is supported by the message encoder.</summary>
      <returns>true if the message-level content-type specified is supported; otherwise false.</returns>
      <param name="contentType">The message-level content-type being tested.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
      <summary>When overridden in a derived class, gets the media type value that is used by the encoder.</summary>
      <returns>The media type that is supported by the message encoder.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
      <summary>When overridden in a derived class, gets the message version value that is used by the encoder.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used by the encoder.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
      <summary>When overridden in a derived class, reads a message from a specified buffer.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the buffer specified.</returns>
      <param name="buffer">A <see cref="T:System.ArraySegment`1" /> of type <see cref="T:System.Byte" /> that provides the buffer from which the message is deserialized.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer from which the message is deserialized.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
      <summary>When overridden in a derived class, reads a message from a specified stream.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the stream specified.</returns>
      <param name="buffer">A <see cref="T:System.ArraySegment`1" /> of type <see cref="T:System.Byte" /> that provides the buffer from which the message is deserialized.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer from which the message is deserialized.</param>
      <param name="contentType">The Multipurpose Internet Mail Extensions (MIME) message-level content-type.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
      <summary>When overridden in a derived class, reads a message from a specified stream.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the stream specified.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object from which the message is read.</param>
      <param name="maxSizeOfHeaders">The maximum size of the headers that can be read from the message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
      <summary>When overridden in a derived class, reads a message from a specified stream.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the stream specified.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object from which the message is read.</param>
      <param name="maxSizeOfHeaders">The maximum size of the headers that can be read from the message.</param>
      <param name="contentType">The Multipurpose Internet Mail Extensions (MIME) message-level content-type.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ToString">
      <summary>Returns the content type that is used by the message encoder.</summary>
      <returns>The content type that is used by the message encoder.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
      <summary>Writes a message less than a specified size to a byte array buffer.</summary>
      <returns>A <see cref="T:System.ArraySegment`1" /> of type byte that provides the buffer to which the message is serialized.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to write to the message buffer.</param>
      <param name="maxMessageSize">The maximum message size that can be written.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer to which the message is written.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
      <summary>When overridden in a derived class, writes a message of less than a specified size to a byte array buffer at the specified offset.</summary>
      <returns>A <see cref="T:System.ArraySegment`1" /> of type byte that provides the buffer to which the message is serialized.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to write to the message buffer.</param>
      <param name="maxMessageSize">The maximum message size that can be written.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer to which the message is written.</param>
      <param name="messageOffset">The offset of the segment that begins from the start of the byte array that provides the buffer.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
      <summary>When overridden in a derived class, writes a message to a specified stream.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to write to the <paramref name="stream" />.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object to which the <paramref name="message" /> is written.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoderFactory">
      <summary>An abstract base class that represents the factory for producing message encoders that can read messages from a stream and write them to a stream for various types of message encoding.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.CreateSessionEncoder">
      <summary>Returns a message encoder that can be used to correlate messages in session-based exchanges.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> that is used in session-based exchanges of messages.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.Encoder">
      <summary>When overridden in a derived class, gets the message encoder that is produced by the factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> used by the factory.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.MessageVersion">
      <summary>When overridden in a derived class, gets the message version that is used by the encoders produced by the factory to encode messages.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> used by the factory.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncodingBindingElement">
      <summary>The binding element that specifies the message version used to encode messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> class initialized from an existing element.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> to be cloned.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>When overridden in a derived class, creates a factory for producing message encoders.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> used to produce message encoders.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the current binding element.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncodingBindingElement.MessageVersion">
      <summary>When overridden in a derived class, gets or sets the message version that can be handled by the message encoders produced by the message encoder factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> used by the encoders produced by the message encoder factory.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageFault">
      <summary>Represents an in-memory representation of a SOAP fault that can be passed to <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> to create a message that contains a fault. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.#ctor">
      <summary>When called in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageFault" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Actor">
      <summary>Gets or sets the value of the actor.</summary>
      <returns>The value of the actor.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Code">
      <summary>Gets the SOAP fault code. </summary>
      <returns>A <see cref="T:System.ServiceModel.FaultCode" /> that contains the SOAP fault code.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>Returns a new <see cref="T:System.ServiceModel.Channels.MessageFault" /> object that uses the specified <see cref="T:System.ServiceModel.Channels.Message" /> and the specified maximum buffer size for the message buffer.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageFault" /> object.</returns>
      <param name="message">The specified <see cref="T:System.ServiceModel.Channels.Message" /> to be used to create the <see cref="T:System.ServiceModel.Channels.MessageFault" /> object.</param>
      <param name="maxBufferSize">The specified maximum buffer size for the message buffer.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1">
      <summary>Returns the detail object of the message fault.</summary>
      <returns>The detail object of the message fault.</returns>
      <typeparam name="T">Type of the detail object.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Returns the detail object that uses the specified <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</summary>
      <returns>The detail object contained in the <see cref="T:System.ServiceModel.Channels.MessageFault" />.</returns>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use when deserializing the detail object. </param>
      <typeparam name="T">The type of the detail object.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetReaderAtDetailContents">
      <summary>Returns an <see cref="T:System.Xml.XmlDictionaryReader" /> object that is positioned on the detail object of the <see cref="T:System.ServiceModel.Channels.MessageFault" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> object that is positioned on the detail object of the <see cref="T:System.ServiceModel.Channels.MessageFault" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.HasDetail">
      <summary>Gets a value that indicates whether the <see cref="T:System.ServiceModel.Channels.MessageFault" /> has a detail object.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageFault" /> has a detail object; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Node">
      <summary>Gets the SOAP node.</summary>
      <returns>The SOAP node that contains information about which SOAP node on a message path cause the fault.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnGetReaderAtDetailContents">
      <summary>When called in a derived class, returns an <see cref="T:System.Xml.XmlDictionaryReader" /> object that is positioned on the detail object of the <see cref="T:System.ServiceModel.Channels.MessageFault" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> object that is positioned on the detail object of the <see cref="T:System.ServiceModel.Channels.MessageFault" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>Invoked prior to writing the detail contents.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the detail element.</param>
      <param name="version">The version of the SOAP envelope to write.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetailContents(System.Xml.XmlDictionaryWriter)">
      <summary>When overridden in a non-abstract derived class, writes the contents of the detail element. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the detail element.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteStartDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>Writes the start element using the specified <see cref="T:System.Xml.XmlDictionaryWriter" /> and SOAP envelope version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the detail element.</param>
      <param name="version">The version of the SOAP envelope to write.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Reason">
      <summary>Gets a textual description of a SOAP fault. </summary>
      <returns>A <see cref="T:System.ServiceModel.FaultReason" /> that contains a textual description of a SOAP fault.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeader">
      <summary>Represents the content of a SOAP header.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeader" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Actor">
      <summary>Gets or sets the targeted recipient of the message header.</summary>
      <returns>The targeted recipient of the message header. The default is an empty string ("").</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
      <param name="relay">A value that indicates whether the header should be relayed.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a header from an object to be serialized using the XmlFormatter. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
      <param name="relay">A value that indicates whether the header should be relayed.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.IsMessageVersionSupported(System.ServiceModel.Channels.MessageVersion)">
      <summary>Verifies whether the specified message version is supported.</summary>
      <returns>true if the specified message version is supported; otherwise, false.</returns>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.IsReferenceParameter">
      <summary>Gets a value that specifies whether this message header contains reference parameters of an endpoint reference.</summary>
      <returns>true if this message header contains reference parameters of an endpoint reference; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.MustUnderstand">
      <summary>Gets or sets a value that indicates whether the header must be understood, according to SOAP 1.1 or 1.2 specification. </summary>
      <returns>true if the header must be understood; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Called when the header content is serialized using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Called when the start header is serialized using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Relay">
      <summary>Gets a value that indicates whether the header should be relayed.</summary>
      <returns>true if the header should be relayed; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.ToString">
      <summary>Converts this message header to a string.</summary>
      <returns>The message header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderAttributes(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header contents using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header contents using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the start header using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaderInfo">
      <summary>Represents system information regarding a SOAP message header.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaderInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Actor">
      <summary>Gets or sets the intended recipient of the message header.</summary>
      <returns>A URI that indicates the intended recipient of the message header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.IsReferenceParameter">
      <summary>Gets a value that specifies whether the message header represents reference parameters of an endpoint reference.</summary>
      <returns>true if the message header represents reference parameters of an endpoint reference; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.MustUnderstand">
      <summary>Gets or sets a value that indicates whether processing the message header is mandatory or optional.</summary>
      <returns>true if processing the message header is mandatory; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Name">
      <summary>Gets the name of the message header.</summary>
      <returns>The name of the message header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Namespace">
      <summary>Gets the namespace of the message header.</summary>
      <returns>The namespace of the message header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Relay">
      <summary>Gets or sets a value that indicates whether the message header can be relayed.</summary>
      <returns>true if the message header can be relayed; otherwise, false.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaders">
      <summary>Represents a collection of message headers for a message. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageHeaders)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> class with the specified collection of message headers.</summary>
      <param name="collection">A collection of message headers.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> class with the specified message version.</summary>
      <param name="version">The SOAP version of the message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> class with the specified message version and size.</summary>
      <param name="version">The SOAP version of the message.</param>
      <param name="initialSize">The size of the header.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Action">
      <summary>Gets or sets a description of how the message should be processed.</summary>
      <returns>A description of how the message should be processed.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Add(System.ServiceModel.Channels.MessageHeader)">
      <summary>Adds the specified message header to the collection.</summary>
      <param name="header">A message header to be added.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Clear">
      <summary>Removes all the headers from the collection.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>Copies the header content located at the specified index from the specified message to this instance.</summary>
      <param name="message">A message.</param>
      <param name="headerIndex">The location of the original message header, from which the content is copied over.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.MessageHeaders,System.Int32)">
      <summary>Copies the header content located at the specified index from the specified message header collection to this instance.</summary>
      <param name="collection">A <see cref="T:System.ServiceModel.Channels.MessageHeaders" />.</param>
      <param name="headerIndex">The location of the original message header, from which the content is copied over.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.Message)">
      <summary>Copies the content of all the headers from the specified message to this instance.</summary>
      <param name="message">A message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.MessageHeaders)">
      <summary>Copies the content from the specified header collection to this instance.</summary>
      <param name="collection">A <see cref="T:System.ServiceModel.Channels.MessageHeaders" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyTo(System.ServiceModel.Channels.MessageHeaderInfo[],System.Int32)">
      <summary>Copies the headers from this collection to an array, starting at a particular index of the array. </summary>
      <param name="array">The one-dimensional array that is the destination of the message header objects copied from this instance. The array must have zero-based indexing. </param>
      <param name="index">The zero-based index in the array at which copying begins. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Count">
      <summary>Gets the number of message headers in this collection.</summary>
      <returns>The number of message headers in this collection.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.FaultTo">
      <summary>Gets or sets the address of the node to which faults should be sent.</summary>
      <returns>An <see cref="T:System.ServiceModel.EndpointAddress" /> of the node to which faults should be sent.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String)">
      <summary>Finds a message header in this collection by the specified LocalName and namespace URI of the header element.</summary>
      <returns>The index of the message header in this collection.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String,System.String[])">
      <summary>Finds a message header in this collection by the specified LocalName, namespace URI and actors of the header element.</summary>
      <returns>The index of the message header in this collection.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="actors">The targeted recipient of the message header.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.From">
      <summary>Gets or sets the address of the node that sent the message.</summary>
      <returns>An <see cref="T:System.ServiceModel.EndpointAddress" /> of the node that sent the message.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection. This method cannot be inherited.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32)">
      <summary>Retrieves a message header at a specific position in this collection.</summary>
      <returns>A message header.</returns>
      <param name="index">The zero-based index of the header to get.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Retrieves a message header at a specific position in this collection.</summary>
      <returns>A message header.</returns>
      <param name="index">The zero-based index of the header to get.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String)">
      <summary>Finds a message header in this collection by the specified LocalName and namespace URI of the header element.</summary>
      <returns>A message header.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Retrieves a message header in this collection by the specified LocalName, namespace URI and serializer.</summary>
      <returns>A message header.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />,</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.String[])">
      <summary>Retrieves a message header in this collection by the specified LocalName, namespace URI and actors of the header element.</summary>
      <returns>A message header.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="actors">The targeted recipient of the message header.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetReaderAtHeader(System.Int32)">
      <summary>Gets a XML dictionary reader that accesses the message header at the specified location of the collection.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="headerIndex">The zero-based index of the header to get.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood">
      <summary>Verifies whether all the message headers marked with MustUnderstand are properly interpreted and processed. </summary>
      <returns>true if the recipients specified by <paramref name="actors" /> have properly interpreted and processed all the message headers marked with MustUnderstand; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood(System.String[])">
      <summary>Verifies whether the specified recipients have properly interpreted and processed all the message headers marked with MustUnderstand. </summary>
      <returns>true if the recipients specified by <paramref name="actors" /> have properly interpreted and processed all the message headers marked with MustUnderstand; otherwise, false.</returns>
      <param name="actors">The targeted recipient of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Insert(System.Int32,System.ServiceModel.Channels.MessageHeader)">
      <summary>Inserts a message header into the collection at the specified index.</summary>
      <param name="headerIndex">The zero-based index at which <paramref name="header" /> should be inserted.</param>
      <param name="header">A message header to insert.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Item(System.Int32)">
      <summary>Retrieves a header at the given index.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> in the collection. If <paramref name="index" /> is greater than or equal to the number of headers in the list, this returns null.</returns>
      <param name="index">Zero-based index of the list of headers.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageId">
      <summary>Gets or sets the unique ID of the message.</summary>
      <returns>The unique ID of the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageVersion">
      <summary>Gets the SOAP version of the message.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.RelatesTo">
      <summary>Gets the IDs of messages that are related to this message.</summary>
      <returns>The IDs of messages that are related to this message.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAll(System.String,System.String)">
      <summary>Removes all headers with the specified name and namespace from the collection.</summary>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAt(System.Int32)">
      <summary>Removes the message header at the specified index from the collection.</summary>
      <param name="headerIndex">The zero-based index of the header to remove.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.ReplyTo">
      <summary>Gets or sets the address of the node to which a reply should be sent for a request.</summary>
      <returns>An <see cref="T:System.ServiceModel.EndpointAddress" /> of the node to which a reply should be sent for a request.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.SetAction(System.Xml.XmlDictionaryString)">
      <summary>Sets the action element of the header.</summary>
      <param name="action">A description of how the message should be processed.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection. This method cannot be inherited.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.To">
      <summary>Gets or sets the destination endpoint of a message.</summary>
      <returns>A URI that contains the destination endpoint of a message.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the header from the specified location using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>Serializes the header from the specified location using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the specified header content using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlWriter)">
      <summary>Serializes the specified header content using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the start header using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>Serializes the start header using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageProperties">
      <summary>Represents a set of properties for a message. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor(System.ServiceModel.Channels.MessageProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> class with preset properties.</summary>
      <param name="properties">A <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Add(System.String,System.Object)">
      <summary>Adds an element with the specified name and property into the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
      <param name="name">The name of the element to add.</param>
      <param name="property">The value of the element to add. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.AllowOutputBatching">
      <summary>Gets or sets a value that specifies whether to store this message before giving it to the transport. </summary>
      <returns>true if the batching of outgoing messages is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Clear">
      <summary>Removes all elements from the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains a specific name. This method cannot be inherited.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains an element with the specified <paramref name="name" />; otherwise, false.</returns>
      <param name="name">The name to locate in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.CopyProperties(System.ServiceModel.Channels.MessageProperties)">
      <summary>Copies the content of the specified <see cref="T:System.ServiceModel.Channels.MessageProperties" /> to this instance.</summary>
      <param name="properties">A <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Count">
      <summary>Gets the total number of properties in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</summary>
      <returns>The total number of properties in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Encoder">
      <summary>Gets the encoder that is used to write messages to a stream and to read messages from a stream.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> that is used to write messages to a stream and to read messages from a stream.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsReadOnly">
      <summary>Gets a value that indicates whether this set of properties is read-only.</summary>
      <returns>true if this set of properties is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Item(System.String)">
      <summary>Retrieves a property at the given index.</summary>
      <returns>The property with the specified <paramref name="name" />, or null if the property does not exist.</returns>
      <param name="name">The name of the property to get from the collection.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Remove(System.String)">
      <summary>Removes the element with the specified name from the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains an element with the specified <paramref name="name" /> and can be removed; otherwise, false.</returns>
      <param name="name">The name of the element to remove.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection. This method cannot be inherited.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.TryGetValue(System.String,System.Object@)">
      <summary>Determines whether the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains a specific name, and retrieves its value. This method cannot be inherited.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains an element with the specified <paramref name="name" />; otherwise, false.</returns>
      <param name="name">The name of the element to locate.</param>
      <param name="value">The value of the found element.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Values">
      <summary>Gets the values in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the values in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Via">
      <summary>Gets or sets the transport address that is used to send messages.</summary>
      <returns>A URI that contains the transport address that is used to send messages.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageState">
      <summary>Specifies the status of a message. </summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Created">
      <summary>The message has been created. </summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Read">
      <summary>The message is being read.</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Written">
      <summary>The message has been written.</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Copied">
      <summary>The message has been copied.</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Closed">
      <summary>The message has been closed and can no longer be accessed.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageVersion">
      <summary>Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Addressing">
      <summary>Gets the version of WS-Addressing that is associated with the current message version.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> that is associated with the current message version. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion)">
      <summary>Creates a message version object by using WS-Addressing 1.0 and with a specified SOAP version.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> with the envelope version specified.</returns>
      <param name="envelopeVersion">The <see cref="T:System.ServiceModel.EnvelopeVersion" /> that indicates the SOAP version.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion,System.ServiceModel.Channels.AddressingVersion)">
      <summary>Creates a message version object with specified WS-Addressing and  SOAP versions.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that uses WS-Addressing and SOAP versions specified..</returns>
      <param name="envelopeVersion">The <see cref="T:System.ServiceModel.EnvelopeVersion" /> that indicates the SOAP version.</param>
      <param name="addressingVersion">The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> that indicates the WS-Addressing version.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Default">
      <summary>Gets the default message version used by Silverlight.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that uses SOAP 1.2 and WS-Addressing version 1.0.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Envelope">
      <summary>Gets the SOAP version associated with the current message version.</summary>
      <returns>The  <see cref="T:System.ServiceModel.EnvelopeVersion" /> associated with the message version object.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current message version is equal to a specified object.</summary>
      <returns>true if the specified object is equal to the current <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current message version.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.GetHashCode">
      <summary>Gets a hash code for the current message version.</summary>
      <returns>A unique hash code for the current <see cref="T:System.ServiceModel.Channels.MessageVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.None">
      <summary>Gets the message version that does not use SOAP or WS-Addressing.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that does not use SOAP or WS-Addressing.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap11">
      <summary>Gets the message version using SOAP 1.1.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> using SOAP 1.1 but no version of WS-Addressing.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10">
      <summary>Gets the message version using WS-Addressing 1.0 and SOAP 1.2.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> using the version of WS-Addressing 1.0 and SOAP 1.2.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.ToString">
      <summary>The current message version.</summary>
      <returns>The current <see cref="T:System.ServiceModel.Channels.MessageVersion" />. </returns>
    </member>
    <member name="T:System.ServiceModel.Channels.RequestContext">
      <summary>Provides a reply that is correlated to an incoming request.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.RequestContext" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Abort">
      <summary>When overridden in a derived class, aborts processing the request associated with the context. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>When overridden in a derived class, begins an asynchronous operation to reply to the request associated with the current context.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous reply operation.</returns>
      <param name="message">The incoming <see cref="T:System.ServiceModel.Channels.Message" /> that contains the request.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous reply operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous reply operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When overridden in a derived class, begins an asynchronous operation to reply to the request associated with the current context within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous reply operation.</returns>
      <param name="message">The incoming <see cref="T:System.ServiceModel.Channels.Message" /> that contains the request.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the reply to an available request.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous reply operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous reply operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close">
      <summary>When overridden in a derived class, closes the operation that is replying to the request context associated with the current context.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close(System.TimeSpan)">
      <summary>When overridden in a derived class, closes the operation that is replying to the request context associated with the current context within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time within which the reply operation associated with the current context must close.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Dispose(System.Boolean)">
      <summary>Releases resources associated with the context.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.EndReply(System.IAsyncResult)">
      <summary>When overridden in a derived class, completes an asynchronous operation to reply to a request message.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.RequestContext.BeginReply" /> methods.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message)">
      <summary>When overridden in a derived class, replies to a request message.</summary>
      <param name="message">The incoming <see cref="T:System.ServiceModel.Channels.Message" /> that contains the request.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>When overridden in a derived class, replies to a request message within a specified interval of time.</summary>
      <param name="message">The incoming <see cref="T:System.ServiceModel.Channels.Message" /> that contains the request.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the reply to a request.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RequestContext.RequestMessage">
      <summary>When overridden in a derived class, gets the message that contains the request.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that contains the request.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.System#IDisposable#Dispose">
      <summary>Releases both managed and unmanaged resources associated with the context.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.SecurityBindingElement">
      <summary>An abstract class that, when implemented, represents a binding element that supports channel SOAP message security.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory based on the <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> settings and the binding context passed in. The channel factory created is a SOAP message security channel factory, which internally has a reference to the channel factory that corresponds to the binding context (which includes the transport channel factory).</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="TChannel">Type of channel factory.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentException">A channel of type <paramref name="TChannel" /> is not supported.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelFactoryCore``1(System.ServiceModel.Channels.BindingContext)">
      <summary>When implemented in a derived class, creates a channel factory of a specified type.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory" /> that creates channels of type <paramref name="TChannel" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel factory.</param>
      <typeparam name="TChannel">Type of channel factory.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentException">A channel of type <paramref name="TChannel" /> is not supported.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a value that indicates whether a channel factory of the specified type can be built.</summary>
      <returns>true if a channel factory of type <paramref name="TChannel" /> can be built; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel factory.</param>
      <typeparam name="TChannel">The type of channel factory.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameOverTransportBindingElement">
      <summary>Creates a security binding element that is configured for client authentication based on a user name and password sent as part of the SOAP message. The binding element requires the transport to provide server authentication and message protection (for example, HTTPS).</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a specified object using the <see cref="T:System.ServiceModel.Channels.BindingContext" /> specified.</summary>
      <returns>The specified object from the <see cref="T:System.ServiceModel.Channels.BindingContext" />, or null if the object is not found.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T">The property to get.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.IncludeTimestamp">
      <summary>Gets or sets a value that indicates whether time stamps are included in each message.</summary>
      <returns>true if time stamps are included in each message; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.LocalClientSettings">
      <summary>Gets the binding properties specific to local security settings used by the client.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" /> that contains the settings for local client security.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement">
      <summary>The binding element that specifies the character encoding and message versioning used for text-based SOAP messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageVersion,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> class with a specified message version and encoding.</summary>
      <param name="messageVersion">The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used for the message version.</param>
      <param name="writeEncoding">The <see cref="T:System.Text.Encoding" /> that is used to format the message characters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageVersion" /> or <paramref name="writeEncoding" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> value is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel for a specified context.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> for the specified context.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.Clone">
      <summary>Creates a new <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> object initialized from the current one.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> object with property values equal to those of the current element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>Creates a factory for text message encoders that employs the message version and character encoding specified by the current encoding binding element.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> that this factory creates.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.MessageVersion">
      <summary>Gets or sets the SOAP and WS-Addressing versions that are used to format the text message.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used to format messages. The default value is <see cref="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10" />.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.WriteEncoding">
      <summary>Gets or sets the encoding that is used to format the characters in the text message.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> that is used to format the characters in the text message. The default text encoding is the UTF-8 format.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> value is not valid.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportBindingElement">
      <summary>An abstract base class that represents a transport binding element.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor">
      <summary>Creates a new instance of this class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor(System.ServiceModel.Channels.TransportBindingElement)">
      <summary>Creates a new instance of this class from an existing instance.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> to be cloned. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</summary>
      <returns>The property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</returns>
      <param name="context">A <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T">The property to get.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing">
      <summary>Gets or sets a value that indicates whether manual addressing of the message is required.</summary>
      <returns>true if manual addressing of the message is required; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize">
      <summary>Gets and sets the maximum allowable message size that can be received.</summary>
      <returns>The maximum allowable message size that can be received. The default is 65,536 bytes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value" /> set cannot be negative.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>Returns the URI scheme for the transport, which varies depending on which derived class implements this method.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportSecurityBindingElement">
      <summary>Represents a custom binding element that supports mixed-mode security (such as optimized message security over a secure transport).</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.#ctor">
      <summary>Creates an instance of the <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.Clone">
      <summary>Creates a new <see cref="T:System.ServiceModel.Channels.BindingElement" /> object initialized from the current class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BindingElement" /> object with property values equal to those of the current instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.OnClosed">
      <summary>Invoked during the transition of a communication object into the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a specified object from the <see cref="T:System.ServiceModel.Channels.BindingContext" />. This method gets the specified object from the base class, or from one of that class's ancestors.</summary>
      <param name="context">A <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the binding element stack.</summary>
      <returns>The typed object T requested if it is present or a null reference (Nothing in Visual Basic) if it is not.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the binding element.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Description.ClientCredentials">
      <summary>Enables the user to configure client credentials used to authenticate the client against a service.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ClientCredentials" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor(System.ServiceModel.Description.ClientCredentials)">
      <summary>Creates a copy of an existing <see cref="T:System.ServiceModel.Description.ClientCredentials" />. </summary>
      <param name="other">The <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance to be copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.Clone">
      <summary>Creates a new copy of this <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance.</returns>
      <exception cref="T:System.NotImplementedException">The current credentials are null or not correctly typed.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.CloneCore">
      <summary>Creates a new copy of this <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Adds this instance of this class to a binding parameter collection.</summary>
      <param name="serviceEndpoint">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to add.</param>
      <param name="bindingParameters">The collection of binding parameters.</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Applies the specified client behavior to the endpoint.</summary>
      <param name="serviceEndpoint">The endpoint to which the specified client behavior is to be applied.</param>
      <param name="behavior">The client behavior that is to be applied to the specified endpoint.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceEndpoint" /> or<paramref name=" behavior" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>Reserved for future use.</summary>
      <param name="serviceEndpoint">The target <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />.</param>
      <param name="endpointDispatcher">An <see cref="T:System.ServiceModel.Dispatcher.EndpointDispatcher" /> to apply.</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Reserved for future use.</summary>
      <param name="serviceEndpoint">The target <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />.</param>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.UserName">
      <summary>Gets a credential object that you can use to set the user name and password that the client uses to authenticate itself to a service. </summary>
      <returns>A <see cref="T:System.ServiceModel.Security.UserNamePasswordClientCredential" /> that represents the current user name and password of the client credential.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ContractDescription">
      <summary>Describes a contract that specifies what an endpoint communicates to the outside world.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ContractDescription" /> class with a specified name.</summary>
      <param name="name">The name of the contract.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ContractDescription" /> class with a namespace-qualified name specified.</summary>
      <param name="name">The name of the contract.</param>
      <param name="ns">The namespace that contains the name of the contract.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Behaviors">
      <summary>Gets the behaviors associated with the contract description.</summary>
      <returns>The <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> of type <see cref="T:System.ServiceModel.Description.IContractBehavior" /> associated with the contract description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.CallbackContractType">
      <summary>Gets or sets the type of callback contract that the contract description specifies.</summary>
      <returns>The <see cref="T:System.Type" /> of callback contract that the contract description specifies.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ConfigurationName">
      <summary>Gets or sets the configuration name for the contract description.</summary>
      <returns>The configuration name for the contract.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ContractType">
      <summary>Gets or sets the contract type that the contract description specifies.</summary>
      <returns>The contract <see cref="T:System.Type" /> that the contract description specifies.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Name">
      <summary>Gets or sets the name of the contract.</summary>
      <returns>The name of the contract description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Namespace">
      <summary>Gets or sets the namespace for the contract.</summary>
      <returns>The namespace of the contract.</returns>
      <exception cref="T:System.ArgumentNullException">The value set is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Operations">
      <summary>Gets the collection of operation descriptions associated with the contract.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.OperationDescriptionCollection" /> that contains the operation descriptions associated with the contract description.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescription">
      <summary>Represents a SOAP fault.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.FaultDescription.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.FaultDescription" /> class using the specified action value.</summary>
      <param name="action">The action of the SOAP fault message.</param>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Action">
      <summary>Gets the value of the action in the SOAP fault message.</summary>
      <returns>The action of the SOAP fault.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.DetailType">
      <summary>Gets or sets the type of the SOAP fault detail.</summary>
      <returns>The type of the serializable detail object.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Name">
      <summary>Gets or sets the name of the SOAP fault.</summary>
      <returns>The name of the SOAP fault.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Namespace">
      <summary>Gets or sets the namespace of the SOAP fault.</summary>
      <returns>The namespace of the SOAP fault.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescriptionCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Description.FaultDescription" /> objects that you can use to obtain information about SOAP faults in a contract.</summary>
    </member>
    <member name="T:System.ServiceModel.Description.IContractBehavior">
      <summary>Implements methods that can be used to extend run-time behavior for a contract in a Silverlight application.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Configures any binding elements to support the contract behavior.</summary>
      <param name="contractDescription">The contract description to modify.</param>
      <param name="endpoint">The endpoint to modify.</param>
      <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Implements a modification or extension of the client across a contract.</summary>
      <param name="contractDescription">The contract description for which the extension is intended.</param>
      <param name="endpoint">The endpoint.</param>
      <param name="clientRuntime">The client runtime.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
      <summary>This method is not used in the current implementation of Silverlight.</summary>
      <param name="contractDescription">The contract description to be modified.</param>
      <param name="endpoint">The endpoint that exposes the contract.</param>
      <param name="dispatchRuntime">The dispatch runtime that controls service execution.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Implement to confirm that the contract and endpoint can support the contract behavior.</summary>
      <param name="contractDescription">The contract to validate.</param>
      <param name="endpoint">The endpoint to validate.</param>
    </member>
    <member name="T:System.ServiceModel.Description.IEndpointBehavior">
      <summary>Implements methods that can be used to extend run-time behavior for an endpoint in a Silverlight application.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Implement to pass data at runtime to bindings to support custom behavior.</summary>
      <param name="endpoint">The endpoint to modify.</param>
      <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Implements a modification or extension of the client across an endpoint.</summary>
      <param name="endpoint">The endpoint that is to be customized.</param>
      <param name="clientRuntime">The client runtime to be customized.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>This method does not get invoked in Silverlight.</summary>
      <param name="endpoint">The endpoint that exposes the contract.</param>
      <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Implement to confirm that the endpoint meets some intended criteria.</summary>
      <param name="endpoint">The endpoint to validate.</param>
    </member>
    <member name="T:System.ServiceModel.Description.IOperationBehavior">
      <summary>Implements methods that can be used to extend run-time behavior for an operation in a Silverlight application.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Implement to pass data at runtime to bindings to support custom behavior.</summary>
      <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
      <param name="bindingParameters">The collection of objects that binding elements require to support the behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>Implements a modification or extension of the client across an operation.</summary>
      <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
      <param name="clientOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription" />.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>This method is not used with Silverlight 4 applications.</summary>
      <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
      <param name="dispatchOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription" />.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>Implement to confirm that the operation meets some intended criteria.</summary>
      <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessageBodyDescription">
      <summary>Represents the body of a SOAP message.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageBodyDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.MessageBodyDescription" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.Parts">
      <summary>Gets the parts for the body of the SOAP message.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.MessagePartDescriptionCollection" /> that contains the parts of the body of the SOAP message that you can inspect or modify.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.ReturnValue">
      <summary>Gets or sets the portion of the SOAP message that contains the return value.</summary>
      <returns>The return value, if any.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperName">
      <summary>Gets or sets the name of the wrapper element inside the SOAP body element if there is one.</summary>
      <returns>The name of the wrapper element if there is one; otherwise, null.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperNamespace">
      <summary>Gets or sets the namespace of the wrapper element in the SOAP body if there is one.</summary>
      <returns>The namespace of the wrapper element if there is one.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescription">
      <summary>Represents the description of a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescription.#ctor(System.String,System.ServiceModel.Description.MessageDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.MessageDescription" /> class with a specified action and direction.</summary>
      <param name="action">The action parameter of the SOAP message that identifies the intent of the message.</param>
      <param name="direction">
        <see cref="F:System.ServiceModel.Description.MessageDirection.Input" /> if the message is incoming or <see cref="F:System.ServiceModel.Description.MessageDirection.Output" /> if the message is outgoing.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="direction" /> is neither <see cref="F:System.ServiceModel.Description.MessageDirection.Input" /> or <see cref="F:System.ServiceModel.Description.MessageDirection.Output" />.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Action">
      <summary>Gets the action parameter of the SOAP message that identifies the intent of the message.</summary>
      <returns>The action URI.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Body">
      <summary>Gets the body of the SOAP message.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.MessagePartDescriptionCollection" /> that contains the body of the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Direction">
      <summary>Gets the direction that indicates whether the message is incoming or outgoing.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.MessageDirection" /> that indicates whether the message is incoming to or outgoing from the service.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.MessageType">
      <summary>Gets or sets a type that identifies the type of message contract.</summary>
      <returns>The type of the message contract.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescriptionCollection">
      <summary>Provides a collection that is used to store descriptions of the messages that make up an operation that belongs to a contract.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.Find(System.String)">
      <summary>Finds and returns the first message description in a collection for a message with a specified action.</summary>
      <returns>The first <see cref="T:System.ServiceModel.Description.MessageDescription" /> from the collection whose message has the specified <paramref name="action" /> and null if no matching <paramref name="action" /> is found.</returns>
      <param name="action">The action of the message being found.</param>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.FindAll(System.String)">
      <summary>Finds and returns all of the message descriptions in a collection whose messages have a specified action.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" /> that contains the collection message descriptions from the current collection whose messages have the specified <paramref name="action" />. If no matching <see cref="T:System.ServiceModel.Description.MessageDescription" /> objects are found, an empty collection is returned.</returns>
      <param name="action">The action of the messages being found.</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDirection">
      <summary>Specifies the direction of the message.</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Input">
      <summary>The message is incoming.</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Output">
      <summary>The message is outgoing.</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescription">
      <summary>Represents a description of a SOAP message part.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescription.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> class. </summary>
      <param name="name">The XML name of the message part.</param>
      <param name="ns">The XML namespace of the message part.</param>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Index">
      <summary>Gets or sets the index of the message part.</summary>
      <returns>The index of the message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.MemberInfo">
      <summary>Gets or sets the member information for the message part.</summary>
      <returns>The member information for this message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Name">
      <summary>Gets the name of the message part.</summary>
      <returns>The name of the message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Namespace">
      <summary>Gets the namespace of the message part.</summary>
      <returns>The namespace of the message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Type">
      <summary>Gets or sets the type of the message part.</summary>
      <returns>The type of the message part.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescriptionCollection">
      <summary>Represents a collection of <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessagePartDescription)">
      <summary>When called by a derived class, returns the <see cref="T:System.Xml.XmlQualifiedName" /> of the <see cref="T:System.ServiceModel.Description.MessagePartDescription" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> of the <see cref="T:System.ServiceModel.Description.MessagePartDescription" />.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> to locate.</param>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescription">
      <summary>A contract that characterizes an operation in terms of the messages it exchanges.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescription.#ctor(System.String,System.ServiceModel.Description.ContractDescription)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.OperationDescription" /> class with a specified name and contract description.</summary>
      <param name="name">The name of the operation description.</param>
      <param name="declaringContract">The <see cref="T:System.ServiceModel.Description.ContractDescription" /> used to initialize the operation description.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="declaringContract" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.BeginMethod">
      <summary>Gets or sets the begin method of the operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that provides access to the attributes and metadata of the method.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Behaviors">
      <summary>Gets or sets the operation behaviors associated with the operation.</summary>
      <returns>A <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> that contains the <see cref="T:System.ServiceModel.Description.IOperationBehavior" /> objects associated with the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.DeclaringContract">
      <summary>Gets or sets the contract to which the operation belongs.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ContractDescription" /> for the operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> set is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.EndMethod">
      <summary>Gets or sets the end method of the operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that provides access to the attributes and metadata of the method.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Faults">
      <summary>Gets a collection of the descriptions of the faults associated with the operation description.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.FaultDescriptionCollection" /> that contains details about the faults associated with the operation description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.IsOneWay">
      <summary>Gets a value that indicates whether an operation returns a reply message.</summary>
      <returns>true if this method receives a request message and returns no reply message; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.KnownTypes">
      <summary>Gets the known types associated with the operation description.</summary>
      <returns>The collection of known types associated with the operation description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Messages">
      <summary>Gets or sets the descriptions of the messages that make up the operation.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" /> that contains descriptions of the messages that make up the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Name">
      <summary>Gets or sets the name of the operation description.</summary>
      <returns>The name of the operation description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.SyncMethod">
      <summary>Gets or sets the service synchronization method of the operation description.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that provides access to the attributes and metadata of the method.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescriptionCollection">
      <summary>Represents a collection that contains operation descriptions.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.Find(System.String)">
      <summary>Returns the first occurrence of an operation description with a specified name from the collection of operation descriptions.</summary>
      <returns>The first occurrence of an <see cref="T:System.ServiceModel.Description.OperationDescription" /> with the name specified or null if there is no operation with the name specified.</returns>
      <param name="name">The name of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.FindAll(System.String)">
      <summary>Returns a collection of all the operation descriptions from the collection that have the specified name.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.ServiceModel.Description.OperationDescription" /> that contains all of the operation descriptions with the specified name.</returns>
      <param name="name">The name of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.InsertItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>Inserts an element into the operation description collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Description.OperationDescription" /> to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.SetItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>Replaces the operation description element in the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Description.OperationDescription" /> to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceEndpoint">
      <summary>Represents the endpoint for a service that allows clients of the service to find and communicate with the service.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> class for a specified contract.</summary>
      <param name="contract">The <see cref="T:System.ServiceModel.Description.ContractDescription" /> for the service endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> class with a specified contract, binding, and address.</summary>
      <param name="contract">The <see cref="T:System.ServiceModel.Description.ContractDescription" /> for the service endpoint.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> that specifies how the service endpoint communicates with the world.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> for the service endpoint.</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Address">
      <summary>Gets or sets the endpoint address for the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> that specifies the location of the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Behaviors">
      <summary>Gets the behaviors for the service endpoint.</summary>
      <returns>The <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> of type <see cref="T:System.ServiceModel.Description.IEndpointBehavior" /> that contains the behaviors specified for the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Binding">
      <summary>Gets or sets the binding for the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Binding" /> for the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Contract">
      <summary>Gets the contract for the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ContractDescription" /> that specifies the contract for the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Name">
      <summary>Gets or sets the name of the service endpoint.</summary>
      <returns>The name of the service endpoint. The default value is the concatenation of the binding name and the contract description name. For example, <see cref="P:System.ServiceModel.Channels.Binding.Name" /> + '_' + <see cref="P:System.ServiceModel.Description.ContractDescription.Name" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientOperation">
      <summary>Used to modify or extend the execution behavior of a specific contract operation in a client object or client channel object. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> class using the specified <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />, name, and action values. </summary>
      <param name="parent">The containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</param>
      <param name="name">The name of the operation.</param>
      <param name="action">The action of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> class using the specified <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />, name, action, and reply action values. </summary>
      <param name="parent">The containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</param>
      <param name="name">The name of the operation.</param>
      <param name="action">The action of the operation.</param>
      <param name="replyAction">The action of the reply message.</param>
      <exception cref="T:::System.ArgumentNullException">
        <paramref name="Parent" /> or <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Action">
      <summary>Gets the action of the operation.</summary>
      <returns>The action of the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod">
      <summary>Gets or sets the method associated with an asynchronous operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the method handling the begin portion of an asynchronous method pair, or null if the operation is not part of an asynchronous method pair.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply">
      <summary>Gets or sets a value that indicates whether the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> property value is used to deserialize the reply message.</summary>
      <returns>true if the return type is not a <see cref="T:System.ServiceModel.Channels.Message" />; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod">
      <summary>Gets or sets the method that implements the asynchronous end method for the operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents the end method for the operation, or null if the operation is not asynchronous.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter">
      <summary>Gets or sets the formatter that serializes objects into messages and deserializes messages into objects.</summary>
      <returns>An <see cref="T:System.ServiceModel.Dispatcher.IClientMessageFormatter" /> implementation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsInitiating">
      <summary>Gets or sets a value that indicates whether a session can be started by a message to this operation.</summary>
      <returns>true if a message to this operation can initiate a session; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsOneWay">
      <summary>Gets or sets a value that indicates whether the operation is a one-way operation.</summary>
      <returns>true if the WCF client should not expect a reply; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsTerminating">
      <summary>Gets or sets a value that indicates whether this operation is the last one in a session.</summary>
      <returns>true if the associated session is closed after the operation is invoked; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Name">
      <summary>Gets the name of the operation.</summary>
      <returns>The name of the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors">
      <summary>Gets a list of <see cref="T:System.ServiceModel.Dispatcher.IParameterInspector" /> objects that can inspect and modify inbound and outbound objects for a particular client method.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.ServiceModel.Dispatcher.IParameterInspector" /> objects.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Parent">
      <summary>Gets the containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</summary>
      <returns>The containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ReplyAction">
      <summary>Gets the action of the reply message for this operation.</summary>
      <returns>The action of the reply.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest">
      <summary>Gets or sets a value that specifies whether the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> object serializes an outbound message.</summary>
      <returns>true if the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> property serializes the return values into a reply message; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SyncMethod">
      <summary>Gets or sets the method that is associated with this operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents the method that implements the operation. If the operation is asynchronous, this value is null and the implementing methods are stored in the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod" /> and <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod" /> properties.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientRuntime">
      <summary>The insertion point for classes that extend the functionality of Silverlight client objects for all messages handled by a client application.</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractClientType">
      <summary>Gets the type of the contract associated with the client.</summary>
      <returns>The <see cref="T:System.Type" /> object that represents the contract associated with this client.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractName">
      <summary>Gets the name of the contract associated with the client.</summary>
      <returns>The contract name used for this client.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractNamespace">
      <summary>Gets the namespace of the contract associated with the client.</summary>
      <returns>The namespace of the contract associated with this client.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing">
      <summary>Gets or sets a value that indicates whether the client adds addressing headers to request-reply messages.</summary>
      <returns>true if the client does not add any addressing headers; otherwise, false. The default value is false. </returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MaxFaultSize">
      <summary>Gets or sets the maximum fault message size. </summary>
      <returns>The maximum fault size. The default value is 64 KB.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors">
      <summary>Gets a list of message inspector implementations for a client.</summary>
      <returns>An<see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.ServiceModel.Dispatcher.IClientMessageInspector" /> implementations.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageVersionNoneFaultsEnabled">
      <summary>Gets or sets a value that indicates the message version none and faults are enabled.</summary>
      <returns>true if the message version none and faults are enabled; otherwise false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.Operations">
      <summary>Gets a collection of client operations for a client.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> of <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> objects.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.OperationSelector">
      <summary>Gets or sets a <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> implementation that can be used to select a <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />.</summary>
      <returns>An <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> object that selects a <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.UnhandledClientOperation">
      <summary>Gets the client operation for methods that do not have a corresponding <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> in the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.Operations" /> collection.</summary>
      <returns>A <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> that represents the method to which the current message contents are routed when the operation selector cannot find an operation that matches the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.Via">
      <summary>Gets or sets the transport address that is used to send messages through the client.</summary>
      <returns>A <see cref="T:System.Uri" /> that is the destination address for the transport. The default value is the <see cref="P:System.ServiceModel.EndpointAddress.Uri" /> value of the client.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.DispatchOperation">
      <summary>Used to modify or extend the execution behavior of a specific operation at an endpoint. In Silverlight this class modifies the execution operations that are part of a duplex callback contract. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.DispatchOperation.#ctor(System.ServiceModel.Dispatcher.DispatchRuntime,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> class using the specified dispatch runtime, name, and action values.</summary>
      <param name="parent">The associated <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> object.</param>
      <param name="name">The name of the dispatch operation. This is used as the key to the <see cref="P:System.ServiceModel.Dispatcher.DispatchRuntime.Operations" /> collection.</param>
      <param name="action">The message action for which this dispatch operation is being created.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Action">
      <summary>Gets the value of the action for this operation.</summary>
      <returns>The value of the action for this operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.AutoDisposeParameters">
      <summary>Gets or sets whether parameters are to be automatically disposed.</summary>
      <returns>true if the parameters are to be automatically disposed; otherwise false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.DeserializeRequest">
      <summary>Gets or sets a value that indicates whether the <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> property value is used to deserialize the request message.</summary>
      <returns>false if the return type is of type <see cref="T:System.ServiceModel.Channels.Message" /> and there are no out parameters; otherwise, true.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter">
      <summary>Gets or sets the formatter maps between objects and messages: it is used to deserialize messages into objects and to serialize objects into messages.</summary>
      <returns>An <see cref="T:System.ServiceModel.Dispatcher.IDispatchMessageFormatter" /> implementation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.IsOneWay">
      <summary>Gets a value that indicates if the operation is a one-way operation.</summary>
      <returns>true if the operation has only an input; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Name">
      <summary>Gets the name of the operation.</summary>
      <returns>The name of the operation. This is used as the key to the <see cref="P:System.ServiceModel.Dispatcher.DispatchRuntime.Operations" /> collection.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Parent">
      <summary>Gets the associated <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> object.</summary>
      <returns>The associated <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.SerializeReply">
      <summary>Gets or sets a value that specifies whether the <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> object serializes reply messages.</summary>
      <returns>true if the <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> property serializes the return values into a reply message; otherwise, false. </returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.DispatchRuntime">
      <summary>Exposes properties that can be used to modify default behavior as well as attach custom objects that can modify how incoming messages are transformed into objects and dispatched to callback operations, when a Silverlight client is using a duplex contract. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.UnhandledDispatchOperation">
      <summary>Gets or sets the operation to which unrecognized messages are dispatched. </summary>
      <returns>The <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> to which unrecognized messages are dispatched.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> set is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.EndpointDispatcher">
      <summary>This class is not supported in the current release of Silverlight. It is present for compatibility reasons.</summary>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.FaultContractInfo">
      <summary>Represents information about a SOAP fault that is specified in a <see cref="T:System.ServiceModel.FaultContractAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FaultContractInfo.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.FaultContractInfo" /> class that uses the specified action and detail type.</summary>
      <param name="action">The action of the SOAP fault.</param>
      <param name="detail">The detail type that is serialized as the SOAP fault detail.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FaultContractInfo.Action">
      <summary>Gets the SOAP fault action value.</summary>
      <returns>The SOAP fault action value.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FaultContractInfo.Detail">
      <summary>The type of the object that is serialized as the SOAP fault detail.</summary>
      <returns>The <see cref="T:System.Type" /> that represents the serialized SOAP fault detail.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageFormatter">
      <summary>Defines methods that are used to control the conversion of messages into objects and objects into messages for client applications.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.DeserializeReply(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>Converts a message into a return value and <paramref name="out" /> parameters that are passed back to the calling operation.</summary>
      <returns>The return value of the operation.</returns>
      <param name="message">The inbound message.</param>
      <param name="parameters">Any <paramref name="out" /> values.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.SerializeRequest(System.ServiceModel.Channels.MessageVersion,System.Object[])">
      <summary>Converts an <see cref="T:System.Object" /> array into an outbound <see cref="T:System.ServiceModel.Channels.Message" />. </summary>
      <returns>The SOAP message sent to the service operation.</returns>
      <param name="messageVersion">The version of the SOAP message to use.</param>
      <param name="parameters">The parameters passed to the Silverlight client operation.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
      <summary>Defines a message inspector object that can be added to the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> collection to view or modify messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
      <summary>Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</summary>
      <param name="reply">The message to be transformed into types and handed back to the client application.</param>
      <param name="correlationState">Correlation state data.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
      <summary>Enables inspection or modification of a message before a request message is sent to a service.</summary>
      <returns>The object that is returned as the <paramref name="correlationState " />argument of the <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> method. This is null if no correlation state is used.The best practice is to make this a <see cref="T:System.Guid" /> to ensure that no two <paramref name="correlationState" /> objects are the same.</returns>
      <param name="request">The message to be sent to the service.</param>
      <param name="channel">The Silverlight client object channel.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientOperationSelector">
      <summary>Defines the contract for an operation selector.</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.IClientOperationSelector.AreParametersRequiredForSelection">
      <summary>Gets a value that indicates whether parameters are required to determine the selection.</summary>
      <returns>true if parameters are required; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientOperationSelector.SelectOperation(System.Reflection.MethodBase,System.Object[])">
      <summary>Returns the selected operation.</summary>
      <returns>The operation selected by the custom operation selector.</returns>
      <param name="method">The method invoked.</param>
      <param name="parameters">The parameters passed to the method.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IDispatchMessageFormatter">
      <summary>Defines methods that deserialize request messages and serialize response messages in an application.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageFormatter.DeserializeRequest(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>Deserializes a message into an array of parameters.</summary>
      <param name="message">The incoming message.</param>
      <param name="parameters">The array of objects that are passed to the operation as parameters.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageFormatter.SerializeReply(System.ServiceModel.Channels.MessageVersion,System.Object[],System.Object)">
      <summary>Serializes a reply message from a specified message version, an array of parameters, and a return value.</summary>
      <returns>The serialized reply <see cref="T:System.ServiceModel.Channels.Message" />.</returns>
      <param name="messageVersion">The SOAP message version.</param>
      <param name="parameters">The array of out parameters.</param>
      <param name="result">The return value.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IParameterInspector">
      <summary>Defines the contract implemented by custom parameter inspectors that enables the inspection or modification of information prior to and subsequent to calls on the client.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
      <summary>Called after client calls are returned and before service responses are sent.</summary>
      <param name="operationName">The name of the invoked operation.</param>
      <param name="outputs">Any output objects.</param>
      <param name="returnValue">The return value of the operation.</param>
      <param name="correlationState">Any correlation state returned from the <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> method, or null. </param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
      <summary>Called before client calls are sent and after service responses are returned.</summary>
      <returns>The correlation state that is returned as the <paramref name="correlationState" /> parameter in <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />. Return null if you do not intend to use correlation state.</returns>
      <param name="operationName">The name of the operation.</param>
      <param name="inputs">The objects passed to the method by the client.</param>
    </member>
    <member name="T:System.ServiceModel.Security.MessageSecurityException">
      <summary>Represents an exception that occurs when there is something wrong with the security that has been applied to a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> class with a specified error message.</summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> class with an error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception reference.</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityAccessDeniedException">
      <summary>Represents the security exception that is thrown when a security authorization request fails.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> class using a specified message.</summary>
      <param name="message">A description of the error condition.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> class using a specified message and the inner exception.</summary>
      <param name="message">A description of the error condition.</param>
      <param name="innerException">The inner exception to be used.</param>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordClientCredential">
      <summary>Represents a client credential based on user name and password.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.Password">
      <summary>Gets or sets the password.</summary>
      <returns>The password.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.UserName">
      <summary>Gets or sets the user name.</summary>
      <returns>The user name.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> class.</summary>
    </member>
  </members>
</doc>