<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid">
      <summary>[SECURITY CRITICAL] Provides a base class for Win32 critical handle implementations in which the value of -1 indicates an invalid handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid" /> class.</summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid">
      <summary>[SECURITY CRITICAL] Gets a value that indicates whether the handle is invalid.</summary>
      <returns>true if the handle is not valid; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
      <summary>[SECURITY CRITICAL] Provides a base class for Win32 safe handle implementations in which the value of -1 indicates an invalid handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid" /> class, specifying whether the handle is to be reliably released. </summary>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid">
      <summary>[SECURITY CRITICAL] Gets a value that indicates whether the handle is invalid.</summary>
      <returns>true if the handle is not valid; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
      <summary>[SECURITY CRITICAL] Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" /> class, specifying whether the handle is to be reliably released. </summary>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid">
      <summary>[SECURITY CRITICAL] Gets a value that indicates whether the handle is invalid.</summary>
      <returns>true if the handle is not valid; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeWaitHandle">
      <summary>[SECURITY CRITICAL] Represents a wrapper class for a wait handle. </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> class. </summary>
      <param name="existingHandle">An <see cref="T:System.IntPtr" /> object that represents the pre-existing handle to use.</param>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="T:System.AccessViolationException">
      <summary>The exception that is thrown when there is an attempt to read or write protected memory.</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Action">
      <summary>Encapsulates a method that takes no parameters and does not return a value.</summary>
    </member>
    <member name="T:System.Action`1">
      <summary>Encapsulates a method that takes a single parameter and does not return a value.</summary>
      <param name="obj">The parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`5">
      <summary>Encapsulates a method that has five parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`6">
      <summary>Encapsulates a method that has six parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`7">
      <summary>Encapsulates a method that has seven parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`8">
      <summary>Encapsulates a method that has eight parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Activator">
      <summary>Contains methods to create types of objects locally. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>Creates an instance of the type designated by the specified generic type parameter, using the parameterless constructor.</summary>
      <returns>A reference to the newly created object.</returns>
      <typeparam name="T">The type to create.</typeparam>
      <exception cref="T:System.MissingMethodException">The type that is specified for <paramref name="T" /> does not have a parameterless constructor.</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>Creates an instance of the specified type by using that type's default constructor.</summary>
      <returns>A reference to the newly created object.</returns>
      <param name="type">The type of object to create. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a RuntimeType. -or-<paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or- Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor. </exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type. </exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>Creates an instance of the specified type by using the constructor that best matches the specified parameters.</summary>
      <returns>A reference to the newly created object.</returns>
      <param name="type">The type of object to create. </param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a RuntimeType. -or-<paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or- Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported. -or-The constructor that best matches <paramref name="args" /> has varargs arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor. </exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type. </exception>
    </member>
    <member name="T:System.AppDomain">
      <summary>Represents an application domain, which is an isolated environment where applications execute. This class cannot be inherited.</summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>[SECURITY CRITICAL] Occurs when the resolution of an assembly fails.</summary>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>Gets the current application domain for the current <see cref="T:System.Threading.Thread" />.</summary>
      <returns>The current application domain.</returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>Defines a dynamic assembly with the specified name and access mode.</summary>
      <returns>The dynamic assembly created.</returns>
      <param name="name">The unique identity of the dynamic assembly. </param>
      <param name="access">The access mode for the dynamic assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The Name property of <paramref name="name" /> is null.-or- The Name property of <paramref name="name" /> begins with white space, or contains a forward or backward slash. </exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain. </exception>
    </member>
    <member name="P:System.AppDomain.DomainManager">
      <summary>[SECURITY CRITICAL] Gets the domain manager that was provided by the host when the application domain was initialized.</summary>
      <returns>An <see cref="T:System.AppDomainManager" /> object that represents the domain manager provided by the host when the application domain was initialized, or null if no domain manager was provided.</returns>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>[SECURITY CRITICAL] Executes an assembly given its display name.</summary>
      <returns>The value returned by the entry point of the assembly.</returns>
      <param name="assemblyName">The display name of the assembly. See <see cref="P:System.Reflection.Assembly.FullName" />.</param>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>Gets the friendly name of this application domain.</summary>
      <returns>The friendly name of this application domain.</returns>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain. </exception>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>[SECURITY CRITICAL] Gets the value stored in the current application domain for the specified name.</summary>
      <returns>The value of the <paramref name="name" /> property.</returns>
      <param name="name">The name of a predefined application domain property, or the name of an application domain property you have defined. </param>
    </member>
    <member name="M:System.AppDomain.GetType">
      <summary>Gets the type of the current instance.</summary>
      <returns>A <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
      <summary>Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.</summary>
      <returns>null if no compatibility switches are set; otherwise, a Boolean value that indicates whether the compatibility switch that is specified by <paramref name="value" /> is set.</returns>
      <param name="value">The compatibility switch to test.</param>
    </member>
    <member name="P:System.AppDomain.MonitoringIsEnabled">
      <summary>[SECURITY CRITICAL] Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process. Once monitoring is enabled for a process, it cannot be disabled.</summary>
      <returns>true if monitoring is enabled; otherwise false.</returns>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedMemorySize">
      <summary>[SECURITY CRITICAL] Gets the number of bytes that survived the last full, blocking collection and that are known to be referenced by the current application domain.</summary>
      <returns>The number of surviving bytes.</returns>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
      <summary>[SECURITY CRITICAL] Gets the total bytes that survived from the last full, blocking collection for all application domains in the process.</summary>
      <returns>The total number of surviving bytes for the process.</returns>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
      <summary>[SECURITY CRITICAL] Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected. </summary>
      <returns>The total size of all memory allocations.</returns>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalProcessorTime">
      <summary>[SECURITY CRITICAL] Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.</summary>
      <returns>Total processor time for the current application domain.</returns>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>[SECURITY CRITICAL] Assigns the specified value to the specified application domain property.</summary>
      <param name="name">The name of a user-defined application domain property to create or change. </param>
      <param name="data">The value of the property. </param>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>Obtains a string representation that includes the friendly name of the application domain and any context policies.</summary>
      <returns>A string formed by concatenating the literal string "Name:", the friendly name of the application domain, and either string representations of the context policies or the string "There are no context policies." </returns>
      <exception cref="T:System.AppDomainUnloadedException">The application domain represented by the current <see cref="T:System.AppDomain" /> has been unloaded.</exception>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>[SECURITY CRITICAL] Occurs when an exception is not caught.</summary>
    </member>
    <member name="T:System.AppDomainManager">
      <summary>[SECURITY CRITICAL] Provides a managed equivalent of an unmanaged host.</summary>
    </member>
    <member name="M:System.AppDomainManager.#ctor">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.AppDomainManager" /> class. </summary>
    </member>
    <member name="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
      <summary>[SECURITY CRITICAL] Returns a <see cref="T:System.Boolean" /> indicating whether the specified operation is allowed in the application domain.</summary>
      <returns>true if the host allows the operation specified by <paramref name="state" /> to be performed in the application domain; otherwise false.</returns>
      <param name="state">A subclass of <see cref="T:System.Security.SecurityState" /> that identifies the operation whose security status is requested. </param>
    </member>
    <member name="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
      <summary>[SECURITY CRITICAL] Initializes the new application domain.</summary>
      <param name="appDomainInfo">An <see cref="T:System.AppDomainSetup" /> object that contains application domain initialization information.</param>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>Represents assembly binding information that can be added to an instance of <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="M:System.AppDomainSetup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainSetup" /> class.</summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
      <summary>[SECURITY CRITICAL] Gets or sets the name of the directory containing the application.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of the application base directory.</returns>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationName">
      <summary>Gets or sets the name of the application.</summary>
      <returns>A <see cref="T:System.String" /> that is the name of the application.</returns>
    </member>
    <member name="P:System.AppDomainSetup.LoaderOptimization">
      <summary>Gets the optimization policy used to load an executable.</summary>
      <returns>The optimization policy for the application domain.</returns>
    </member>
    <member name="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Sets the specified switches, making the application domain compatible with previous versions of the .NET Framework for the specified issues.</summary>
      <param name="switches">An enumerable set of string values that specify compatibility switches, or null to erase the existing compatibility switches.</param>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>The exception that is thrown when an attempt is made to access an unloaded application domain. </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class.</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ArgumentException">
      <summary>The exception that is thrown when one of the arguments provided to a method is not valid.</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="paramName">The name of the parameter that caused the current exception. </param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>Gets the error message and the parameter name, or only the error message if no parameter name is set.</summary>
      <returns>A text string describing the details of the exception. The value of this property takes one of two forms: Condition Value The <paramref name="paramName" /> is a null reference (Nothing in Visual Basic) or of zero length. The <paramref name="message" /> string passed to the constructor. The <paramref name="paramName" /> is not a null reference (Nothing in Visual Basic) and it has a length greater than zero. The <paramref name="message" /> string appended with the name of the invalid parameter. </returns>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument. </summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that caused the exception. </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with a specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for this exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>Initializes an instance of the <see cref="T:System.ArgumentNullException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that caused the exception. </param>
      <param name="message">A message that describes the error. </param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that causes this exception. </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with a specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for this exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that caused the exception. </param>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>Gets the error message and the string representation of the invalid argument value, or only the error message if the argument value is null.</summary>
      <returns>The text message for this exception. The value of this property takes one of two forms, as follows.Condition Value The <paramref name="actualValue" /> is null. The <paramref name="message" /> string passed to the constructor. The <paramref name="actualValue" /> is not null. The <paramref name="message" /> string appended with the string representation of the invalid argument value. </returns>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>The exception that is thrown for errors in an arithmetic, casting, or conversion operation.</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class.</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Array">
      <summary>Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime. </summary>
    </member>
    <member name="M:System.Array.AsReadOnly``1(``0[])">
      <summary>Returns a read-only wrapper for the specified array.</summary>
      <returns>A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the specified array.</returns>
      <param name="array">The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />  wrapper. </param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the specified <see cref="T:System.Collections.IComparer" /> interface.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.-or- null to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.-or-<paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a specific element, using the <see cref="T:System.IComparable" /> interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified value.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.-or-<paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.-or- null to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.-or-<paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a specific element, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.  </param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.-or- null to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>Sets a range of elements in the <see cref="T:System.Array" /> to zero, to false, or to null, depending on the element type.</summary>
      <param name="array">The <see cref="T:System.Array" /> whose elements need to be cleared.</param>
      <param name="index">The starting index of the range of elements to clear.</param>
      <param name="length">The number of elements to clear.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.-or-The sum of <paramref name="index" /> and <paramref name="length" /> is greater than the size of the <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Array" />.</summary>
      <returns>A shallow copy of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">The <paramref name="sourceArray" /> type is neither the same as nor derived from the <paramref name="destinationArray" /> type.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.-or-<paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 32-bit integer.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.-or-<paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>Copies all the elements of the current one-dimensional <see cref="T:System.Array" /> to the specified one-dimensional <see cref="T:System.Array" /> starting at the specified destination <see cref="T:System.Array" /> index. The index is specified as a 32-bit integer.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the current <see cref="T:System.Array" />.</param>
      <param name="index">A 32-bit integer that represents the index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Array" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">The source <see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>Creates a one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and length, with zero-based indexing.</summary>
      <returns>A new one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length, using zero-based indexing.</returns>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length">The size of the <see cref="T:System.Array" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.-or-<paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.</summary>
      <returns>A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</returns>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">An array of 32-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is null.-or-<paramref name="lengths" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.-or-The <paramref name="lengths" /> array contains less than one element.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported. -or-<paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any value in <paramref name="lengths" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
      <summary>Performs the specified action on each element of the specified array.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> on whose elements the action is to be performed.</param>
      <param name="action">The <see cref="T:System.Action`1" /> to perform on each element of <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.-or-<paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</summary>
      <returns>A 32-bit integer that represents the number of elements in the specified dimension.</returns>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.-or-<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>Gets the lower bound of the specified dimension in the <see cref="T:System.Array" />.</summary>
      <returns>The lower bound of the specified dimension in the <see cref="T:System.Array" />.</returns>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose lower bound needs to be determined.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.-or-<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>Gets the upper bound of the specified dimension in the <see cref="T:System.Array" />.</summary>
      <returns>The upper bound of the specified dimension in the <see cref="T:System.Array" />.</returns>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose upper bound needs to be determined.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.-or-<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 32-bit integer.</summary>
      <returns>The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</returns>
      <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 32-bit integers.</summary>
      <returns>The value at the specified position in the multidimensional <see cref="T:System.Array" />.</returns>
      <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
      <returns>The index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, the lower bound of the array minus 1.</returns>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>Searches for the specified object and returns the index of the first occurrence within the entire <see cref="T:System.Array" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>Initializes every element of the value-type <see cref="T:System.Array" /> by calling the default constructor of the value type.</summary>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Array" /> has a fixed size.</summary>
      <returns>This property is always true for all arrays.</returns>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Array" /> is read-only.</summary>
      <returns>This property is always false for all arrays.</returns>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Array" /> is synchronized (thread safe).</summary>
      <returns>This property is always false for all arrays.</returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
      <returns>The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</returns>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the entire <see cref="T:System.Array" />.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>Gets a 32-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />; zero if there are no elements in the array.</summary>
      <returns>A 32-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="P:System.Array.Rank">
      <summary>Gets the zero-based rank (number of dimensions) of the <see cref="T:System.Array" />.</summary>
      <returns>The zero-based rank (number of dimensions) of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>Changes the number of elements of an array to the specified new size.</summary>
      <param name="array">The one-dimensional, zero-based array to resize, or null to create a new array with the specified size.</param>
      <param name="newSize">The size of the new array.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>Reverses the sequence of the elements in a range of elements in the one-dimensional <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
      <param name="index">The starting index of the section to reverse.</param>
      <param name="length">The number of elements in the section to reverse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 32-bit integer.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 32-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>Sorts the elements in an entire one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.-or-null to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.-or-null to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.-or-The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.-or-null to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.-or-null to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.-or-The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.-or-<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.-or-<paramref name="items" /> is not null, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.-or-null to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.-or-null to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>Sorts the elements in an entire <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison`1" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
      <param name="comparison">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.-or-<paramref name="comparison" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.-or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.-or-<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.-or-<paramref name="items" /> is not null, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.-or-<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.-or-<paramref name="items" /> is not null, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="P:System.Array.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Array" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Array" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>Implements <see cref="M:System.Collections.IList.Add(System.Object)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.</summary>
      <returns>An exception is always thrown.</returns>
      <param name="value">The object to be added to the <see cref="T:System.Array" />.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>Sets all elements in the <see cref="T:System.Array" /> to zero, to false, or to null, depending on the element type.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Array" /> is read-only.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether an element is in the <see cref="T:System.Array" />.</summary>
      <returns>true if <paramref name="value" /> is found in the <see cref="T:System.Array" />; otherwise, false.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Array" />. The element to locate can be null for reference types.</param>
      <exception cref="T:System.RankException">The current <see cref="T:System.Array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>Searches for the specified object and returns the index of the first occurrence within the current one-dimensional instance.</summary>
      <returns>The index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Array" />, if found; otherwise, the lower bound of the <see cref="T:System.Array" /> minus 1.</returns>
      <param name="value">The object to locate in the current <see cref="T:System.Array" />.</param>
      <exception cref="T:System.RankException">The current <see cref="T:System.Array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Implements <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.</summary>
      <param name="index">The index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ICollection.Count" />.</exception>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>Implements <see cref="M:System.Collections.IList.Remove(System.Object)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Array" />.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Implements <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.</summary>
      <param name="index">The index of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</summary>
      <returns>An integer that indicates the relationship of the current collection object to other, as shown in the following table.Return valueDescription-1The current instance precedes <paramref name="other" />.0The current instance and <paramref name="other" /> are equal.1The current instance follows <paramref name="other" />.</returns>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that compares the current object and <paramref name="other" />.</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determines whether an object is equal to the current instance.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that determines whether the current instance and <paramref name="other" /> are equal. </param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Returns a hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
      <param name="comparer">An object that computes the hash code of the current object.</param>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>Delimits a section of a one-dimensional array.</summary>
      <typeparam name="T">The type of the elements in the array segment.</typeparam>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>Initializes a new instance of the <see cref="T:System.ArraySegment`1" /> structure that delimits all the elements in the specified array.</summary>
      <param name="array">The array to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ArraySegment`1" /> structure that delimits the specified range of the elements in the specified array.</summary>
      <param name="array">The array containing the range of elements to delimit.</param>
      <param name="offset">The zero-based index of the first element in the range.</param>
      <param name="count">The number of elements in the range.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> do not specify a valid range in <paramref name="array" />.</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>Gets the original array containing the range of elements that the array segment delimits.</summary>
      <returns>The original array that was passed to the constructor, and that contains the range delimited by the <see cref="T:System.ArraySegment`1" />.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>Gets the number of elements in the range delimited by the array segment.</summary>
      <returns>The number of elements in the range delimited by the <see cref="T:System.ArraySegment`1" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>Determines whether the specified <see cref="T:System.ArraySegment`1" /> structure is equal to the current instance.</summary>
      <returns>true if the specified <see cref="T:System.ArraySegment`1" /> structure is equal to the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.ArraySegment`1" /> structure to be compared with the current instance.</param>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current instance.</summary>
      <returns>true if the specified object is a <see cref="T:System.ArraySegment`1" /> structure and is equal to the current instance; otherwise, false.</returns>
      <param name="obj">The object to be compared with the current instance.</param>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.</summary>
      <returns>The position of the first element in the range delimited by the <see cref="T:System.ArraySegment`1" />, relative to the start of the original array.</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>Indicates whether two <see cref="T:System.ArraySegment`1" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.ArraySegment`1" /> structure on the left side of the equality operator.</param>
      <param name="b">The <see cref="T:System.ArraySegment`1" /> structure on the right side of the equality operator.</param>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>Indicates whether two <see cref="T:System.ArraySegment`1" /> structures are unequal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.ArraySegment`1" /> structure on the left side of the inequality operator.</param>
      <param name="b">The <see cref="T:System.ArraySegment`1" /> structure on the right side of the inequality operator.</param>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>The exception that is thrown when an attempt is made to store an element of the wrong type within an array. </summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class.</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>References a method to be called when a corresponding asynchronous operation is completed.</summary>
      <param name="ar">The result of the asynchronous operation. </param>
    </member>
    <member name="T:System.Attribute">
      <summary>Represents the base class for custom attributes.</summary>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Attribute" /> class.</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance or null. </param>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>Retrieves a custom attribute applied to a specified assembly. Parameters specify the assembly and the type of the custom attribute to search for.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <param name="type">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="type" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <param name="type">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="type" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <summary>Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an ignored search option.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Reflection.ParameterInfo.Member" />  property of <paramref name="element" /> is null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <summary>Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option. </summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.ExecutionEngineException">
        <paramref name="element" /> is not a method, constructor, or type. </exception>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <summary>When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.</summary>
      <returns>true if this instance equals <paramref name="obj" />; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance of <see cref="T:System.Attribute" />. </param>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>Specifies the application elements on which it is valid to apply an attribute.</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>Attribute can be applied to an assembly.</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>Attribute can be applied to a module.</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>Attribute can be applied to a class.</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>Attribute can be applied to a structure; that is, a value type.</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>Attribute can be applied to an enumeration.</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>Attribute can be applied to a constructor.</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>Attribute can be applied to a method.</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>Attribute can be applied to a property.</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>Attribute can be applied to a field.</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>Attribute can be applied to an event.</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>Attribute can be applied to an interface.</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>Attribute can be applied to a parameter.</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>Attribute can be applied to a delegate.</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>Attribute can be applied to a return value.</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>Attribute can be applied to a generic parameter.</summary>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>Attribute can be applied to any application element.</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>Specifies the usage of another attribute class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>Initializes a new instance of the <see cref="T:System.AttributeUsageAttribute" /> class with the specified list of <see cref="T:System.AttributeTargets" />, the <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> value, and the <see cref="P:System.AttributeUsageAttribute.Inherited" /> value.</summary>
      <param name="validOn">The set of values combined using a bitwise OR operation to indicate which program elements are valid. </param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</summary>
      <returns>true if more than one instance is allowed to be specified; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>Gets or sets a Boolean value indicating whether the indicated attribute can be inherited by derived classes and overriding members.</summary>
      <returns>true if the attribute can be inherited by derived classes and overriding members; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</summary>
      <returns>One or several <see cref="T:System.AttributeTargets" /> values. The default is All.</returns>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>The exception that is thrown when the file image of a DLL or an executable program is invalid. </summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class.</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>Gets the error message and the name of the file that caused this exception.</summary>
      <returns>A string containing the error message and the name of the file that caused this exception.</returns>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>Returns the fully qualified name of this exception and possibly the error message and the name of the inner exception.</summary>
      <returns>A string containing the fully qualified name of this exception and possibly the error message and the name of the inner exception.</returns>
    </member>
    <member name="T:System.BitConverter">
      <summary>Converts base data types to an array of bytes, and an array of bytes to base data types.</summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>Converts the specified double-precision floating point number to a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer whose value is equivalent to <paramref name="value" />.</returns>
      <param name="value">The number to convert.</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>Returns the specified Boolean value as an array of bytes.</summary>
      <returns>An array of bytes with length 1.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>Returns the specified Unicode character value as an array of bytes.</summary>
      <returns>An array of bytes with length 2.</returns>
      <param name="value">A character to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>Returns the specified double-precision floating point value as an array of bytes.</summary>
      <returns>An array of bytes with length 8.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>Returns the specified 16-bit signed integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 2.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>Returns the specified 32-bit signed integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 4.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>Returns the specified 64-bit signed integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 8.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>Returns the specified single-precision floating point value as an array of bytes.</summary>
      <returns>An array of bytes with length 4.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>Returns the specified 16-bit unsigned integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 2.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>Returns the specified 32-bit unsigned integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 4.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>Returns the specified 64-bit unsigned integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 8.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>Converts the specified 64-bit signed integer to a double-precision floating point number.</summary>
      <returns>A double-precision floating point number whose value is equivalent to <paramref name="value" />.</returns>
      <param name="value">The number to convert.</param>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>Indicates the byte order ("endianess") in which data is stored in this computer architecture.</summary>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>Returns a Boolean value converted from one byte at a specified position in a byte array.</summary>
      <returns>true if the byte at <paramref name="startIndex" /> in <paramref name="value" /> is nonzero; otherwise, false.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>Returns a Unicode character converted from two bytes at a specified position in a byte array.</summary>
      <returns>A character formed by two bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</summary>
      <returns>A double precision floating point number formed by eight bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</summary>
      <returns>A 16-bit signed integer formed by two bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</summary>
      <returns>A 32-bit signed integer formed by four bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</summary>
      <returns>A 64-bit signed integer formed by eight bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</summary>
      <returns>A single-precision floating point number formed by four bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</summary>
      <returns>A <see cref="T:System.String" /> of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <paramref name="value" />; for example, "7F-2C-4A".</returns>
      <param name="value">An array of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</summary>
      <returns>A <see cref="T:System.String" /> of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name="value" />; for example, "7F-2C-4A".</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</summary>
      <returns>A <see cref="T:System.String" /> of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name="value" />; for example, "7F-2C-4A".</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <param name="length">The number of array elements in <paramref name="value" /> to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or-<paramref name="startIndex" /> is greater than zero and is greater than or equal to the length of <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentException">The combination of <paramref name="startIndex" /> and <paramref name="length" /> does not specify a position within <paramref name="value" />; that is, the <paramref name="startIndex" /> parameter is greater than the length of <paramref name="value" /> minus the <paramref name="length" /> parameter.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</summary>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">The array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</summary>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</summary>
      <returns>A 64-bit unsigned integer formed by the eight bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="T:System.Boolean">
      <summary>Represents a Boolean value.</summary>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>Compares this instance to a specified <see cref="T:System.Boolean" /> object and returns an integer that indicates their relationship to one another.</summary>
      <returns>A signed integer that indicates the relative values of this instance and <paramref name="value" />.Return Value Condition Less than zero This instance is false and <paramref name="value" /> is true. Zero This instance and <paramref name="value" /> are equal (either both are true or both are false). Greater than zero This instance is true and <paramref name="value" /> is false. </returns>
      <param name="value">A <see cref="T:System.Boolean" /> object to compare to this instance. </param>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates their relationship to one another.</summary>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="obj" />.Return Value Condition Less than zero This instance is false and <paramref name="obj" /> is true. Zero This instance and <paramref name="obj" /> are equal (either both are true or both are false). Greater than zero This instance is true and <paramref name="obj" /> is false.-or- <paramref name="obj" /> is null. </returns>
      <param name="obj">An object to compare to this instance, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Boolean" />. </exception>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Boolean" /> object.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Boolean" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Boolean" /> and has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance. </param>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>Represents the Boolean value false as a string. This field is read-only.</summary>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Boolean" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Boolean" />.</returns>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>Converts the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent.</summary>
      <returns>true if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" />; otherwise, false.</returns>
      <param name="value">A string containing the value to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equivalent to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. </exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true or false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>1 if the value of this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">You attempt to convert a <see cref="T:System.Boolean" /> value to a <see cref="T:System.Char" /> value. This conversion is not supported.</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">You attempt to convert a <see cref="T:System.Boolean" /> value to a <see cref="T:System.DateTime" /> value. This conversion is not supported.</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />..</summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />..</summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />..</summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>An object of the specified type, with a value that is equivalent to the value of this <see cref="T:System.Boolean" /> object.</returns>
      <param name="type">The desired type. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>Converts the value of this instance to its equivalent string representation (either "True" or "False").</summary>
      <returns>
        <see cref="F:System.Boolean.TrueString" /> if the value of this instance is true, or <see cref="F:System.Boolean.FalseString" /> if the value of this instance is false.</returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to its equivalent string representation (either "True" or "False").</summary>
      <returns>
        <see cref="F:System.Boolean.TrueString" /> if the value of this instance is true, or <see cref="F:System.Boolean.FalseString" /> if the value of this instance is false.</returns>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> object. </param>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>Represents the Boolean value true as a string. This field is read-only.</summary>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>Converts the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="value" /> was converted successfully; otherwise, false.</returns>
      <param name="value">A string containing the value to convert. </param>
      <param name="result">When this method returns, if the conversion succeeded, contains true if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" /> or false if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.FalseString" />. If the conversion failed, contains false. The conversion fails if <paramref name="value" /> is null or is not equivalent to either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.Buffer">
      <summary>Manipulates arrays of primitive types.</summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</summary>
      <param name="src">The source buffer. </param>
      <param name="srcOffset">The zero-based byte offset into <paramref name="src" />. </param>
      <param name="dst">The destination buffer. </param>
      <param name="dstOffset">The zero-based byte offset into <paramref name="dst" />. </param>
      <param name="count">The number of bytes to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> or <paramref name="dst" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> or <paramref name="dst" /> is not an array of primitives.-or- The length of <paramref name="src" /> is less than <paramref name="srcOffset" /> plus <paramref name="count" />.-or- The length of <paramref name="dst" /> is less than <paramref name="dstOffset" /> plus <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />, <paramref name="dstOffset" />, or <paramref name="count" /> is less than 0. </exception>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>Returns the number of bytes in the specified array.</summary>
      <returns>The number of bytes in the array.</returns>
      <param name="array">An array. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive. </exception>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>Retrieves the byte at a specified location in a specified array.</summary>
      <returns>Returns the <paramref name="index" /> byte in the array.</returns>
      <param name="array">An array. </param>
      <param name="index">A location in the array. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is negative or greater than the length of <paramref name="array" />. </exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>Assigns a specified value to a byte at a particular location in a specified array.</summary>
      <param name="array">An array. </param>
      <param name="index">A location in the array. </param>
      <param name="value">A value to assign. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is negative or greater than the length of <paramref name="array" />. </exception>
    </member>
    <member name="T:System.Byte">
      <summary>Represents an 8-bit unsigned integer.</summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>Compares this instance to a specified 8-bit unsigned integer and returns an indication of their relative values.</summary>
      <returns>A signed integer that indicates the relationship of this instance to <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An 8-bit unsigned integer to compare. </param>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed integer that indicates the relationship of this instance to <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Byte" />. </exception>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Byte" /> object represent the same value.</summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Byte" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Byte" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null. </param>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Byte" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Byte" />.</returns>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Byte" />. This field is constant.</summary>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Byte" />. This field is constant.</summary>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific information about the format of <paramref name="s" />. If <paramref name="provider" /> is null, the thread current culture is used. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" />  style.</param>
      <param name="provider">An object that supplies culture-specific parsing information about <paramref name="s" />. If <paramref name="provider" /> is null, the current thread culture is used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Byte" /> value. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the value of this object, which consists of a sequence of digits that range from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
      <returns>The string representation of the value of this object in the format specified by the <paramref name="provider" /> parameter.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified format.</summary>
      <returns>The string representation of the current <see cref="T:System.Byte" /> object, formatted as specified by the <paramref name="format" /> parameter.</returns>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</exception>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified format and culture-specific formatting information.</summary>
      <returns>The string representation of the current <see cref="T:System.Byte" /> object, formatted as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</exception>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.Byte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false. </returns>
      <param name="s">A string that contains a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is null, the thread current culture is used. </param>
      <param name="result">When this method returns, contains the 8-bit unsigned integer value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>The exception that is thrown when an attempt to unload an application domain fails.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Char">
      <summary>Represents a Unicode character.</summary>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>Compares this instance to a specified <see cref="T:System.Char" /> object and returns an integer that indicates whether this instance precedes, follows, or has the same position in the sort order as the specified <see cref="T:System.Char" /> value.</summary>
      <returns>A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.Return Value Description Less than zero This instance precedes <paramref name="value" />. Zero This instance has the same position in the sort order as <paramref name="value" />. Greater than zero This instance follows <paramref name="value" />. </returns>
      <param name="value">A <see cref="T:System.Char" /> object to compare. </param>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether this instance precedes, follows, or has the same position in the sort order as the specified object.</summary>
      <returns>A signed number that indicates the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.Return Value Description Less than zero This instance precedes <paramref name="value" />. Zero This instance has the same position in the sort order as <paramref name="value" />. Greater than zero This instance is follows <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare this instance to, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Char" /> object. </exception>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>Returns a value indicating whether this instance is equal to the specified <see cref="T:System.Char" /> object.</summary>
      <returns>true if the <paramref name="value" /> parameter equals the value of this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Char" /> object to compare to this instance. </param>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance or null. </param>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>Converts the specified numeric Unicode character to a double-precision floating point number.</summary>
      <returns>The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</summary>
      <returns>The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</returns>
      <param name="s">A <see cref="T:System.String" />. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Char" />.</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
      <summary>Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</summary>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
      <summary>Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</summary>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</returns>
      <param name="s">A <see cref="T:System.String" />. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a control character.</summary>
      <returns>true if <paramref name="c" /> is a control character; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a control character.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a decimal digit.</summary>
      <returns>true if <paramref name="c" /> is a decimal digit; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, false.</returns>
      <param name="s">A <see cref="T:System.String" />. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a Unicode letter.</summary>
      <returns>true if <paramref name="c" /> is a letter; otherwise, false.</returns>
      <param name="c">The Unicode character to evaluate. </param>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</summary>
      <returns>true if <paramref name="c" /> is a letter or a decimal digit; otherwise, false.</returns>
      <param name="c">The Unicode character to evaluate. </param>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a lowercase letter.</summary>
      <returns>true if <paramref name="c" /> is a lowercase letter; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a number.</summary>
      <returns>true if <paramref name="c" /> is a number; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a number.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a punctuation mark.</summary>
      <returns>true if <paramref name="c" /> is a punctuation mark; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a separator character.</summary>
      <returns>true if <paramref name="c" /> is a separator character; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a separator character.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>Indicates whether the specified character has a surrogate code point.</summary>
      <returns>true if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string has a surrogate code point.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</summary>
      <returns>true if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, false.</returns>
      <param name="highSurrogate">A character. </param>
      <param name="lowSurrogate">A character. </param>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</summary>
      <returns>true if the <paramref name="s" /> parameter and the <paramref name="index" /> parameter specify a pair of adjacent characters, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">A position within <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a symbol character.</summary>
      <returns>true if <paramref name="c" /> is a symbol character; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as an uppercase letter.</summary>
      <returns>true if <paramref name="c" /> is an uppercase letter; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as white space.</summary>
      <returns>true if <paramref name="c" /> is white space; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as white space.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Char" />. This field is constant.</summary>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Char" />. This field is constant.</summary>
    </member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <returns>The value of the current <see cref="T:System.Char" /> object unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No value is returned.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. (Specify null because the <paramref name="provider" /> parameter is ignored.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <returns>An object of the specified type.</returns>
      <param name="type">A <see cref="T:System.Type" /> object. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter. </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>Converts the value of a Unicode character to its lowercase equivalent.</summary>
      <returns>The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</summary>
      <returns>The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
      <param name="c">A Unicode character. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules, or null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</summary>
      <returns>The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>Converts the specified Unicode character to its equivalent string representation.</summary>
      <returns>The string representation of the value of <paramref name="c" />.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>Converts the value of a Unicode character to its uppercase equivalent.</summary>
      <returns>The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</summary>
      <returns>The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</returns>
      <param name="c">A Unicode character. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules, or null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</summary>
      <returns>The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</returns>
      <param name="c">The Unicode character to convert.</param>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.</summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a single character or null. </param>
      <param name="result">When this method returns, contains a Unicode character equivalent to the sole character in <paramref name="s" />, if the conversion succeeded, or an undefined value if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null or the length of <paramref name="s" /> is not 1. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>Initializes an instance of the <see cref="T:System.CLSCompliantAttribute" /> class with a Boolean value indicating whether the indicated program element is CLS-compliant.</summary>
      <param name="isCompliant">true if CLS-compliant; otherwise, false. </param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>Gets the Boolean value indicating whether the indicated program element is CLS-compliant.</summary>
      <returns>true if the program element is CLS-compliant; otherwise, false.</returns>
    </member>
    <member name="T:System.Comparison`1">
      <summary>Represents the method that compares two objects of the same type.</summary>
      <returns>A signed integer that indicates the relative values of x and y, as shown in the following table.Value Condition Less than 0 <paramref name="x" /> is less than <paramref name="y" />.0 <paramref name="x" /> equals <paramref name="y" />.Greater than 0 <paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <typeparam name="T">The type of the objects to compare.</typeparam>
    </member>
    <member name="T:System.Console">
      <summary>Represents the standard input, output, and error streams for console applications. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Console.Error">
      <summary>Gets the standard error output stream.</summary>
      <returns>A <see cref="T:System.IO.TextWriter" /> that represents the standard error output stream.</returns>
    </member>
    <member name="P:System.Console.In">
      <summary>Gets the standard input stream.</summary>
      <returns>A <see cref="T:System.IO.TextReader" /> that represents the standard input stream.</returns>
    </member>
    <member name="P:System.Console.Out">
      <summary>Gets the standard output stream.</summary>
      <returns>A <see cref="T:System.IO.TextWriter" /> that represents the standard output stream.</returns>
    </member>
    <member name="M:System.Console.ReadLine">
      <summary>Reads a line of characters from the console.</summary>
      <returns>The next line of characters from the console.</returns>
    </member>
    <member name="M:System.Console.SetError(System.IO.TextWriter)">
      <summary>[SECURITY CRITICAL] Sets the <see cref="P:System.Console.Error" /> property.</summary>
      <param name="newError">A <see cref="T:System.IO.TextWriter" /> stream that is the new standard error output. </param>
    </member>
    <member name="M:System.Console.SetIn(System.IO.TextReader)">
      <summary>[SECURITY CRITICAL] Sets the <see cref="P:System.Console.In" /> property.</summary>
      <param name="newIn">A <see cref="T:System.IO.TextReader" /> stream that is the new standard input. </param>
    </member>
    <member name="M:System.Console.SetOut(System.IO.TextWriter)">
      <summary>[SECURITY CRITICAL] Sets the <see cref="P:System.Console.Out" /> property.</summary>
      <param name="newOut">A <see cref="T:System.IO.TextWriter" /> stream that is the new standard output. </param>
    </member>
    <member name="M:System.Console.Write(System.Char)">
      <summary>Writes the specified Unicode character value to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Char[])">
      <summary>Writes the specified array of Unicode characters to the standard output stream.</summary>
      <param name="buffer">A Unicode character array. </param>
    </member>
    <member name="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes the specified subarray of Unicode characters to the standard output stream.</summary>
      <param name="buffer">An array of Unicode characters. </param>
      <param name="index">The starting position in <paramref name="buffer" />. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Int32)">
      <summary>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Object)">
      <summary>Writes the text representation of the specified object to the standard output stream.</summary>
      <param name="value">The value to write, or null. </param>
    </member>
    <member name="M:System.Console.Write(System.String)">
      <summary>Writes the specified string value to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object)">
      <summary>Writes the text representation of the specified object to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">An object to write using <paramref name="format" />.</param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
      <summary>Writes the text representation of the specified objects to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>Writes the text representation of the specified objects to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object[])">
      <summary>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg">An array of objects to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine">
      <summary>Writes the current line terminator to the standard output stream.</summary>
    </member>
    <member name="M:System.Console.WriteLine(System.Char)">
      <summary>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[])">
      <summary>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</summary>
      <param name="buffer">A Unicode character array. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Int32)">
      <summary>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</summary>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:System.Console.WriteLine(System.Object)">
      <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String)">
      <summary>Writes the specified string value, followed by the current line terminator, to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object)">
      <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg0">An object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
      <summary>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object[])">
      <summary>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg">An array of objects to write using <paramref name="format" />. </param>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>The exception that is thrown when an attempt to marshal an object across a context boundary fails.</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ContextMarshalException" /> class with default properties.</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ContextMarshalException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ContextMarshalException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>Indicates that the value of a static field is unique for a particular context.</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ContextStaticAttribute" /> class.</summary>
    </member>
    <member name="T:System.Convert">
      <summary>Converts a base data type to another base data type.</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</summary>
      <returns>An object whose type is <paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.-or- <paramref name="value" />, if the type of <paramref name="value" /> and <paramref name="conversionType" /> are equal.-or- A null reference (Nothing in Visual Basic), if <paramref name="value" /> is null and <paramref name="conversionType" /> is not a value type.</returns>
      <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="conversionType">The type of object to return. </param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-<paramref name="value" /> is null, and <paramref name="conversionType" /> is a value type.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in a format for <paramref name="conversionType" /> recognized by <paramref name="provider" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number that is out of the range of <paramref name="conversionType" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> is null.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</summary>
      <returns>An object whose underlying type is <paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.-or- A null reference (Nothing in Visual Basic), if <paramref name="value" /> is null and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, or <see cref="F:System.TypeCode.Object" />.</returns>
      <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="typeCode">The type of object to return. </param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.  -or-<paramref name="value" /> is null, and <paramref name="typeCode" /> specifies a value type.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in a format for the <paramref name="typeCode" /> type recognized by <paramref name="provider" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number that is out of the range of the <paramref name="typeCode" /> type.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> is invalid. </exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>A constant representing a database column absent of data; that is, database null.</summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>Converts a subset of a Unicode character array, which encodes binary data as base 64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.</summary>
      <returns>An array of 8-bit unsigned integers equivalent to <paramref name="length" /> elements at position <paramref name="offset" /> in <paramref name="inArray" />.</returns>
      <param name="inArray">A Unicode character array. </param>
      <param name="offset">A position within <paramref name="inArray" />. </param>
      <param name="length">The number of elements in <paramref name="inArray" /> to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="length" /> is less than 0.-or- <paramref name="offset" /> plus <paramref name="length" /> indicates a position not within <paramref name="inArray" />. </exception>
      <exception cref="T:System.FormatException">The length of <paramref name="inArray" />, ignoring white space characters, is not zero or a multiple of 4. -or-The format of <paramref name="inArray" /> is invalid. <paramref name="inArray" /> contains a non-base 64 character, more than two padding characters, or a non-white space character among the padding characters. </exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>Converts the specified <see cref="T:System.String" />, which encodes binary data as base 64 digits, to an equivalent 8-bit unsigned integer array.</summary>
      <returns>An array of 8-bit unsigned integers equivalent to <paramref name="s" />.</returns>
      <param name="s">A <see cref="T:System.String" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">The length of <paramref name="s" />, ignoring white space characters, is not zero or a multiple of 4. -or-The format of <paramref name="s" /> is invalid. <paramref name="s" /> contains a non-base 64 character, more than two padding characters, or a non-white space character among the padding characters.</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>Returns the <see cref="T:System.TypeCode" /> for the specified object.</summary>
      <returns>The <see cref="T:System.TypeCode" /> for <paramref name="value" />, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>Returns an indication whether the specified object is of type <see cref="T:System.DBNull" />.</summary>
      <returns>true if <paramref name="value" /> is of type <see cref="T:System.DBNull" />; otherwise, false.</returns>
      <param name="value">An object. </param>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base 64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</summary>
      <returns>A 32-bit signed integer containing the number of bytes in <paramref name="outArray" />.</returns>
      <param name="inArray">An input array of 8-bit unsigned integers. </param>
      <param name="offsetIn">A position within <paramref name="inArray" />. </param>
      <param name="length">The number of elements of <paramref name="inArray" /> to convert. </param>
      <param name="outArray">An output array of Unicode characters. </param>
      <param name="offsetOut">A position within <paramref name="outArray" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> or <paramref name="outArray" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />, <paramref name="offsetOut" />, or <paramref name="length" /> is negative.-or- <paramref name="offsetIn" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.-or- <paramref name="offsetOut" /> plus the number of elements to return is greater than the length of <paramref name="outArray" />. </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>Converts an array of 8-bit unsigned integers to its equivalent <see cref="T:System.String" /> representation encoded with base 64 digits.</summary>
      <returns>The <see cref="T:System.String" /> representation, in base 64, of the contents of <paramref name="inArray" />.</returns>
      <param name="inArray">An array of 8-bit unsigned integers. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> is null. </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a subset of an array of 8-bit unsigned integers to its equivalent <see cref="T:System.String" /> representation encoded with base 64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</summary>
      <returns>The <see cref="T:System.String" /> representation in base 64 of <paramref name="length" /> elements of <paramref name="inArray" /> starting at position <paramref name="offset" />.</returns>
      <param name="inArray">An array of 8-bit unsigned integers. </param>
      <param name="offset">An offset in <paramref name="inArray" />. </param>
      <param name="length">The number of elements of <paramref name="inArray" /> to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="length" /> is negative.-or- <paramref name="offset" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />. </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>Returns the specified Boolean value; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A Boolean. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A double-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>Converts the value of a specified <see cref="T:System.Object" /> to an equivalent Boolean value.</summary>
      <returns>true or false, which reflects the value returned by invoking the <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> method for the underlying type of <paramref name="value" />. If <paramref name="value" /> is null, the method returns false. </returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <returns>true or false, which reflects the value returned by invoking the <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> method for the underlying type of <paramref name="value" />. If <paramref name="value" /> is null, the method returns false.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A single-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a logical value to its Boolean equivalent.</summary>
      <returns>true if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or false if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" /> or null.</returns>
      <param name="value">A <see cref="T:System.String" /> that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equal to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a logical value to its Boolean equivalent using the specified culture-specific formatting information.</summary>
      <returns>true if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or false if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" /> or null.</returns>
      <param name="value">A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. </param>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equal to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 8-bit unsigned integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</summary>
      <returns>The 8-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 8-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 8-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 8-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit unsigned integer using specified culture-specific formatting information.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a base 10 unsigned number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.Byte.MinValue" /> or larger than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>Returns the specified Unicode character value; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A double-precision floating-point number. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.-or- <see cref="F:System.Char.MinValue" /> if <paramref name="value" /> equals null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to its equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.-or- <see cref="F:System.Char.MinValue" /> if <paramref name="value" /> equals null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A single-precision floating-point number. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>Converts the first character of a <see cref="T:System.String" /> to a Unicode character.</summary>
      <returns>The Unicode character equivalent to the first and only character in <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.String" /> of length 1 or null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.FormatException">The length of <paramref name="value" /> is not 1. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>Converts the first character of a <see cref="T:System.String" /> to a Unicode character using specified culture-specific formatting information.</summary>
      <returns>The Unicode character equivalent to the first and only character in <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.String" /> of length 1 or null. </param>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.FormatException">The length of <paramref name="value" /> is not 1. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Char.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Char.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.-or- A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a valid <see cref="T:System.DateTime" /> value.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.-or-The conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.-or- A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a date and time to an equivalent <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.-or- A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.</returns>
      <param name="value">The string representation of a date and time.</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a properly formatted date and time string. </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.-or- A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a date and time to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a properly formatted date and time string. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A <see cref="T:System.DateTime" />. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>Returns the specified <see cref="T:System.Decimal" /> number; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. </returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">The numeric value of <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to the equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. </returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent double-precision floating point number.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating point number.</summary>
      <returns>The double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>Returns the specified double-precision floating point number; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A double-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an double-precision floating point number using the specified culture-specific formatting information.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating point number.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A single-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent double-precision floating point number using the specified culture-specific formatting information.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating point number.</summary>
      <returns>The double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 16-bit signed integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</summary>
      <returns>The 16-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</summary>
      <returns>The 16-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 16-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 16-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>Returns the specified 16-bit signed integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</summary>
      <returns>The 16-bit signed integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 16-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit signed integer using specified culture-specific formatting information.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.Int16.MinValue" /> or larger than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</summary>
      <returns>The 16-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 32-bit signed integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</summary>
      <returns>The 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</summary>
      <returns>The 32-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 32-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 32-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>Returns the specified 32-bit signed integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 32-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit signed integer using specified culture-specific formatting information.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>Converts the <see cref="T:System.String" /> representation of a number in a specified base to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.Int32.MinValue" /> or larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</summary>
      <returns>The 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 64-bit signed integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</summary>
      <returns>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</summary>
      <returns>The 64-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 64-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 64-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</summary>
      <returns>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>Returns the specified 64-bit signed integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</summary>
      <returns>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 64-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.Int64.MinValue" /> or larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</summary>
      <returns>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 8-bit signed integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 8-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 8-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>Returns the specified 8-bit signed integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 8-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if value is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit signed integer using specified culture-specific formatting information.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.SByte.MinValue" /> or larger than <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent single-precision floating point number.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating point number.</summary>
      <returns>The single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.<paramref name="value" /> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.<paramref name="value" /> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</returns>
      <param name="value">A double-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an single-precision floating point number using the specified culture-specific formatting information.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating point number.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>Returns the specified single-precision floating point number; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A single-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent single-precision floating point number using the specified culture-specific formatting information.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating point number.</summary>
      <returns>The single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>Converts the value of the specified Boolean to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>Converts the value of the specified Boolean to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A Boolean value. </param>
      <param name="provider">(Reserved) An instance of an <see cref="T:System.IFormatProvider" /> interface implementation. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>Converts the value of the specified Unicode character to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>Converts the value of the specified Unicode character to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.DateTime" />. </param>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.DateTime" />. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A double-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>Converts the value of the specified double-precision floating point number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.<paramref name="provider" /> is ignored; it does not participate in this operation.</returns>
      <param name="value">A double-precision floating point number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>Converts the value of the specified 16-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>Converts the value of a 16-bit signed integer to its equivalent <see cref="T:System.String" /> representation in a specified base.</summary>
      <returns>The <see cref="T:System.String" /> representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>Converts the value of the specified 32-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>Converts the value of a 32-bit signed integer to its equivalent <see cref="T:System.String" /> representation in a specified base.</summary>
      <returns>The <see cref="T:System.String" /> representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>Converts the value of the specified 64-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>Converts the value of a 64-bit signed integer to its equivalent <see cref="T:System.String" /> representation in a specified base.</summary>
      <returns>The <see cref="T:System.String" /> representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to its <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> representation of the value of <paramref name="value" />, or <see cref="F:System.String.Empty" /> if value is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> or null. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to its equivalent <see cref="T:System.String" /> representation using the specified culture-specific formatting information.</summary>
      <returns>The <see cref="T:System.String" /> representation of the value of <paramref name="value" />, or <see cref="F:System.String.Empty" /> if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> or null. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>Converts the value of the specified 8-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A single-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>Converts the value of the specified single-precision floating point number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A single-precision floating point number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 16-bit unsigned integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</summary>
      <returns>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</summary>
      <returns>The 16-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 16-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 16-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</summary>
      <returns>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</summary>
      <returns>The 16-bit unsigned integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</summary>
      <returns>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 16-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit unsigned integer using specified culture-specific formatting information.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.UInt16.MinValue" /> or larger than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 32-bit unsigned integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</summary>
      <returns>The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</summary>
      <returns>The 32-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 32-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 32-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</summary>
      <returns>The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</summary>
      <returns>The 32-bit unsigned integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</summary>
      <returns>The 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 32-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.UInt32.MinValue" /> or larger than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</summary>
      <returns>The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 64-bit unsigned integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 64-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 64-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 64-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit unsigned integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.UInt64.MinValue" /> or larger than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="T:System.Converter`2">
      <summary>Represents a method that converts an object from one type to another type.</summary>
      <returns>The <paramref name="TOutput" /> that represents the converted <paramref name="TInput" />.None of the methods in the .NET Framework class library have a <see cref="T:System.Converter`2" /> delegate as a parameter. The <see cref="T:System.Converter`2" /> delegate exists primarily to support the infrastructure, but you can still use it to create custom methods that use converters.</returns>
      <param name="input">The object to convert.</param>
      <typeparam name="TInput">The type of object that is to be converted.</typeparam>
      <typeparam name="TOutput">The type the input object is to be converted to.</typeparam>
    </member>
    <member name="T:System.DataMisalignedException">
      <summary>The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.DateTime">
      <summary>Represents an instant in time, typically expressed as a date and time of day. </summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</summary>
      <param name="year">The year (1 through 9999). </param>
      <param name="month">The month (1 through 12). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.-or- <paramref name="month" /> is less than 1 or greater than 12.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />). </param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="calendar">The calendar to use to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.-or- <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.</summary>
      <param name="year">The year (1 through 9999). </param>
      <param name="month">The month (1 through 12). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999. -or- <paramref name="month" /> is less than 1 or greater than 12. -or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23. -or- <paramref name="minute" /> is less than 0 or greater than 59. -or- <paramref name="second" /> is less than 0 or greater than 59. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</summary>
      <param name="year">The year (1 through 9999). </param>
      <param name="month">The month (1 through 12). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> and <paramref name="second" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999. -or- <paramref name="month" /> is less than 1 or greater than 12. -or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23. -or- <paramref name="minute" /> is less than 0 or greater than 59. -or- <paramref name="second" /> is less than 0 or greater than 59. </exception>
      <exception cref="T:System.ArgumentException">The specified date and time parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. -or-<paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />). </param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="calendar">The calendar to use to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.-or- <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23 -or- <paramref name="minute" /> is less than 0 or greater than 59. -or- <paramref name="second" /> is less than 0 or greater than 59. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.</summary>
      <param name="year">The year (1 through 9999). </param>
      <param name="month">The month (1 through 12). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="millisecond">The milliseconds (0 through 999). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.-or- <paramref name="month" /> is less than 1 or greater than 12.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23.-or- <paramref name="minute" /> is less than 0 or greater than 59.-or- <paramref name="second" /> is less than 0 or greater than 59.-or- <paramref name="millisecond" /> is less than 0 or greater than 999. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</summary>
      <param name="year">The year (1 through 9999). </param>
      <param name="month">The month (1 through 12). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="millisecond">The milliseconds (0 through 999). </param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.-or- <paramref name="month" /> is less than 1 or greater than 12.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23.-or- <paramref name="minute" /> is less than 0 or greater than 59.-or- <paramref name="second" /> is less than 0 or greater than 59.-or- <paramref name="millisecond" /> is less than 0 or greater than 999. </exception>
      <exception cref="T:System.ArgumentException">The specified date and time parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. -or-<paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />). </param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="millisecond">The milliseconds (0 through 999). </param>
      <param name="calendar">The calendar to use to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.-or- <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23.-or- <paramref name="minute" /> is less than 0 or greater than 59.-or- <paramref name="second" /> is less than 0 or greater than 59.-or- <paramref name="millisecond" /> is less than 0 or greater than 999. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />). </param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="millisecond">The milliseconds (0 through 999). </param>
      <param name="calendar">The calendar to use to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />. </param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.-or- <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23.-or- <paramref name="minute" /> is less than 0 or greater than 59.-or- <paramref name="second" /> is less than 0 or greater than 59.-or- <paramref name="millisecond" /> is less than 0 or greater than 999. </exception>
      <exception cref="T:System.ArgumentException">The specified date and time parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. -or-<paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</summary>
      <param name="ticks">A date and time expressed in 100-nanosecond units. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</summary>
      <param name="ticks">A date and time expressed in 100-nanosecond units. </param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="ticks" /> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</returns>
      <param name="value">The time interval to add. This value can be positive or negative.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of days to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</returns>
      <param name="value">The number of whole and fractional days to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of hours to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</returns>
      <param name="value">The number of whole and fractional hours to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of milliseconds to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</returns>
      <param name="value">The number of whole and fractional milliseconds to add. This value can be positive or negative, and is rounded to the nearest integer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of minutes to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</returns>
      <param name="value">The number of whole and fractional minutes to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of months to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</returns>
      <param name="months">The number of months to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />.-or- <paramref name="months" /> is less than -120,000 or greater than 120,000. </exception>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of seconds to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</returns>
      <param name="value">The number of whole and fractional seconds to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of ticks to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</returns>
      <param name="value">The number of 100-nanosecond ticks to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of years to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</returns>
      <param name="value">The number of years to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first <see cref="T:System.DateTime" /> instance is earlier than, the same as, or later than the second <see cref="T:System.DateTime" /> instance.</summary>
      <returns>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.Value Type Condition Less than zero <paramref name="t1" /> is earlier than <paramref name="t2" />. Zero <paramref name="t1" /> is the same as <paramref name="t2" />. Greater than zero <paramref name="t1" /> is later than <paramref name="t2" />. </returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>A signed integer that indicates the relationship between this instance and the <paramref name="value" /> parameter, as shown in the following table.Value Description Less than zero This instance is earlier than <paramref name="value" />. Zero This instance is the same as <paramref name="value" />. Greater than zero This instance is later than <paramref name="value" />. </returns>
      <param name="value">The object to compare to this instance. </param>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
      <summary>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>A signed integer that indicates the relationship between this instance and the <paramref name="value" /> parameter, as shown in the following table.Value Description Less than zero This instance is earlier than <paramref name="value" />. Zero This instance is the same as <paramref name="value" />. Greater than zero This instance is later than <paramref name="value" />, or <paramref name="value" /> is null. </returns>
      <param name="value">The object to compare to this instance, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.DateTime" />. </exception>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>Gets the date component of this instance.</summary>
      <returns>A new object that has the same date as this instance, and its time value set to 12:00:00 midnight (00:00:00).</returns>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>Gets the day of the month represented by this instance.</summary>
      <returns>The day component, expressed as a value between 1 and 31.</returns>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>Gets the day of the week represented by this instance.</summary>
      <returns>An enumerated constant that indicates the day of the week of this <see cref="T:System.DateTime" /> value. </returns>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>Gets the day of the year represented by this instance.</summary>
      <returns>The day of the year, expressed as a value between 1 and 366.</returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month and year.</summary>
      <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29, depending on whether <paramref name="year" /> is a leap year.</returns>
      <param name="year">The year. </param>
      <param name="month">The month (a number ranging from 1 to 12). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 12.-or-<paramref name="year" /> is less than 1 or greater than 9999.</exception>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>Returns a value indicating whether this instance is equal to the specified <see cref="T:System.DateTime" /> instance.</summary>
      <returns>true if the <paramref name="value" /> parameter equals the value of this instance; otherwise, false.</returns>
      <param name="value">The object to compare to this instance. </param>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.DateTime" /> are equal.</summary>
      <returns>true if the two <see cref="T:System.DateTime" /> values are equal; otherwise, false.</returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="value">The object to compare to this instance. </param>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>Deserializes a 64-bit binary value and recreates an original serialized <see cref="T:System.DateTime" /> object.</summary>
      <returns>An object that is equivalent to the original <see cref="T:System.DateTime" /> object.</returns>
      <param name="dateData">A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> property in a 2-bit field and the <see cref="P:System.DateTime.Ticks" /> property in a 62-bit field.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent local time.</summary>
      <returns>An object that represents a local time that is equivalent to the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
      <param name="fileTime">A Windows file time expressed in ticks. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>
      <returns>An object that represents a UTC time that is equivalent to the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
      <param name="fileTime">A Windows file time expressed in ticks. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
      <summary>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation date.</summary>
      <returns>An object that represents the same date and time as the <paramref name="d" /> parameter.</returns>
      <param name="d">An OLE Automation date value. </param>
      <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation date value. </exception>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</returns>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>Gets the hour component of the date represented by this instance.</summary>
      <returns>The hour component, expressed as a value between 0 and 23.</returns>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the Daylight Saving Time range for the current time zone.</summary>
      <returns>true if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" />, and the value of this instance of <see cref="T:System.DateTime" /> is within the Daylight Saving Time range for the current time zone; false if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>Returns an indication whether the specified year is a leap year.</summary>
      <returns>true if <paramref name="year" /> is a leap year; otherwise, false.</returns>
      <param name="year">A 4-digit year. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.</exception>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</summary>
      <returns>One of the enumeration values. The default is <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> is outside the range of the current culture's default calendar or of a specified culture's default calendar.</exception>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>Gets the milliseconds component of the date represented by this instance.</summary>
      <returns>The milliseconds component, expressed as a value between 0 and 999.</returns>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>Gets the minute component of the date represented by this instance.</summary>
      <returns>The minute component, expressed as a value between 0 and 59.</returns>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>Gets the month component of the date represented by this instance.</summary>
      <returns>The month component, expressed as a value between 1 and 12.</returns>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.</summary>
      <returns>An object whose value is the current local date and time.</returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>Adds a specified time interval to a specified date and time, yielding a new date and time.</summary>
      <returns>An object that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.</returns>
      <param name="d">The first object to add. </param>
      <param name="t">The second object to add. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, false.</returns>
      <param name="d1">The first object to compare. </param>
      <param name="d2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is greater than another specified <see cref="T:System.DateTime" />.</summary>
      <returns>true if <paramref name="t1" /> is greater than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is greater than or equal to another specified <see cref="T:System.DateTime" />.</summary>
      <returns>true if <paramref name="t1" /> is greater than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, false.</returns>
      <param name="d1">The first object to compare. </param>
      <param name="d2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is less than another specified <see cref="T:System.DateTime" />.</summary>
      <returns>true if <paramref name="t1" /> is less than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is less than or equal to another specified <see cref="T:System.DateTime" />.</summary>
      <returns>true if <paramref name="t1" /> is less than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>Subtracts a specified date and time from another specified date and time and returns a time interval.</summary>
      <returns>The time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.</returns>
      <param name="d1">The date and time value to subtract from (the minuend). </param>
      <param name="d2">The date and time value to subtract (the subtrahend). </param>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>Subtracts a specified time interval from a specified date and time and returns a new date and time.</summary>
      <returns>An object whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.</returns>
      <param name="d">The date and time value to subtract from (the minuend). </param>
      <param name="t">The time interval to subtract (the subtrahend). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time. </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter, as specified by the <paramref name="provider" /> parameter.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time. </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter, as specified by the <paramref name="provider" /> and <paramref name="styles" /> parameters.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter, as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="format">A format specifier that defines the required format of <paramref name="s" />. </param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string. -or- <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />. </exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter, as specified by the <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" /> parameters.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="format">A format specifier that defines the required format of <paramref name="s" />. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="style">A bitwise combination of the enumeration values that provides additional information about <paramref name="s" />, about style elements that may be present in <paramref name="s" />, or about the conversion from <paramref name="s" /> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string. -or- <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter, as specified by the <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" /> parameters.</returns>
      <param name="s">A string that contains one or more dates and times to convert. </param>
      <param name="formats">An array of allowable formats of <paramref name="s" />. </param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the required format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="formats" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string. -or- an element of <paramref name="formats" /> is an empty string. -or- <paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>Gets the seconds component of the date represented by this instance.</summary>
      <returns>The seconds component, expressed as a value between 0 and 59.</returns>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>Creates a new <see cref="T:System.DateTime" /> object that has the same number of ticks as the specified <see cref="T:System.DateTime" />, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</summary>
      <returns>A new object that has the same number of ticks as the object represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter.</returns>
      <param name="value">The date and time value for the new object.</param>
      <param name="kind">One of the enumeration values that specifies whether the new object will be designated in local time, in UTC, or neither.</param>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>Subtracts the specified date and time from this instance.</summary>
      <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</returns>
      <param name="value">The date and time to subtract. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>Subtracts the specified duration from this instance.</summary>
      <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</returns>
      <param name="value">The time interval to subtract. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Returns the current <see cref="T:System.DateTime" /> object.</summary>
      <returns>The current <see cref="T:System.DateTime" /> object.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.) </param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.</summary>
      <returns>An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.</returns>
      <param name="type">The desired type. </param>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DateTime" /> type.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>Gets the number of ticks that represent the date and time of this instance.</summary>
      <returns>The number of ticks that represents the date and time of this instance. The value is between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks.</returns>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>Gets the time of day for this instance.</summary>
      <returns>A time interval that represents the fraction of the day that has elapsed since midnight.</returns>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>Gets the current date.</summary>
      <returns>An object set to today's date, with the time component set to 00:00:00.</returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
      <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. </exception>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
      <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. </exception>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</summary>
      <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is one of the following: the local time equivalent of the current <see cref="T:System.DateTime" /> value, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</summary>
      <returns>The long date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</summary>
      <returns>The long time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
      <summary>Converts the value of this instance to the equivalent OLE Automation date.</summary>
      <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
      <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation date. </exception>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</summary>
      <returns>The short date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</summary>
      <returns>The short time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation.</summary>
      <returns>A string representation of the value of the current <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture. </exception>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object, as specified by the <paramref name="provider" /> parameter.</returns>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />. </exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format.</summary>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object, as specified by the <paramref name="format" /> parameter.</returns>
      <param name="format">A standard date and time format string or a custom date and time format string.</param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.-or- <paramref name="format" /> does not contain a valid custom format pattern. </exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object, as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
      <param name="format">A standard date and time format string or a custom date and time format string. </param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.-or- <paramref name="format" /> does not contain a valid custom format pattern. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />. </exception>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</summary>
      <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is one of the following: the UTC equivalent of the current <see cref="T:System.DateTime" /> value, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value that is equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is an empty string, or does not contain a valid string representation of a date and time. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value that is equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="format">The required format of <paramref name="s" />. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="style">A bitwise combination of one or more enumeration values that indicates the permitted format of <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value that is equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s" /> or <paramref name="format" /> parameter is null, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="s">A string that contains one or more dates and times to convert. </param>
      <param name="formats">An array of allowable formats for the <paramref name="s" /> parameter. </param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value that is equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <paramref name="s" /> or <paramref name="formats" /> is null, <paramref name="s" /> or an element of <paramref name="formats" /> is an empty string, or the format of <paramref name="s" /> is not exactly as specified by at least one of the format patterns in <paramref name="formats" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
      <returns>An object whose value is the current UTC date and time.</returns>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>Gets the year component of the date represented by this instance.</summary>
      <returns>The year component, expressed as a value between 1 and 9999.</returns>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>Specifies whether a <see cref="T:System.DateTime" /> object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>The time represented is not specified as either local time or Coordinated Universal Time (UTC).</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>The time represented is UTC.</summary>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>The time represented is local time.</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</summary>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value.</summary>
      <param name="dateTime">A date and time.   </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.-or-The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value and offset.</summary>
      <param name="dateTime">A date and time.   </param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="offset" /> does not equal zero.-or-<paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Local" /> and <paramref name="offset" /> does not equal the offset of the system's local time zone.-or-<paramref name="offset" /> is not specified in whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than -14 hours or greater than 14 hours.-or-<see cref="P:System.DateTimeOffset.UtcDateTime" /> is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset of a specified calendar.</summary>
      <param name="year">The year.</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).   </param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="calendar">The calendar whose time is defined.</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the <paramref name="calendar" /> parameter's MinSupportedDateTime.Year or greater than MaxSupportedDateTime.Year.-or-<paramref name="month" /> is either less than or greater than the number of months in <paramref name="year" /> in the <paramref name="calendar" />. -or-<paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.-or-<paramref name="hour" /> is less than zero or greater than 23.-or-<paramref name="minute" /> is less than 0 or greater than 59.-or-<paramref name="second" /> is less than 0 or greater than 59.-or-<paramref name="millisecond" /> is less than 0 or greater than 999.-or-<paramref name="offset" /> is less than -14 hours or greater than 14 hours.-or-The <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> parameters cannot be represented as a date and time value.-or-The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).   </param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than one or greater than 9999.-or-<paramref name="month" /> is less than one or greater than 12.-or-<paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.-or-<paramref name="hour" /> is less than zero or greater than 23.-or-<paramref name="minute" /> is less than 0 or greater than 59.-or-<paramref name="second" /> is less than 0 or greater than 59.-or-<paramref name="millisecond" /> is less than 0 or greater than 999.-or-<paramref name="offset" /> is less than -14 or greater than 14.-or-The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, and offset.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).   </param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than one or greater than 9999.-or-<paramref name="month" /> is less than one or greater than 12.-or-<paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.-or-<paramref name="hour" /> is less than zero or greater than 23.-or-<paramref name="minute" /> is less than 0 or greater than 59.-or-<paramref name="second" /> is less than 0 or greater than 59.-or-<paramref name="offset" /> is less than -14 hours or greater than 14 hours.-or-The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified number of ticks and offset.</summary>
      <param name="ticks">A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> is not specified in whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.-or-<paramref name="ticks" /> is less than DateTimeOffset.MinValue.Ticks or greater than DateTimeOffset.MaxValue.Ticks.-or-<paramref name="Offset" /> s less than -14 hours or greater than 14 hours.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the time interval represented by <paramref name="timeSpan" />.</returns>
      <param name="timeSpan">A <see cref="T:System.TimeSpan" /> object that represents a positive or a negative time interval.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>Adds a specified number of whole and fractional days to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of days represented by <paramref name="days" />.</returns>
      <param name="days">A number of whole and fractional days. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>Adds a specified number of whole and fractional hours to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of hours represented by <paramref name="hours" />.</returns>
      <param name="hours">A number of whole and fractional hours. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>Adds a specified number of milliseconds to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of whole milliseconds represented by <paramref name="milliseconds" />.</returns>
      <param name="milliseconds">A number of whole and fractional milliseconds. The number can be negative or positive.   </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>Adds a specified number of whole and fractional minutes to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of minutes represented by <paramref name="minutes" />.</returns>
      <param name="minutes">A number of whole and fractional minutes. The number can be negative or positive.   </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>Adds a specified number of months to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of months represented by <paramref name="months" />.</returns>
      <param name="months">A number of whole months. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>Adds a specified number of whole and fractional seconds to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="seconds" />.</returns>
      <param name="seconds">A number of whole and fractional seconds. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>Adds a specified number of ticks to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of ticks represented by <paramref name="ticks" />.</returns>
      <param name="ticks">A number of 100-nanosecond ticks. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>Adds a specified number of years to the <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of years represented by <paramref name="years" />.</returns>
      <param name="years">A number of years. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Compares two <see cref="T:System.DateTimeOffset" /> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.</summary>
      <returns>A signed integer that indicates whether the value of the <paramref name="first" /> parameter is earlier than, later than, or the same time as the value of the <paramref name="second" /> parameter, as the following table shows.Return valueDescriptionLess than zero<paramref name="first" /> is earlier than <paramref name="second" />.Zero<paramref name="first" /> is equal to <paramref name="second" />.Greater than zero<paramref name="first" /> is later than <paramref name="second" />.</returns>
      <param name="first">The first object to compare.</param>
      <param name="second">The second object to compare.</param>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>Compares the current <see cref="T:System.DateTimeOffset" /> object to a specified <see cref="T:System.DateTimeOffset" /> object and indicates whether the current object is earlier than, the same as, or later than the second <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A signed integer that indicates the relationship between the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" />, as the following table shows.Return valueDescriptionLess than zeroThe current <see cref="T:System.DateTimeOffset" /> object is earlier than <paramref name="other" />.ZeroThe current <see cref="T:System.DateTimeOffset" /> object is the same as <paramref name="other" />.Greater than zero.The current <see cref="T:System.DateTimeOffset" /> object is later than <paramref name="other" />.</returns>
      <param name="other">An object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>Gets the day of the month represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The day component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 31.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>Gets the day of the week represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>One of the enumeration values that indicates the day of the week of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>Gets the day of the year represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The day of the year of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 366.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</returns>
      <param name="other">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.   </param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
      <returns>true if the two <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</returns>
      <param name="first">The first object to compare.</param>
      <param name="second">The second object to compare.</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>Determines whether a <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.DateTimeOffset" /> object and represents the same point in time as the current <see cref="T:System.DateTimeOffset" /> object; otherwise, false.</returns>
      <param name="obj">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same time and has the same offset as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" /> have the same date and time value and the same <see cref="P:System.DateTimeOffset.Offset" /> value; otherwise, false.</returns>
      <param name="other">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object. </param>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent local time.</summary>
      <returns>An object that represents the date and time of <paramref name="fileTime" /> with the offset set to the local time offset.</returns>
      <param name="fileTime">A Windows file time, expressed in ticks.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> is less than zero.-or-<paramref name="filetime" /> is greater than DateTimeOffset.MaxValue.Ticks.</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>Gets the hour component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The hour component of the current <see cref="T:System.DateTimeOffset" /> object. This property uses a 24-hour clock; the value ranges from 0 to 23.</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>Represents the greatest possible value of <see cref="T:System.DateTimeOffset" />. This field is read-only.</summary>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>Gets the millisecond component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The millisecond component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 999.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>Gets the minute component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The minute component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 59.</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>Represents the earliest possible <see cref="T:System.DateTimeOffset" /> value. This field is read-only.</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>Gets the month component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The month component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 1 and 12.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>Gets a <see cref="T:System.DateTimeOffset" /> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).</summary>
      <returns>An object whose date and time is the current local time and whose offset is the local time zone's offset from Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>Gets the time's offset from Coordinated Universal Time (UTC). </summary>
      <returns>An object that represents the difference between the current <see cref="T:System.DateTimeOffset" /> object's time value and Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object that has a specified date and time, and yields a <see cref="T:System.DateTimeOffset" /> object that has new a date and time.</summary>
      <returns>An object whose value is the sum of the values of <paramref name="dateTimeOffset" /> and <paramref name="timeSpan" />.</returns>
      <param name="dateTimeOffset">The object to add a time interval to.</param>
      <param name="timeSpan">The time interval to add.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
      <returns>true if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than (or later than) a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than or equal to a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is the same as or later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>Defines an implicit conversion of a <see cref="T:System.DateTime" /> object to a <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The converted object.</returns>
      <param name="dateTime">The object to convert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.-or-The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects refer to different points in time.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> do not have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Subtracts one <see cref="T:System.DateTimeOffset" /> object from another and yields a time interval.</summary>
      <returns>An object that represents the difference between <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The date and time to subtract from (the minuend).   </param>
      <param name="right">The date and time to subtract (the subtrahend).</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>Subtracts a specified time interval from a specified date and time, and yields a new date and time.</summary>
      <returns>An object that is equal to the value of <paramref name="dateTimeOffset" /> minus <paramref name="timeSpan" />.</returns>
      <param name="dateTimeOffset">The date and time to subtract from.</param>
      <param name="timeSpan">The time interval to subtract.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>Converts the specified string representation of a date, time, and offset to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information.</summary>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
      <param name="input">A string that contains a date and time to convert.   </param>
      <param name="formatProvider">An object that provides culture-specific format information about <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information and formatting style.</summary>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />, as specified by <paramref name="formatProvider" /> and <paramref name="styles" />.</returns>
      <param name="input">A string that contains a date and time to convert.   </param>
      <param name="formatProvider">An object that provides culture-specific format information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.   </param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.-or-<paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> includes an unsupported <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> includes <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the expected format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.-or-<paramref name="format" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").-or-<paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="format" /> is an empty string.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
      <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the expected format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.-or-The <paramref name="styles" /> parameter includes an unsupported value.-or-The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.-or-<paramref name="format" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").-or-<paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="format" /> is an empty string.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
      <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formats">An array of format specifiers that define the expected formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.-or-<paramref name="styles" /> includes an unsupported value.-or-The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").-or-<paramref name="input" /> does not contain a valid string representation of a date and time.-or-No element of <paramref name="formats" /> contains a valid format specifier.</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>Gets the second component of the clock time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The second component of the <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 59.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>Subtracts a <see cref="T:System.DateTimeOffset" /> value that represents a specific date and time from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object that specifies the interval between the two <see cref="T:System.DateTimeOffset" /> objects.</returns>
      <param name="value">The date and time to subtract.</param>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>Subtracts a specified time interval from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object that is equal to the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object, minus the time interval represented by <paramref name="value" />.</returns>
      <param name="value">The time interval to subtract.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the value of the current <see cref="T:System.DateTimeOffset" /> object with another object of the same type.</summary>
      <returns>One of the values in the following table.Return valueDescriptionLess than zeroThe current <see cref="T:System.DateTimeOffset" /> object is less than (earlier than) <paramref name="obj" />.ZeroThe current <see cref="T:System.DateTimeOffset" /> object is equal to (the same point in time as) <paramref name="obj" />.Greater than zeroThe current <see cref="T:System.DateTimeOffset" /> object is greater than (later than) <paramref name="obj" />.</returns>
      <param name="obj">The object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in clock time.</summary>
      <returns>The number of ticks in the <see cref="T:System.DateTimeOffset" /> object's clock time.</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>Gets the time of day for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object that represents the time interval of the current date that has elapsed since midnight.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to a Windows file time.</summary>
      <returns>The value of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a Windows file time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before midnight on January 1, 1601 C.E. Coordinated Universal Time (UTC).</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> object that represents the local time.</summary>
      <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to local time.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to the date and time specified by an offset value.</summary>
      <returns>An object that is equal to the original <see cref="T:System.DateTimeOffset" /> object (that is, their <see cref="M:System.DateTimeOffset.ToUniversalTime" /> methods return identical points in time) but whose <see cref="P:System.DateTimeOffset.Offset" /> property is set to <paramref name="offset" />.</returns>
      <param name="offset">The offset to convert the <see cref="T:System.DateTimeOffset" /> value to.   </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value earlier than <see cref="F:System.DateTimeOffset.MinValue" />.-or-The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than -14 hours.-or-<paramref name="offset" /> is greater than 14 hours.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.</summary>
      <returns>A string representation of a <see cref="T:System.DateTimeOffset" /> object that includes the offset appended at the end of the string.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture. </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="formatProvider" />.</returns>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />. </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format.</summary>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" />.</returns>
      <param name="format">A format string.</param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />. -or-<paramref name="format" /> does not contain a valid custom format pattern.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture. </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A format string.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.-or-<paramref name="format" /> does not contain a valid custom format pattern. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />. </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> value that represents the Coordinated Universal Time (UTC).</summary>
      <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>Tries to converts a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is null or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Tries to convert a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />. </param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is null or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  is not supported.-or-<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is None.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is null, or does not contain a valid string representation of a date and time in the expected format defined by <paramref name="format" /> and <paramref name="provider" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  is not supported.-or-<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formats">An array that defines the expected formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is None.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> does not contain a valid string representation of a date and time, or does not contain the date and time in the expected format defined by <paramref name="format" />, or if <paramref name="formats" /> is null. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  is not supported.-or-<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>An object whose value represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>Gets a <see cref="T:System.DateTimeOffset" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref="F:System.TimeSpan.Zero" />.</summary>
      <returns>An object whose date and time is the current Coordinated Universal Time (UTC) and whose offset is <see cref="F:System.TimeSpan.Zero" />.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in Coordinated Universal Time (UTC).</summary>
      <returns>The number of ticks in the <see cref="T:System.DateTimeOffset" /> object's Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>Gets the year component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The year component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 9999.</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>Specifies the day of the week.</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>Indicates Sunday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>Indicates Monday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>Indicates Tuesday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>Indicates Wednesday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>Indicates Thursday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>Indicates Friday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>Indicates Saturday.</summary>
    </member>
    <member name="T:System.DBNull">
      <summary>Represents a nonexistent value. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.DBNull.GetTypeCode">
      <summary>Gets the <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />.</summary>
      <returns>The <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />, which is <see cref="F:System.TypeCode.DBNull" />.</returns>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current <see cref="T:System.DBNull" /> object to the specified type.</summary>
      <returns>The boxed equivalent of the current <see cref="T:System.DBNull" /> object, if that conversion is supported; otherwise, an exception is thrown and no value is returned. </returns>
      <param name="type">The type to convert the current <see cref="T:System.DBNull" /> object to. </param>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface and is used to augment the conversion. If null is specified, format information is obtained from the current culture. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.ToString">
      <summary>Returns an empty string (<see cref="F:System.String.Empty" />).</summary>
      <returns>An empty string (<see cref="F:System.String.Empty" />).</returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
      <summary>Returns an empty string using the specified <see cref="T:System.IFormatProvider" />.</summary>
      <returns>An empty string (<see cref="F:System.String.Empty" />).</returns>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to be used to format the return value.-or- null to obtain the format information from the current locale setting of the operating system. </param>
    </member>
    <member name="F:System.DBNull.Value">
      <summary>Represents the sole instance of the <see cref="T:System.DBNull" /> class.</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>Represents a decimal number.</summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified double-precision floating-point number.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.-or- <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit signed integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> from parameters specifying the instance's constituent parts.</summary>
      <param name="lo">The low 32 bits of a 96-bit integer. </param>
      <param name="mid">The middle 32 bits of a 96-bit integer. </param>
      <param name="hi">The high 32 bits of a 96-bit integer. </param>
      <param name="isNegative">The sign of the number; 1 is negative, 0 is positive. </param>
      <param name="scale">A power of 10 ranging from 0 to 28. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> is greater than 28. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to a decimal value represented in binary and contained in a specified array.</summary>
      <param name="bits">An array of 32-bit signed integers containing a representation of a decimal value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="bits" /> is not 4.-or- The representation of the decimal value in <paramref name="bits" /> is not valid. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit signed integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified single-precision floating-point number.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.-or- <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit unsigned integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit unsigned integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>Adds two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>A <see cref="T:System.Decimal" /> value that is the sum of <paramref name="d1" /> and <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">The sum of <paramref name="d1" /> and <paramref name="d2" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>Returns the smallest integral value greater than or equal to the specified decimal number. </summary>
      <returns>The smallest integral value greater than or equal to the <paramref name="d" /> parameter. Note that this method returns a <see cref="T:System.Decimal" /> rather than an integral type.</returns>
      <param name="d">A decimal number.</param>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>Compares two specified <see cref="T:System.Decimal" /> values and returns an integer that indicates whether the first value is greater than, less than, or equal to the second value.</summary>
      <returns>A signed number indicating the relationship between <paramref name="d1" /> and <paramref name="d2" />.Return Value Meaning Less than zero <paramref name="d1" /> is less than <paramref name="d2" />. Zero <paramref name="d1" /> and <paramref name="d2" /> are equal. Greater than zero <paramref name="d1" /> is greater than <paramref name="d2" />. </returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>Compares this instance to a specified <see cref="T:System.Decimal" /> object and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified <see cref="T:System.Decimal" />.</summary>
      <returns>A signed number indicating the relationship between this instance and <paramref name="value" />.Return Value Meaning Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">A <see cref="T:System.Decimal" /> object.</param>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
      <summary>Compares this instance to a specified <see cref="T:System.Object" /> and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified <see cref="T:System.Object" />.</summary>
      <returns>A signed number indicating the relationship between this instance and <paramref name="value" />.Return Value Meaning Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An <see cref="T:System.Object" /> or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Decimal" />. </exception>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>Divides two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> that is the result of dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value (that is, the quotient) is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Decimal" /> object represent the same value.</summary>
      <returns>true if <paramref name="value" /> is equal to this instance; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether two specified instances of <see cref="T:System.Decimal" /> represent the same value.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Object" /> represent the same type and value.</summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Decimal" /> and equal to this instance; otherwise, false.</returns>
      <param name="value">An <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>Rounds a specified <see cref="T:System.Decimal" /> number to the closest integer toward negative infinity.</summary>
      <returns>If <paramref name="d" /> has a fractional part, the next whole <see cref="T:System.Decimal" /> number toward negative infinity that is less than <paramref name="d" />.-or- If <paramref name="d" /> doesn't have a fractional part, <paramref name="d" /> is returned unchanged.</returns>
      <param name="d">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>Converts the value of a specified instance of <see cref="T:System.Decimal" /> to its equivalent binary representation.</summary>
      <returns>A 32-bit signed integer array with four elements that contain the binary representation of <paramref name="d" />.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> value. </param>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Decimal" />.</summary>
      <returns>The enumerated constant <see cref="F:System.TypeCode.Decimal" />.</returns>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.</summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>Represents the number negative one (-1).</summary>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.</summary>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>Multiplies two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>A <see cref="T:System.Decimal" /> that is the result of multiplying <paramref name="d1" /> and <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the multiplicand). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the multiplier). </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>Returns the result of multiplying the specified <see cref="T:System.Decimal" /> value by negative one.</summary>
      <returns>A <see cref="T:System.Decimal" /> with the value of <paramref name="d" />, but the opposite sign.-or- Zero, if <paramref name="d" /> is zero.</returns>
      <param name="d">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="F:System.Decimal.One">
      <summary>Represents the number one (1).</summary>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>Adds two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of adding <paramref name="d1" /> and <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>Decrements the <see cref="T:System.Decimal" /> operand by one.</summary>
      <returns>The value of <paramref name="d" /> decremented by 1.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> operand. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>Divides two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Decimal" /> are equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>Converts a <see cref="T:System.Decimal" /> to an 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>Converts a <see cref="T:System.Decimal" /> to a Unicode character.</summary>
      <returns>A Unicode character that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>Converts a <see cref="T:System.Decimal" /> to an 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>Converts a <see cref="T:System.Decimal" /> to a double-precision floating-point number.</summary>
      <returns>A double-precision floating-point number that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>Converts a <see cref="T:System.Decimal" /> to a single-precision floating-point number.</summary>
      <returns>A single-precision floating-point number that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>Converts a double-precision floating-point number to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted double-precision floating point number.</returns>
      <param name="value">A double-precision floating-point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.-or- <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>Converts a single-precision floating-point number to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted single-precision floating point number.</returns>
      <param name="value">A single-precision floating-point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.-or- <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than another specified <see cref="T:System.Decimal" />.</summary>
      <returns>true if <paramref name="d1" /> is greater than <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than or equal to another specified <see cref="T:System.Decimal" />.</summary>
      <returns>true if <paramref name="d1" /> is greater than or equal to <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>Converts an 8-bit unsigned integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 8-bit unsigned integer.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>Converts a Unicode character to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted Unicode character.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>Converts a 16-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 16-bit signed integer.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>Converts a 32-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 32-bit signed integer.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>Converts a 64-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 64-bit signed integer.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>Converts an 8-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 8-bit signed integer.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>Converts a 16-bit unsigned integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 16-bit unsigned integer.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>Converts a 32-bit unsigned integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 32-bit unsigned integer.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>Converts a 64-bit unsigned integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 64-bit unsigned integer.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>Increments the <see cref="T:System.Decimal" /> operand by 1.</summary>
      <returns>The value of <paramref name="d" /> incremented by 1.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> operand. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Decimal" /> are not equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> are not equal; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than another specified <see cref="T:System.Decimal" />.</summary>
      <returns>true if <paramref name="d1" /> is less than <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than or equal to another specified <see cref="T:System.Decimal" />.</summary>
      <returns>true if <paramref name="d1" /> is less than or equal to <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>Returns the remainder resulting from dividing two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> remainder resulting from dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>Multiplies two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of multiplying <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>Subtracts two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of subtracting <paramref name="d2" /> from <paramref name="d1" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>Negates the value of the specified <see cref="T:System.Decimal" /> operand.</summary>
      <returns>The result of <paramref name="d" /> multiplied by negative one (-1).</returns>
      <param name="d">The <see cref="T:System.Decimal" /> operand. </param>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>Returns the value of the <see cref="T:System.Decimal" /> operand (the sign of the operand is unchanged).</summary>
      <returns>The value of the operand, <paramref name="d" />.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> operand. </param>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">The string representation of the number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its <see cref="T:System.Decimal" /> equivalent.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" />.</returns>
      <param name="s">The string representation of the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" /> and <paramref name="provider" />.</returns>
      <param name="s">The string representation of the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific information about the format of <paramref name="s" />. </param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified culture-specific format information.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
      <param name="s">The string representation of the number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific parsing information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>Computes the remainder after dividing two <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> that is the remainder after dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>Rounds a <see cref="T:System.Decimal" /> value to a specified number of decimal places.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to <paramref name="d" /> rounded to <paramref name="decimals" /> number of decimal places.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> value to round. </param>
      <param name="decimals">A value from 0 to 28 that specifies the number of decimal places to round to. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> is not a value from 0 to 28. </exception>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>Subtracts one specified <see cref="T:System.Decimal" /> value from another.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of subtracting <paramref name="d2" /> from <paramref name="d1" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the minuend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the subtrahend). </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored. </param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int32" />.</returns>
      <param name="provider">The parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <paramref name="type" />.</returns>
      <param name="type">The type to which to convert the value of this <see cref="T:System.Decimal" /> instance. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <param name="value">The <see cref="T:System.Decimal" /> value. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent double-precision floating-point number.</summary>
      <returns>A double-precision floating-point number equivalent to <paramref name="d" />.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert. </param>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> value. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="d" />.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="d" />.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> value. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent single-precision floating-point number.</summary>
      <returns>A single-precision floating-point number equivalent to the value of <paramref name="d" />.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert. </param>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>A string that represents the value of this instance.</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> value to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="d" />.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="d" />.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>Returns the integral digits of the specified <see cref="T:System.Decimal" />; any fractional digits are discarded.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of <paramref name="d" /> rounded toward zero, to the nearest whole number.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> to truncate. </param>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">The string representation of the number to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or is zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not a number in a valid format, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">The string representation of the number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific parsing information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or is zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>Represents the number zero (0).</summary>
    </member>
    <member name="T:System.Delegate">
      <summary>Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</summary>
    </member>
    <member name="M:System.Delegate.#ctor(System.Object,System.String)">
      <summary>Initializes a delegate that invokes the specified instance method on the specified class instance.</summary>
      <param name="target">The class instance on which the delegate invokes <paramref name="method" />. </param>
      <param name="method">The name of the instance method that the delegate represents. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">There was an error binding to the target method.</exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.#ctor(System.Type,System.String)">
      <summary>Initializes a delegate that invokes the specified static method from the specified class.</summary>
      <param name="target">The class that defines <paramref name="method" />. </param>
      <param name="method">The name of the static method that the delegate represents. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a RuntimeType. See Runtime Types in Reflection.-or-<paramref name="target" /> represents an open generic type.</exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>Concatenates the invocation lists of two delegates.</summary>
      <returns>A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order. Returns <paramref name="a" /> if <paramref name="b" /> is null, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</returns>
      <param name="a">The delegate whose invocation list comes first. </param>
      <param name="b">The delegate whose invocation list comes last. </param>
      <exception cref="T:System.ArgumentException">Both <paramref name="a" /> and <paramref name="b" /> are not null, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type. </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
      <summary>Concatenates the invocation lists of the specified delegate and the current delegate.</summary>
      <returns>A new delegate with an invocation list that concatenates the invocation list of the current delegate and the invocation list of <paramref name="d" />, or the current delegate if <paramref name="d" /> is null.</returns>
      <param name="d">The delegate whose invocation list is to be combined with the invocation list of the current delegate. </param>
      <exception cref="T:System.MulticastNotSupportedException">In all cases. </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
      <summary>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</summary>
      <returns>A delegate of the specified type that represents the specified static or instance method. </returns>
      <param name="type">The type of delegate to create. </param>
      <param name="firstArgument">The object to which the delegate is bound, or null to treat <paramref name="method" /> as static (Shared in Visual Basic). </param>
      <param name="method">The static or instance method the delegate is to represent.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="method" /> cannot be bound.-or-<paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</summary>
      <returns>A delegate of the specified type that represents the specified static or instance method, or null if <paramref name="throwOnBindFailure" /> is false and the delegate cannot be bound to <paramref name="method" />. </returns>
      <param name="type">A type representing the type of delegate to create. </param>
      <param name="firstArgument">The first argument of the method the delegate represents. For instance methods, it must be compatible with the instance type. </param>
      <param name="method">The static or instance method the delegate is to represent.</param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is true.-or-<paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</summary>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked. </param>
      <param name="method">The name of the instance method that the delegate is to represent. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />. -or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection.-or- <paramref name="method" /> is not an instance method. -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</summary>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked. </param>
      <param name="method">The name of the instance method that the delegate is to represent. </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection.-or- <paramref name="method" /> is not an instance method. -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</summary>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked. </param>
      <param name="method">The name of the instance method that the delegate is to represent. </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false. </param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-  <paramref name="method" /> is not an instance method. -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found, and <paramref name="throwOnBindFailure" /> is true.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a delegate of the specified type to represent the specified static method.</summary>
      <returns>A delegate of the specified type to represent the specified static method.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="method">The static or instance method the delegate is to represent. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or- <paramref name="method" /> cannot be bound.-or-<paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)">
      <summary>Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</summary>
      <returns>A delegate of the specified type to represent the specified static method.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="method">The static or instance method the delegate is to represent.</param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is true.-or-<paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class.</summary>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class that implements <paramref name="method" />. </param>
      <param name="method">The name of the static method that the delegate is to represent. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or- <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="target" /> is not a RuntimeType.-or-<paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is true.-or-<paramref name="method" /> is not a static method (Shared method in Visual Basic). -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found, and <paramref name="throwOnBindFailure" /> is true.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</summary>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class that implements <paramref name="method" />. </param>
      <param name="method">The name of the static method that the delegate is to represent. </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or- <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="target" /> is not a RuntimeType.-or-<paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is true.-or-<paramref name="method" /> is not a static method (Shared method in Visual Basic). -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</summary>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class that implements <paramref name="method" />. </param>
      <param name="method">The name of the static method that the delegate is to represent. </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false.</param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or- <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="target" /> is not a RuntimeType.-or-<paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is true.-or-<paramref name="method" /> is not a static method (Shared method in Visual Basic). -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found, and <paramref name="throwOnBindFailure" /> is true. </exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>Dynamically invokes (late-bound) the method represented by the current delegate.</summary>
      <returns>The object returned by the method represented by the delegate.</returns>
      <param name="args">An array of objects that are the arguments to pass to the method represented by the current delegate.-or- A null reference (Nothing in Visual Basic), if the method represented by the current delegate does not require arguments. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).-or- The number, order, or type of parameters listed in <paramref name="args" /> is invalid. </exception>
      <exception cref="T:System.Reflection.TargetException">The method represented by the delegate is an instance method and the target object is null.-or- The method represented by the delegate is invoked on an object or a class that does not support it. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">One of the encapsulated methods throws an exception. </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</summary>
      <returns>true if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, false.</returns>
      <param name="obj">The object to compare with the current delegate. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>Returns a hash code for the delegate.</summary>
      <returns>A hash code for the delegate.</returns>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>Returns the invocation list of the delegate.</summary>
      <returns>An array of delegates representing the invocation list of the current delegate.</returns>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>Gets the method represented by the delegate.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</returns>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>Determines whether the specified delegates are equal.</summary>
      <returns>true if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">The first delegate to compare. </param>
      <param name="d2">The second delegate to compare. </param>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>Determines whether the specified delegates are not equal.</summary>
      <returns>true if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">The first delegate to compare. </param>
      <param name="d2">The second delegate to compare. </param>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</summary>
      <returns>A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />. Returns <paramref name="source" /> if <paramref name="value" /> is null or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />. Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</returns>
      <param name="source">The delegate from which to remove the invocation list of <paramref name="value" />. </param>
      <param name="value">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
      <summary>Removes the invocation list of a delegate from the invocation list of another delegate.</summary>
      <returns>A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list. Returns the current delegate if <paramref name="value" /> is null or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list. Returns null if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</returns>
      <param name="d">The delegate that supplies the invocation list to remove from the invocation list of the current delegate. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>Gets the class instance on which the current delegate invokes the instance method.</summary>
      <returns>The object on which the current delegate invokes the instance method, if the delegate represents an instance method; null if the delegate represents a static method.</returns>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>The exception that is thrown when there is an attempt to divide an integral or decimal value by zero.</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class.</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>The exception that is thrown when a DLL specified in a DLL import cannot be found.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with default properties.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Double">
      <summary>Represents a double-precision floating-point number.</summary>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />). </returns>
      <param name="value">A double-precision floating-point number to compare. </param>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Value Description A negative integer This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- This instance and <paramref name="value" /> are both Double.NaN, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />A positive integer This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Double" />. </exception>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>Represents the smallest positive <see cref="T:System.Double" /> value greater than zero. This field is constant.</summary>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Double" /> object represent the same value.</summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Double" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Double" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to negative or positive infinity </summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.</returns>
      <param name="d">A double-precision floating-point number. </param>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to a value that is not a number (<see cref="F:System.Double.NaN" />).</summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.NaN" />; otherwise, false.</returns>
      <param name="d">A double-precision floating-point number. </param>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to negative infinity.</summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.</returns>
      <param name="d">A double-precision floating-point number. </param>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to positive infinity.</summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, false.</returns>
      <param name="d">A double-precision floating-point number. </param>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Double" />. This field is constant.</summary>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Double" />. This field is constant.</summary>
    </member>
    <member name="F:System.Double.NaN">
      <summary>Represents a value that is not a number (NaN). This field is constant.</summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>Represents negative infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>Converts the string representation of a number to its double-precision floating-point number equivalent.</summary>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.</summary>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is a combination of <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value. </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</summary>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.</summary>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />. </summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" /></summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Double" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored. </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.   </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="result">When this method returns, contains the double-precision floating-point number equivalent to the <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not a number in a valid format, or represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains a double-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="T:System.EntryPointNotFoundException">
      <summary>The exception that is thrown when an attempt to load a class fails due to the absence of an entry method.</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class.</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Enum">
      <summary>Provides the base class for enumerations.</summary>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Enum" /> class. </summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relationship of this instance to <paramref name="target" />.Return Value Description Less than zero The value of this instance is less than the value of <paramref name="target" />. Zero The value of this instance is equal to the value of <paramref name="target" />. Greater than zero The value of this instance is greater than the value of <paramref name="target" />.-or- <paramref name="target" /> is null. </returns>
      <param name="target">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> and this instance are not the same type. </exception>
      <exception cref="T:System.InvalidOperationException">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. </exception>
      <exception cref="T:System.NullReferenceException">This instance is null.</exception>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an <see cref="T:System.Enum" /> with the same underlying type and value as this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null. </param>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>Returns the hash code for the value of this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>Retrieves the name of the constant in the specified enumeration that has the specified value.</summary>
      <returns>A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />, or a null if no such constant is found.</returns>
      <param name="enumType">An enumeration type.</param>
      <param name="value">The value of the underlying type of a particular enumerated constant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or-<paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</exception>
    </member>
    <member name="M:System.Enum.GetTypeCode">
      <summary>Returns the underlying <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The <see cref="T:System.TypeCode" /> for this instance.</returns>
      <exception cref="T:System.InvalidOperationException">The enumeration type is unknown.</exception>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>Returns the underlying type of the specified enumeration.</summary>
      <returns>The underlying <see cref="T:System.Type" /> of <paramref name="enumType" />.</returns>
      <param name="enumType">An enumeration type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />. </exception>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>Determines whether one or more bit fields are set in the current instance.</summary>
      <returns>true if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, false.</returns>
      <param name="flag">An enumeration value.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> is a different type than the current instance.</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>Returns an indication whether a constant with a specified value exists in a specified enumeration.</summary>
      <returns>true if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, false.</returns>
      <param name="enumType">An enumeration type. </param>
      <param name="value">The value or name of a constant in <paramref name="enumType" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an Enum.-or- The type of <paramref name="value" /> is not an <paramref name="enumType" />.-or- The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />. </exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.</summary>
      <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
      <param name="enumType">The <see cref="T:System.Type" /> of the enumeration. </param>
      <param name="value">A string containing the name or value to convert. </param>
      <param name="ignoreCase">If true, ignore case; otherwise, regard case. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is either an empty string ("") or only contains white space.-or- <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the current value to a Boolean value based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the current value to an 8-bit unsigned integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the current value to a Unicode character based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the current value to a double-precision floating point number based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the current value to a 16-bit signed integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the current value to a 32-bit signed integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the current value to a 64-bit signed integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the current value to an 8-bit signed integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the current value to a single-precision floating point number based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current value to a specified type based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="type">The type to convert to. </param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the current value to a 16-bit unsigned integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the current value to a 32-bit unsigned integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the current value to a 64-bit unsigned integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>Returns an instance of the specified enumeration set to the specified value.</summary>
      <returns>An enumeration object whose value is <paramref name="value" />.</returns>
      <param name="enumType">An enumeration. </param>
      <param name="value">The value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. </exception>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
      <summary>This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</summary>
      <returns>The string representation of the value of this instance.</returns>
      <param name="provider">(obsolete) </param>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>Converts the value of this instance to its equivalent string representation using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A format string. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> contains an invalid specification. </exception>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
      <summary>This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</summary>
      <returns>The string representation of the value of this instance, as specified by <paramref name="format" />.</returns>
      <param name="format">A format specification. </param>
      <param name="provider">(obsolete)</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> does not contain a valid format specification. </exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="value" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
      <param name="ignoreCase">true to ignore case; false to consider case.</param>
      <param name="result">When this method returns, contains an object of type <paramref name="TEnum" /> whose value is represented by <paramref name="value" />. This parameter is passed uninitialized.</param>
      <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="value" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
      <param name="result">When this method returns, contains an object of type <paramref name="TEnum" /> whose value is represented by <paramref name="value" />. This parameter is passed uninitialized.</param>
      <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
    </member>
    <member name="T:System.Environment">
      <summary>Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>Gets or sets the fully qualified path of the current working directory.</summary>
      <returns>A string containing a directory path. </returns>
      <exception cref="T:System.ArgumentException">Attempted to set to an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">Attempted to set to null. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Attempted to set a local path that cannot be found. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the appropriate permission. </exception>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>Gets or sets the exit code of the process.</summary>
      <returns>A 32-bit signed integer containing the exit code. The default value is zero.</returns>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <summary>[SECURITY CRITICAL] Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft. </summary>
      <param name="message">A message that explains why the process was terminated, or null if no explanation is provided. </param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
      <summary>[SECURITY CRITICAL] Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.</summary>
      <param name="message">A message that explains why the process was terminated, or null if no explanation is provided.</param>
      <param name="exception">An exception that represents the error that caused the termination. This is typically the exception in a catch block.</param>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>Gets the path to the system special folder identified by the specified enumeration.</summary>
      <returns>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, the empty string ("").A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</returns>
      <param name="folder">An enumerated constant that identifies a system special folder. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> is not a member of <see cref="T:System.Environment.SpecialFolder" />. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current platform is not supported.</exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>Gets a value indicating whether the common language runtime is shutting down or the current application domain is unloading.</summary>
      <returns>true if the common language runtime is shutting down or the current <see cref="T:System.AppDomain" /> is unloading; otherwise, false.The current application domain is the <see cref="T:System.AppDomain" /> that contains the object that is calling <see cref="P:System.Environment.HasShutdownStarted" />.</returns>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>Gets the newline string defined for this environment.</summary>
      <returns>A string containing "\r\n" for non-Unix platforms,  or a string containing "\n" for Unix platforms.</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>Gets an <see cref="T:System.OperatingSystem" /> object that contains the current platform identifier and version number.</summary>
      <returns>An <see cref="T:System.OperatingSystem" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">This property was unable to obtain the system version.-or- The obtained platform identifier is not a member of <see cref="T:System.PlatformID" />. </exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>Gets the number of processors on the current machine.</summary>
      <returns>The 32-bit signed integer that specifies the number of processors on the current machine. There is no default.</returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>Gets the number of milliseconds elapsed since the system started.</summary>
      <returns>A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.</returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>Gets a <see cref="T:System.Version" /> object that describes the major, minor, build, and revision numbers of the common language runtime.</summary>
      <returns>A <see cref="T:System.Version" /> object.</returns>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>When it is called by trusted applications, specifies enumerated constants used to retrieve directory paths to system special folders.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>The directory that serves as a common repository for application-specific data for the current roaming user.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>The directory that serves as a common repository for application-specific data that is used by all users.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>The directory that serves as a common repository for Internet cookies.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>The logical Desktop rather than the physical file system location.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>The directory that serves as a common repository for the user's favorite items.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>The directory that serves as a common repository for Internet history items.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>The directory that serves as a common repository for temporary Internet files.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>The directory that contains the user's program groups.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>The "My Computer" folder. </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>The "My Music" folder.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>The "My Pictures" folder.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyVideos">
      <summary>The "My Videos" folder.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>The directory that contains the user's most recently used documents.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>The directory that contains the Send To menu items.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>The directory that contains the Start menu items.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>The directory that corresponds to the user's Startup program group.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>The System directory.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>The directory that serves as a common repository for document templates.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>The directory used to physically store file objects on the desktop.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>The directory that serves as a common repository for documents.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>The "My Documents" folder.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>The program files directory.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>The directory for components that are shared across applications.</summary>
    </member>
    <member name="T:System.EventArgs">
      <summary>
        <see cref="T:System.EventArgs" /> is the base class for classes containing event data. </summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EventArgs" /> class.</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>Represents an event with no event data.</summary>
    </member>
    <member name="T:System.EventHandler">
      <summary>Represents the method that will handle an event that has no event data.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains no event data. </param>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>Represents the method that will handle an event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="T:System.Exception">
      <summary>Represents errors that occur during application execution.</summary>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class.</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.</returns>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</summary>
      <returns>The first exception thrown in a chain of exceptions. If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (Nothing in Visual Basic), this property returns the current exception.</returns>
    </member>
    <member name="M:System.Exception.GetType">
      <summary>Gets the runtime type of the current instance.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</returns>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</summary>
      <returns>The HRESULT value.</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</summary>
      <returns>An instance of Exception that describes the error that caused the current exception. The InnerException property returns the same value as was passed into the constructor, or a null reference (Nothing in Visual Basic) if the inner exception value was not supplied to the constructor. This property is read-only.</returns>
    </member>
    <member name="P:System.Exception.Message">
      <summary>Gets a message that describes the current exception.</summary>
      <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>Gets a string representation of the frames on the call stack at the time the current exception was thrown.</summary>
      <returns>A string that describes the contents of the call stack, with the most recent method call appearing first.</returns>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>Creates and returns a string representation of the current exception.</summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="T:System.ExecutionEngineException">
      <summary>The exception that is thrown when there is an internal error in the execution engine of the common language runtime. This class cannot be inherited.  </summary>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>The exception that is thrown when there is an invalid attempt to access a private or protected field inside a class.</summary>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>The exception that is thrown when the format of an argument does not meet the parameter specifications of the invoked method.</summary>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class.</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Func`6">
      <summary>Encapsulates a method that has five parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Func`7">
      <summary>Encapsulates a method that has six parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Func`8">
      <summary>Encapsulates a method that has seven parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Func`9">
      <summary>Encapsulates a method that has eight parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.GC">
      <summary>Controls the system garbage collector, a service that automatically reclaims unused memory.</summary>
    </member>
    <member name="M:System.GC.Collect">
      <summary>Induces an immediate garbage collection of all generations. </summary>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>Retrieves the number of bytes currently thought to be allocated. A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</summary>
      <returns>A number that is the best available approximation of the number of bytes currently allocated in managed memory.</returns>
      <param name="forceFullCollection">true to indicate that this method can wait for garbage collection to occur before returning; otherwise, false.</param>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</summary>
      <param name="obj">The object to reference. </param>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>Gets the maximum number of generations that the system currently supports.</summary>
      <returns>A value that ranges from zero to the maximum number of supported generations.</returns>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>Requests that the system call the finalizer for the specified object for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</summary>
      <param name="obj">The object that a finalizer must be called for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null. </exception>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>Requests that the system not call the finalizer for the specified object.</summary>
      <param name="obj">The object that a finalizer must not be called for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null. </exception>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</summary>
    </member>
    <member name="T:System.Guid">
      <summary>Represents a globally unique identifier (GUID).</summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified array of bytes.</summary>
      <param name="b">A 16 element byte array containing values with which to initialize the GUID. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> is not 16 bytes long. </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified integers and bytes.</summary>
      <param name="a">The first 4 bytes of the GUID. </param>
      <param name="b">The next 2 bytes of the GUID. </param>
      <param name="c">The next 2 bytes of the GUID. </param>
      <param name="d">The next byte of the GUID. </param>
      <param name="e">The next byte of the GUID. </param>
      <param name="f">The next byte of the GUID. </param>
      <param name="g">The next byte of the GUID. </param>
      <param name="h">The next byte of the GUID. </param>
      <param name="i">The next byte of the GUID. </param>
      <param name="j">The next byte of the GUID. </param>
      <param name="k">The next byte of the GUID. </param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified integers and byte array.</summary>
      <param name="a">The first 4 bytes of the GUID. </param>
      <param name="b">The next 2 bytes of the GUID. </param>
      <param name="c">The next 2 bytes of the GUID. </param>
      <param name="d">The remaining 8 bytes of the GUID. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> is not 8 bytes long. </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> class using the value represented by the specified string.</summary>
      <param name="g">A <see cref="T:System.String" /> that contains a GUID in one of the following formats ('d' represents a hexadecimal digit whose case is ignored): 32 contiguous digits: dddddddddddddddddddddddddddddddd -or- Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses: dddddddd-dddd-dddd-dddd-dddddddddddd -or- {dddddddd-dddd-dddd-dddd-dddddddddddd} -or- (dddddddd-dddd-dddd-dddd-dddddddddddd) -or- Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by "0x" or "0X", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces: {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}} All braces, commas, and "0x" prefixes are required. All embedded spaces are ignored. All leading zeroes in a group are ignored.The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low order digits of the group. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> is null. </exception>
      <exception cref="T:System.FormatException">The format of <paramref name="g" /> is invalid. </exception>
      <exception cref="T:System.OverflowException">The format of <paramref name="g" /> is invalid. </exception>
      <exception cref="T:System.Exception">An internal type conversion error occurred. </exception>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>Compares this instance to a specified <see cref="T:System.Guid" /> object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Value Description A negative integer This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. A positive integer This instance is greater than <paramref name="value" />. </returns>
      <param name="value">A <see cref="T:System.Guid" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Value Description A negative integer This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. A positive integer This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Guid" />. </exception>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>A read-only instance of the <see cref="T:System.Guid" /> class whose value is guaranteed to be all zeroes.</summary>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Guid" /> object represent the same value.</summary>
      <returns>true if <paramref name="g" /> is equal to this instance; otherwise, false.</returns>
      <param name="g">A <see cref="T:System.Guid" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Guid" /> that has the same value as this instance; otherwise, false.</returns>
      <param name="o">The object to compare with this instance. </param>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> class.</summary>
      <returns>A new <see cref="T:System.Guid" /> object.</returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>Returns an indication whether the values of two specified <see cref="T:System.Guid" /> objects are equal.</summary>
      <returns>true if <paramref name="a" /> and <paramref name="b" /> are equal; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.Guid" /> object. </param>
      <param name="b">A <see cref="T:System.Guid" /> object. </param>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>Returns an indication whether the values of two specified <see cref="T:System.Guid" /> objects are not equal.</summary>
      <returns>true if <paramref name="a" /> and <paramref name="b" /> are not equal; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.Guid" /> object. </param>
      <param name="b">A <see cref="T:System.Guid" /> object. </param>
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> value.</summary>
      <returns>A value that contains the GUID that was parsed.</returns>
      <param name="input">The GUID to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not in a recognized format.</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> value, provided that the string is in the specified format.</summary>
      <returns>A value that contains the GUID that was parsed.</returns>
      <param name="input">The GUID to convert.</param>
      <param name="format">One of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B", "P", or "X".</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> or <paramref name="format" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not in a recognized format.</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>Returns a 16-element byte array that contains the value of this instance.</summary>
      <returns>A 16-element byte array.</returns>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the value of this instance in registry format.</summary>
      <returns>A String formatted in this pattern: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx where the value of the GUID is represented as a series of lower-case hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is "382c74c3-721d-4f34-80e5-57657b6cbc27".</returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>Returns a <see cref="T:System.String" /> representation of the value of this <see cref="T:System.Guid" /> instance, according to the provided format specifier.</summary>
      <returns>The value of this <see cref="T:System.Guid" />, represented as a series of lowercase hexadecimal digits in the specified format. </returns>
      <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B", or "P". If <paramref name="format" /> is null or the empty string (""), "D" is used. </param>
      <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not null, the empty string (""), "N", "D", "B", or "P". </exception>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
      <summary>Returns a <see cref="T:System.String" /> representation of the value of this instance of the <see cref="T:System.Guid" /> class, according to the provided format specifier and culture-specific format information.</summary>
      <returns>The value of this <see cref="T:System.Guid" />, represented as a series of lowercase hexadecimal digits in the specified format. </returns>
      <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B", or "P". If <paramref name="format" /> is null or the empty string (""), "D" is used. </param>
      <param name="provider">(Reserved) An IFormatProvider reference that supplies culture-specific formatting services. </param>
      <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not null, the empty string (""), "N", "D", "B", or "P". </exception>
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> value. </summary>
      <returns>true if the parse operation was successful; otherwise, false.</returns>
      <param name="input">The GUID to convert.</param>
      <param name="result">When this method returns, contains the value that is equivalent to the GUID contained in <paramref name="input" /> if the conversion succeeded, or <see cref="F:System.Guid.Empty" /> if the conversion failed. .</param>
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> value, provided that the string is in the specified format.</summary>
      <returns>true if the parse operation was successful; otherwise, false.</returns>
      <param name="input">The GUID to convert.</param>
      <param name="format">One of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B", "P", or "X".</param>
      <param name="result">When this method returns, contains the value that is equivalent to the GUID contained in <paramref name="input" /> if the conversion succeeded, or <see cref="F:System.Guid.Empty" /> if the conversion failed.</param>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>Represents the status of an asynchronous operation. </summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
      <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</summary>
      <returns>A wait handle that is used to wait for an asynchronous operation to complete.</returns>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>Gets a value that indicates whether the asynchronous operation completed synchronously.</summary>
      <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>Gets a value that indicates whether the asynchronous operation has completed.</summary>
      <returns>true if the operation is complete; otherwise, false.</returns>
    </member>
    <member name="T:System.IComparable">
      <summary>Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.</summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />. </returns>
      <param name="obj">An object to compare with this instance. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="T:System.IComparable`1">
      <summary>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering instances.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>Compares the current object with another object of the same type.</summary>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />. </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="T:System.IConvertible">
      <summary>Defines methods that convert the value of the implementing reference or value type to a common language runtime type that has an equivalent value.</summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>Defines a method that supports custom, user-defined formatting of the value of an object.</summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</summary>
      <returns>The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
      <param name="format">A format string containing formatting specifications. </param>
      <param name="arg">An object to format. </param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies format information about the current instance. </param>
    </member>
    <member name="T:System.IDisposable">
      <summary>Defines a method to release allocated resources.</summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>Provides a mechanism for retrieving an object to control formatting.</summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>Returns an object that provides formatting services for the specified type.</summary>
      <returns>An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, null.</returns>
      <param name="formatType">An object that specifies the type of format object to return. </param>
    </member>
    <member name="T:System.IFormattable">
      <summary>Provides functionality to format the value of an object into a string representation.</summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>The exception that is thrown when an attempt is made to access an element of an array with an index that is outside the bounds of the array. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class.</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Int16">
      <summary>Represents a 16-bit signed integer.</summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>Compares this instance to a specified 16-bit signed integer and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified 16-bit signed integer value.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An integer to compare. </param>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int16" />. </exception>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int16" /> value.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Int16" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Int16" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance. </param>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int16" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int16" />.</returns>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:System.Int16" />. This field is constant.</summary>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Int16" />. This field is constant.</summary>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>Converts the string representation of a number to its 16-bit signed integer equivalent.</summary>
      <returns>A 16-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 16-bit signed integer equivalent.</summary>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent.</summary>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 16-bit signed integer equivalent.</summary>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Int16" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific formatting information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>Converts the string representation of a number to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="result">When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.Int32">
      <summary>Represents a 32-bit signed integer.</summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>Compares this instance to a specified 32-bit signed integer and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified 32-bit signed integer.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An integer to compare. </param>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int32" />. </exception>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int32" /> value. </summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Int32" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Int32" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int32" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int32" />.</returns>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:System.Int32" />. This field is constant.</summary>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Int32" />. This field is constant.</summary>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>Converts the string representation of a number to its 32-bit signed integer equivalent.</summary>
      <returns>A 32-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.</summary>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent.</summary>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific information about the format of <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 32-bit signed integer equivalent.</summary>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Int32" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>Converts the string representation of a number to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.Int64">
      <summary>Represents a 64-bit signed integer.</summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>Compares this instance to a specified 64-bit signed integer and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An integer to compare. </param>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int64" />. </exception>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int64" /> value.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Int64" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of an <see cref="T:System.Int64" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int64" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int64" />.</returns>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>Represents the largest possible value of an Int64. This field is constant.</summary>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>Represents the smallest possible value of an Int64. This field is constant.</summary>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>Converts the string representation of a number to its 64-bit signed integer equivalent.</summary>
      <returns>A 64-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 64-bit signed integer equivalent.</summary>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent.</summary>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 64-bit signed integer equivalent.</summary>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />. </summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Int64" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance. </param>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 64-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>Converts the string representation of a number to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="result">When this method returns, contains the 64-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.IntPtr">
      <summary>A platform-specific type that is used to represent a pointer or a handle.</summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 32-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 32-bit signed integer. </param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 64-bit pointer.</summary>
      <param name="value">A pointer or handle contained in a 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large or too small to represent as an <see cref="T:System.IntPtr" />. </exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified pointer to an unspecified type.</summary>
      <param name="value">A pointer to an unspecified type. </param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.IntPtr" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance or null. </param>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are equal.</summary>
      <returns>true if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, false.</returns>
      <param name="value1">An <see cref="T:System.IntPtr" />. </param>
      <param name="value2">An <see cref="T:System.IntPtr" />. </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>Converts the value of a 32-bit signed integer to an <see cref="T:System.IntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>Converts the value of a 64-bit signed integer to an <see cref="T:System.IntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.IntPtr" />. </exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a pointer to an unspecified type.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">An <see cref="T:System.IntPtr" />. </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 64-bit signed integer.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">An <see cref="T:System.IntPtr" />. </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 32-bit signed integer.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">An <see cref="T:System.IntPtr" />. </param>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit signed integer. </exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>Converts the specified pointer to an unspecified type to an <see cref="T:System.IntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A pointer to an unspecified type. </param>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are not equal.</summary>
      <returns>true if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, false.</returns>
      <param name="value1">An <see cref="T:System.IntPtr" />. </param>
      <param name="value2">An <see cref="T:System.IntPtr" />. </param>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>Gets the size of this instance.</summary>
      <returns>The size of a pointer or handle on this platform, measured in bytes. The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.</returns>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>Converts the value of this instance to a 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equal to the value of this instance.</returns>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer. </exception>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>Converts the value of this instance to a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equal to the value of this instance.</returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>Converts the value of this instance to a pointer to an unspecified type.</summary>
      <returns>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.</returns>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>Converts the numeric value of the current <see cref="T:System.IntPtr" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>A read-only field that represents a pointer or handle that has been initialized to zero.</summary>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>The exception that is thrown for invalid casting or explicit conversion.</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class.</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>The exception that is thrown when a method call is invalid for the object's current state.</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>The exception that is thrown when a program contains invalid Microsoft intermediate language (MSIL) or metadata. Generally this indicates a bug in the compiler that generated the program.</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with default properties.</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>The exception that is thrown when time zone information is invalid.</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with a system-supplied message.</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with the specified message string.</summary>
      <param name="message">A string that describes the exception.</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.IServiceProvider">
      <summary>Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects.</summary>
    </member>
    <member name="M:System.IServiceProvider.GetService(System.Type)">
      <summary>Gets the service object of the specified type.</summary>
      <returns>A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.</returns>
      <param name="serviceType">An object that specifies the type of service object to get. </param>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>An enumeration used to specify loader optimizations for an executable.</summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>Indicates that no optimizations for sharing internal resources are specified. If the default domain or hosting interface specified an optimization, then the loader uses that; otherwise, the loader uses <see cref="F:System.LoaderOptimization.SingleDomain" />.</summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>Indicates that the application will probably have a single domain, and loader must not share internal resources across application domains. </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>Indicates that the application will probably have many domains that use the same code, and the loader must share maximal internal resources across application domains. </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>Indicates that the application will probably host unique code in multiple domains, and the loader must share resources across application domains only for globally available (strong-named) assemblies that have been added to the global assembly cache. </summary>
    </member>
    <member name="T:System.Math">
      <summary>Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>Returns the absolute value of a <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" />, x, such that 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Decimal.MinValue" />≤ value ≤<see cref="F:System.Decimal.MaxValue" />. </param>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>Returns the absolute value of a double-precision floating-point number.</summary>
      <returns>A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Double.MinValue" />≤<paramref name="value" />≤<see cref="F:System.Double.MaxValue" />. </param>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>Returns the absolute value of a 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Int16.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.Int16.MaxValue" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>Returns the absolute value of a 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Int32.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.Int32.MaxValue" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.Int32.MinValue" />. </exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>Returns the absolute value of a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Int64.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.Int64.MaxValue" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.Int64.MinValue" />. </exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>Returns the absolute value of an 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.SByte.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.SByte.MaxValue" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>Returns the absolute value of a single-precision floating-point number.</summary>
      <returns>A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Single.MinValue" />≤<paramref name="value" />≤<see cref="F:System.Single.MaxValue" />. </param>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>Returns the angle whose cosine is the specified number.</summary>
      <returns>An angle, θ, measured in radians, such that 0 ≤θ≤π-or- <see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1.</returns>
      <param name="d">A number representing a cosine, where -1 ≤<paramref name="d" />≤ 1. </param>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>Returns the angle whose sine is the specified number.</summary>
      <returns>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2 -or- <see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1.</returns>
      <param name="d">A number representing a sine, where -1 ≤<paramref name="d" />≤ 1. </param>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>Returns the angle whose tangent is the specified number.</summary>
      <returns>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.-or- <see cref="F:System.Double.NaN" /> if <paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</returns>
      <param name="d">A number representing a tangent. </param>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>Returns the angle whose tangent is the quotient of two specified numbers.</summary>
      <returns>An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane. Observe the following: For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; θ &lt; π/2.For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt; θ≤π.For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt; θ &lt; -π/2.For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt; θ &lt; 0.For points on the boundaries of the quadrants, the return value is the following:If y is 0 and <paramref name="x" /> is not negative, θ = 0.If y is 0 and <paramref name="x" /> is negative, θ = π.If y is positive and <paramref name="x" /> is 0, θ = π/2.If y is negative and x is 0, θ = -π/2.</returns>
      <param name="y">The y coordinate of a point. </param>
      <param name="x">The x coordinate of a point. </param>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>Returns the smallest integral value greater than or equal to the specified double-precision floating-point number.</summary>
      <returns>The smallest integral value greater than or equal to <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned. Note that the method returns a <see cref="T:System.Double" /> rather than an integral type.</returns>
      <param name="a">A double-precision floating-point number. </param>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>Returns the cosine of the specified angle.</summary>
      <returns>The cosine of <paramref name="d" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</returns>
      <param name="d">An angle, measured in radians. </param>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>Returns the hyperbolic cosine of the specified angle.</summary>
      <returns>The hyperbolic cosine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</returns>
      <param name="value">An angle, measured in radians. </param>
    </member>
    <member name="F:System.Math.E">
      <summary>Represents the natural logarithmic base, specified by the constant, e.</summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>Returns e raised to the specified power.</summary>
      <returns>The number e raised to the power <paramref name="d" />. If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned. If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</returns>
      <param name="d">A number specifying a power. </param>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>Returns the largest integer less than or equal to the specified double-precision floating-point number.</summary>
      <returns>The largest integer less than or equal to <paramref name="d" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</returns>
      <param name="d">A double-precision floating-point number. </param>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>Returns the remainder resulting from the division of a specified number by another specified number.</summary>
      <returns>A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.If <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> (Not-A-Number) is returned.</returns>
      <param name="x">A dividend. </param>
      <param name="y">A divisor. </param>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>Returns the natural (base e) logarithm of a specified number.</summary>
      <returns>One of the values in the following table.Sign of <paramref name="d" />Returns Positive The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d" />, or log e<paramref name="d" />Zero <see cref="F:System.Double.NegativeInfinity" />Negative <see cref="F:System.Double.NaN" />Equal to <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />Equal to <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">A number whose logarithm is to be found. </param>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>Returns the logarithm of a specified number in a specified base.</summary>
      <returns>One of the values in the following table. (+Infinity denotes <see cref="F:System.Double.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Double.NegativeInfinity" />, and NaN denotes <see cref="F:System.Double.NaN" />.)<paramref name="a" /><paramref name="newBase" />Return Value<paramref name="a" />&gt; 0(0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)lognewBase(a)<paramref name="a" />&lt; 0(any value)NaN(any value)<paramref name="newBase" />&lt; 0NaN<paramref name="a" /> != 1<paramref name="newBase" /> = 0NaN<paramref name="a" /> != 1<paramref name="newBase" /> = +InfinityNaN<paramref name="a" /> = NaN(any value)NaN(any value)<paramref name="newBase" /> = NaNNaN(any value)<paramref name="newBase" /> = 1NaN<paramref name="a" /> = 00 &lt;<paramref name="newBase" />&lt; 1 +Infinity<paramref name="a" /> = 0<paramref name="newBase" />&gt; 1-Infinity<paramref name="a" /> =  +Infinity0 &lt;<paramref name="newBase" />&lt; 1-Infinity<paramref name="a" /> =  +Infinity<paramref name="newBase" />&gt; 1+Infinity<paramref name="a" /> = 1<paramref name="newBase" /> = 00<paramref name="a" /> = 1<paramref name="newBase" /> = +Infinity0</returns>
      <param name="a">A number whose logarithm is to be found. </param>
      <param name="newBase">The base of the logarithm. </param>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>Returns the base 10 logarithm of a specified number.</summary>
      <returns>One of the values in the following table.Sign of <paramref name="d" />Returns Positive The base 10 log of <paramref name="d" />; that is, log 10<paramref name="d" />. Zero <see cref="F:System.Double.NegativeInfinity" />Negative <see cref="F:System.Double.NaN" />Equal to <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />Equal to <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">A number whose logarithm is to be found. </param>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>Returns the larger of two 8-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 8-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 8-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>Returns the larger of two decimal numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two <see cref="T:System.Decimal" /> numbers to compare. </param>
      <param name="val2">The second of two <see cref="T:System.Decimal" /> numbers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>Returns the larger of two double-precision floating-point numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</returns>
      <param name="val1">The first of two double-precision floating-point numbers to compare. </param>
      <param name="val2">The second of two double-precision floating-point numbers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>Returns the larger of two 16-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 16-bit signed integers to compare. </param>
      <param name="val2">The second of two 16-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>Returns the larger of two 32-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 32-bit signed integers to compare. </param>
      <param name="val2">The second of two 32-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>Returns the larger of two 64-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 64-bit signed integers to compare. </param>
      <param name="val2">The second of two 64-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>Returns the larger of two 8-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 8-bit signed integers to compare. </param>
      <param name="val2">The second of two 8-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>Returns the larger of two single-precision floating-point numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</returns>
      <param name="val1">The first of two single-precision floating-point numbers to compare. </param>
      <param name="val2">The second of two single-precision floating-point numbers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>Returns the larger of two 16-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 16-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 16-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>Returns the larger of two 32-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 32-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 32-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>Returns the larger of two 64-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 64-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 64-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>Returns the smaller of two 8-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 8-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 8-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>Returns the smaller of two decimal numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two <see cref="T:System.Decimal" /> numbers to compare. </param>
      <param name="val2">The second of two <see cref="T:System.Decimal" /> numbers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>Returns the smaller of two double-precision floating-point numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</returns>
      <param name="val1">The first of two double-precision floating-point numbers to compare. </param>
      <param name="val2">The second of two double-precision floating-point numbers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>Returns the smaller of two 16-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 16-bit signed integers to compare. </param>
      <param name="val2">The second of two 16-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>Returns the smaller of two 32-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 32-bit signed integers to compare. </param>
      <param name="val2">The second of two 32-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>Returns the smaller of two 64-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 64-bit signed integers to compare. </param>
      <param name="val2">The second of two 64-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>Returns the smaller of two 8-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 8-bit signed integers to compare. </param>
      <param name="val2">The second of two 8-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>Returns the smaller of two single-precision floating-point numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</returns>
      <param name="val1">The first of two single-precision floating-point numbers to compare. </param>
      <param name="val2">The second of two single-precision floating-point numbers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>Returns the smaller of two 16-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 16-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 16-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>Returns the smaller of two 32-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 32-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 32-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>Returns the smaller of two 64-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 64-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 64-bit unsigned integers to compare. </param>
    </member>
    <member name="F:System.Math.PI">
      <summary>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>Returns a specified number raised to the specified power.</summary>
      <returns>The number <paramref name="x" /> raised to the power <paramref name="y" />.</returns>
      <param name="x">A double-precision floating-point number to be raised to a power. </param>
      <param name="y">A double-precision floating-point number that specifies a power. </param>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>Rounds a decimal value to the nearest integral value.</summary>
      <returns>The integer nearest parameter <paramref name="d" />. If the fractional component of <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that the method returns a <see cref="T:System.Decimal" /> type rather than an integral type.</returns>
      <param name="d">A decimal number to be rounded. </param>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>Rounds a decimal value to a specified number of fractional digits.</summary>
      <returns>The number nearest <paramref name="d" /> with a number of fractional digits equal to <paramref name="decimals" />. </returns>
      <param name="d">A decimal number to be rounded. </param>
      <param name="decimals">The number of decimal places in the return value. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> is less than 0 or greater than 28. </exception>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>Rounds a double-precision floating-point value to the nearest integral value.</summary>
      <returns>The integer nearest <paramref name="a" />. If the fractional component of <paramref name="a" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that the method returns a <see cref="T:System.Double" /> type rather than an integral type.</returns>
      <param name="a">A double-precision floating-point number to be rounded. </param>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>Rounds a double-precision floating-point value to a specified number of fractional digits.</summary>
      <returns>The number nearest <paramref name="value" /> with a number of fractional digits equal to <paramref name="digits" />.</returns>
      <param name="value">A double-precision floating-point number to be rounded. </param>
      <param name="digits">The number of fractional digits in the return value. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> is less than 0 or greater than 15. </exception>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>Returns a value indicating the sign of a decimal number.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>Returns a value indicating the sign of a double-precision floating-point number.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>Returns a value indicating the sign of a 16-bit signed integer.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>Returns a value indicating the sign of a 32-bit signed integer.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>Returns a value indicating the sign of a 64-bit signed integer.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>Returns a value indicating the sign of an 8-bit signed integer.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>Returns a value indicating the sign of a single-precision floating-point number.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />. </exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>Returns the sine of the specified angle.</summary>
      <returns>The sine of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</returns>
      <param name="a">An angle, measured in radians. </param>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>Returns the hyperbolic sine of the specified angle.</summary>
      <returns>The hyperbolic sine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</returns>
      <param name="value">An angle, measured in radians. </param>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>Returns the square root of a specified number.</summary>
      <returns>Value of <paramref name="d" />Returns Zero, or positive The positive square root of <paramref name="d" />. Negative <see cref="F:System.Double.NaN" />If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</returns>
      <param name="d">A number. </param>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>Returns the tangent of the specified angle.</summary>
      <returns>The tangent of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</returns>
      <param name="a">An angle, measured in radians. </param>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>Returns the hyperbolic tangent of the specified angle.</summary>
      <returns>The hyperbolic tangent of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, this method returns -1. If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.</returns>
      <param name="value">An angle, measured in radians. </param>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>The exception that is thrown when an attempt to access a class member fails.</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class.</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>The exception that is thrown when there is an invalid attempt to access a private or protected method inside a class.</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "Attempt to access the method failed." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a field that does not exist.</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class.</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>Gets the text string showing the signature of the missing field, the class name, and the field name. This property is read-only.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a class member that does not exist.</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class.</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with a specified error message and a reference to the inner exception that is the root cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">An instance of <see cref="T:System.Exception" /> that is the cause of the current Exception. If <paramref name="inner" /> is not a null reference (Nothing in Visual Basic), then the current Exception is raised in a catch block handling <paramref name="inner" />. </param>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>Gets the text string showing the class name, the member name, and the signature of the missing member.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a method that does not exist.</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class.</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>Gets the text string showing the class name, the method name, and the signature of the missing method. This property is read-only.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.</summary>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</summary>
      <param name="target">The object on which <paramref name="method" /> is defined. </param>
      <param name="method">The name of the method for which a delegate is created. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
      <summary>Combines this <see cref="T:System.Delegate" /> with the specified <see cref="T:System.Delegate" /> to form a new delegate.</summary>
      <returns>A <see cref="T:System.Delegate" /> that is the new root of the <see cref="T:System.MulticastDelegate" /> invocation list.</returns>
      <param name="follow">The delegate to combine with this delegate. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <exception cref="T:System.ArgumentException">Both <paramref name="a" /> and <paramref name="b" /> are not null, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type. </exception>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>Determines whether this multicast delegate and the specified object are equal.</summary>
      <returns>true if <paramref name="obj" /> and this instance have the same invocation lists; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>Returns the invocation list of this multicast delegate, in invocation order.</summary>
      <returns>An array of delegates whose invocation lists collectively match the invocation list of this instance.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>Determines whether two <see cref="T:System.MulticastDelegate" /> objects are equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> have the same invocation lists; otherwise, false.</returns>
      <param name="d1">The left operand. </param>
      <param name="d2">The right operand. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>Determines whether two <see cref="T:System.MulticastDelegate" /> objects are not equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> do not have the same invocation lists; otherwise, false.</returns>
      <param name="d1">The left operand. </param>
      <param name="d2">The right operand. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
      <summary>Removes an element from the invocation list of this <see cref="T:System.MulticastDelegate" /> that is equal to the specified delegate.</summary>
      <returns>If <paramref name="value" /> is found in the invocation list for this instance, then a new <see cref="T:System.Delegate" /> without <paramref name="value" /> in its invocation list; otherwise, this instance with its original invocation list.</returns>
      <param name="value">The delegate to search for in the invocation list. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="T:System.MulticastNotSupportedException">
      <summary>The exception that is thrown when there is an attempt to combine two delegates based on the <see cref="T:System.Delegate" /> type instead of the <see cref="T:System.MulticastDelegate" /> type. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class.</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.NotFiniteNumberException">
      <summary>The exception that is thrown when a floating-point value is positive infinity, negative infinity, or Not-a-Number (NaN).</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class.</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message and a reference to the inner exception that is root cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>The exception that is thrown when a requested method or operation is not implemented.</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with default properties.</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Nullable">
      <summary>Supports a value type that can be assigned null like a reference type. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>Compares the relative values of two <see cref="T:System.Nullable`1" /> objects.</summary>
      <returns>An integer that indicates the relative values of the <paramref name="n1" /> and <paramref name="n2" /> parameters.Return ValueDescriptionLess than zeroThe <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n1" /> is false, and the <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n2" /> is true.-or-The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is less than the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.ZeroThe <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are false.-or-The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is equal to the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.Greater than zeroThe <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n1" /> is true, and the <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n2" /> is false.-or-The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is greater than the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.</returns>
      <param name="n1">A <see cref="T:System.Nullable`1" /> object.</param>
      <param name="n2">A <see cref="T:System.Nullable`1" /> object.</param>
      <typeparam name="T">The underlying value type of the <paramref name="n1" /> and <paramref name="n2" /> parameters.</typeparam>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>Indicates whether two specified <see cref="T:System.Nullable`1" /> objects are equal.</summary>
      <returns>true if the <paramref name="n1" /> parameter is equal to the <paramref name="n2" /> parameter; otherwise, false. The return value depends on the <see cref="P:System.Nullable`1.HasValue" /> and <see cref="P:System.Nullable`1.Value" /> properties of the two parameters that are compared.Return ValueDescriptiontrueThe <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are false. -or-The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the <see cref="P:System.Nullable`1.Value" /> properties of the parameters are equal.falseThe <see cref="P:System.Nullable`1.HasValue" /> property is true for one parameter and false for the other parameter.-or-The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the <see cref="P:System.Nullable`1.Value" /> properties of the parameters are unequal.</returns>
      <param name="n1">A <see cref="T:System.Nullable`1" /> object.</param>
      <param name="n2">A <see cref="T:System.Nullable`1" /> object.</param>
      <typeparam name="T">The underlying value type of the <paramref name="n1" /> and <paramref name="n2" /> parameters.</typeparam>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>Returns the underlying type argument of the specified nullable type.</summary>
      <returns>The type argument of the <paramref name="nullableType" /> parameter, if the <paramref name="nullableType" /> parameter is a closed generic nullable type; otherwise, null. </returns>
      <param name="nullableType">A <see cref="T:System.Type" /> object that describes a closed generic nullable type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> is null.</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>Represents an object whose underlying type is a value type that can also be assigned null like a reference type.</summary>
      <typeparam name="T">The underlying value type of the <see cref="T:System.Nullable`1" /> generic type.</typeparam>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Nullable`1" /> structure to the specified value. </summary>
      <param name="value">A value type.</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Nullable`1" /> object is equal to a specified object.</summary>
      <returns>true if the <paramref name="other" /> parameter is equal to the current <see cref="T:System.Nullable`1" /> object; otherwise, false. This table describes how equality is defined for the compared values: Return ValueDescriptiontrueThe <see cref="P:System.Nullable`1.HasValue" /> property is false, and the <paramref name="other" /> parameter is null. That is, two null values are equal by definition.-or-The <see cref="P:System.Nullable`1.HasValue" /> property is true, and the value returned by the <see cref="P:System.Nullable`1.Value" /> property is equal to the <paramref name="other" /> parameter.falseThe <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is true, and the <paramref name="other" /> parameter is null.-or-The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is false, and the <paramref name="other" /> parameter is not null.-or-The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is true, and the value returned by the <see cref="P:System.Nullable`1.Value" /> property is not equal to the <paramref name="other" /> parameter.</returns>
      <param name="other">An object.</param>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>Retrieves the hash code of the object returned by the <see cref="P:System.Nullable`1.Value" /> property.</summary>
      <returns>The hash code of the object returned by the <see cref="P:System.Nullable`1.Value" /> property if the <see cref="P:System.Nullable`1.HasValue" /> property is true, or zero if the <see cref="P:System.Nullable`1.HasValue" /> property is false. </returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>Retrieves the value of the current <see cref="T:System.Nullable`1" /> object, or the object's default value.</summary>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property if the  <see cref="P:System.Nullable`1.HasValue" /> property is true; otherwise, the default value of the current <see cref="T:System.Nullable`1" /> object. The type of the default value is the type argument of the current <see cref="T:System.Nullable`1" /> object, and the value of the default value consists solely of binary zeroes.</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>Retrieves the value of the current <see cref="T:System.Nullable`1" /> object, or the specified default value.</summary>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property if the <see cref="P:System.Nullable`1.HasValue" /> property is true; otherwise, the <paramref name="defaultValue" /> parameter.</returns>
      <param name="defaultValue">A value to return if the <see cref="P:System.Nullable`1.HasValue" /> property is false.</param>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>Gets a value indicating whether the current <see cref="T:System.Nullable`1" /> object has a value.</summary>
      <returns>true if the current <see cref="T:System.Nullable`1" /> object has a value; false if the current <see cref="T:System.Nullable`1" /> object has no value.</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0">
      <summary>Returns the value of a specified <see cref="T:System.Nullable`1" /> value.</summary>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property for the <paramref name="value" /> parameter.</returns>
      <param name="value">A <see cref="T:System.Nullable`1" /> value.</param>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}">
      <summary>Creates a new <see cref="T:System.Nullable`1" /> object initialized to a specified value. </summary>
      <returns>A <see cref="T:System.Nullable`1" /> object whose <see cref="P:System.Nullable`1.Value" /> property is initialized with the <paramref name="value" /> parameter.</returns>
      <param name="value">A value type.</param>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>Returns the text representation of the value of the current <see cref="T:System.Nullable`1" /> object.</summary>
      <returns>The text representation of the value of the current <see cref="T:System.Nullable`1" /> object if the <see cref="P:System.Nullable`1.HasValue" /> property is true, or an empty string ("") if the <see cref="P:System.Nullable`1.HasValue" /> property is false.</returns>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>Gets the value of the current <see cref="T:System.Nullable`1" /> value.</summary>
      <returns>The value of the current <see cref="T:System.Nullable`1" /> object if the <see cref="P:System.Nullable`1.HasValue" /> property is true. An exception is thrown if the <see cref="P:System.Nullable`1.HasValue" /> property is false.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Nullable`1.HasValue" /> property is false.</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>The exception that is thrown when there is an attempt to dereference a null object reference.</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "The value 'null' was found where an instance of an object was required." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Object">
      <summary>Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.</summary>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</summary>
      <returns>true if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
      <param name="objA">The first <see cref="T:System.Object" /> to compare. </param>
      <param name="objB">The second <see cref="T:System.Object" /> to compare. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" /> is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>Serves as a hash function for a particular type. </summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Object.GetType">
      <summary>Gets the <see cref="T:System.Type" /> of the current instance.</summary>
      <returns>The <see cref="T:System.Type" /> instance that represents the exact runtime type of the current instance.</returns>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>Creates a shallow copy of the current <see cref="T:System.Object" />.</summary>
      <returns>A shallow copy of the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</summary>
      <returns>true if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null references; otherwise, false.</returns>
      <param name="objA">The first <see cref="T:System.Object" /> to compare. </param>
      <param name="objB">The second <see cref="T:System.Object" /> to compare. </param>
    </member>
    <member name="M:System.Object.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>The exception that is thrown when an operation is performed on a disposed object.</summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a string containing the name of the disposed object.</summary>
      <param name="objectName">A string containing the name of the disposed object. </param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If <paramref name="innerException" /> is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with the specified object name and message.</summary>
      <param name="objectName">The name of the disposed object. </param>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>Gets the message that describes the error.</summary>
      <returns>A string that describes the error.</returns>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>Gets the name of the disposed object.</summary>
      <returns>A string containing the name of the disposed object.</returns>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>Marks the program elements that are no longer in use. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with default properties.</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a specified workaround message.</summary>
      <param name="message">The text string that describes alternative workarounds. </param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a workaround message and a Boolean value indicating whether the obsolete element usage is considered an error.</summary>
      <param name="message">The text string that describes alternative workarounds. </param>
      <param name="error">The Boolean value that indicates whether the obsolete element usage is considered an error. </param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>Gets a Boolean value indicating whether the compiler will treat usage of the obsolete program element as an error.</summary>
      <returns>true if the obsolete element usage is considered an error; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>Gets the workaround message, including a description of the alternative program elements.</summary>
      <returns>The workaround text string.</returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>Represents information about an operating system, such as the version and platform identifier. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:System.OperatingSystem" /> class, using the specified platform identifier value and version object.</summary>
      <param name="platform">One of the <see cref="T:System.PlatformID" /> values that indicates the operating system platform. </param>
      <param name="version">A <see cref="T:System.Version" /> object that indicates the version of the operating system. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" /> is not a <see cref="T:System.PlatformID" /> enumeration value.</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>Creates an <see cref="T:System.OperatingSystem" /> object that is identical to this instance.</summary>
      <returns>An <see cref="T:System.OperatingSystem" /> object that is a copy of this instance.</returns>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>Gets a <see cref="T:System.PlatformID" /> enumeration value that identifies the operating system platform.</summary>
      <returns>One of the <see cref="T:System.PlatformID" /> values.</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>Converts the value of this <see cref="T:System.OperatingSystem" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the values returned by the <see cref="P:System.OperatingSystem.Platform" />,and <see cref="P:System.OperatingSystem.Version" />.</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>Gets a <see cref="T:System.Version" /> object that identifies the operating system.</summary>
      <returns>A <see cref="T:System.Version" /> object that describes the major version, minor version, build, and revision numbers for the operating system.</returns>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>The exception that is thrown when there is not enough memory to continue the execution of a program.</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class.</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.OverflowException">
      <summary>The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class.</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>Indicates that a method will allow a variable number of arguments in its invocation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ParamArrayAttribute" /> class with default properties.</summary>
    </member>
    <member name="T:System.PlatformID">
      <summary>Identifies the operating system, or development platform, supported by an assembly.</summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>The operating system is Win32s. Win32s is a layer that runs on 16-bit versions of Windows to provide access to 32-bit applications.</summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>The operating system is Windows 95 or later.</summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>The operating system is Windows NT or later.</summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>The operating system is Windows CE.</summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>The operating system is Unix.</summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>The development platform is Xbox 360.</summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>The operating system is Macintosh.</summary>
    </member>
    <member name="F:System.PlatformID.NokiaS60">
      <summary>The operating system is Nokia S60.</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>The exception that is thrown when a feature does not run on a particular platform.</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with default properties.</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with a specified error message.</summary>
      <param name="message">The text message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</summary>
      <returns>true if <paramref name="obj" /> meets the criteria defined within the method represented by this delegate; otherwise, false.</returns>
      <param name="obj">The object to compare against the criteria. </param>
      <typeparam name="T">The type of the object to compare.</typeparam>
    </member>
    <member name="T:System.Random">
      <summary>Represents a pseudo-random number generator, a device that produces a sequence of numbers that meet certain statistical requirements for randomness.</summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Random" /> class, using a time-dependent default seed value.</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Random" /> class, using the specified seed value.</summary>
      <param name="Seed">A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="Seed" /> is <see cref="F:System.Int32.MinValue" />, which causes an overflow when its absolute value is calculated. </exception>
    </member>
    <member name="M:System.Random.Next">
      <summary>Returns a nonnegative random number.</summary>
      <returns>A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>Returns a nonnegative random number less than the specified maximum.</summary>
      <returns>A 32-bit signed integer greater than or equal to zero, and less than <paramref name="maxValue" />; that is, the range of return values ordinarily includes zero but not <paramref name="maxValue" />. However, if <paramref name="maxValue" /> equals zero, <paramref name="maxValue" /> is returned.</returns>
      <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or equal to zero. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> is less than zero. </exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>Returns a random number within a specified range.</summary>
      <returns>A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />, <paramref name="minValue" /> is returned.</returns>
      <param name="minValue">The inclusive lower bound of the random number returned. </param>
      <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> is greater than <paramref name="maxValue" />. </exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>Fills the elements of a specified array of bytes with random numbers.</summary>
      <param name="buffer">An array of bytes to contain random numbers. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>Returns a random number between 0.0 and 1.0.</summary>
      <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>Returns a random number between 0.0 and 1.0.</summary>
      <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
    </member>
    <member name="T:System.RankException">
      <summary>The exception that is thrown when an array with the wrong number of dimensions is passed to a method.</summary>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class.</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ResolveEventArgs">
      <summary>Provides data for the <see cref="E:System.AppDomain.AssemblyResolve" /> event.</summary>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ResolveEventArgs" /> class.</summary>
      <param name="name">The name of an item to resolve. </param>
    </member>
    <member name="P:System.ResolveEventArgs.Name">
      <summary>Gets the name of the item to resolve.</summary>
      <returns>The name of the item to resolve.</returns>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>[SECURITY CRITICAL] Represents the method that handles the <see cref="E:System.AppDomain.AssemblyResolve" /> event.</summary>
      <returns>The resolved assembly, or null if the assembly cannot be resolved.</returns>
      <param name="sender">The source of the event. </param>
      <param name="args">The event data. </param>
    </member>
    <member name="T:System.RuntimeArgumentHandle">
      <summary>References a variable-length argument list.</summary>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>Represents a field using an internal metadata token.</summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>Indicates whether the current instance is equal to the specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.RuntimeFieldHandle" /> and equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The object to compare to the current instance.</param>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.RuntimeFieldHandle" />.</summary>
      <returns>true if the value of <paramref name="handle" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="handle">The <see cref="T:System.RuntimeFieldHandle" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode"></member>
    <member name="P:System.RuntimeFieldHandle.Value">
      <summary>[SECURITY CRITICAL] Gets a handle to the field represented by the current instance.</summary>
      <returns>An <see cref="T:System.IntPtr" /> that contains the handle to the field represented by the current instance.</returns>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> is a handle to the internal metadata representation of a method.</summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>Indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.RuntimeMethodHandle" /> and equal to the value of this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Object" /> to compare to this instance.</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>Indicates whether this instance is equal to a specified <see cref="T:System.RuntimeMethodHandle" />.</summary>
      <returns>true if <paramref name="handle" /> is equal to the value of this instance; otherwise, false.</returns>
      <param name="handle">A <see cref="T:System.RuntimeMethodHandle" /> to compare to this instance.</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>Indicates whether two instances of <see cref="T:System.RuntimeMethodHandle" /> are equal.</summary>
      <returns>true if the value of <paramref name="left" /> is equal to the value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="left" />.</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>Indicates whether two instances of <see cref="T:System.RuntimeMethodHandle" /> are not equal.</summary>
      <returns>true if the value of <paramref name="left" /> is unequal to the value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="left" />.</param>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
      <summary>[SECURITY CRITICAL] Gets the value of this instance.</summary>
      <returns>A handle to the internal metadata representation of a method.</returns>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>Represents a type using an internal metadata token.</summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>Indicates whether the specified object is equal to the current <see cref="T:System.RuntimeTypeHandle" /> structure.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is equal to the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to the current instance.</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>Indicates whether the specified <see cref="T:System.RuntimeTypeHandle" /> structure is equal to the current <see cref="T:System.RuntimeTypeHandle" /> structure.</summary>
      <returns>true if the value of <paramref name="handle" /> is equal to the value of this instance; otherwise, false.</returns>
      <param name="handle">The <see cref="T:System.RuntimeTypeHandle" /> structure to compare to the current instance.</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>Indicates whether a <see cref="T:System.RuntimeTypeHandle" /> structure is equal to an object.</summary>
      <returns>true if <paramref name="right" /> is a <see cref="T:System.RuntimeTypeHandle" /> and is equal to <paramref name="left" />; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="right" />.</param>
      <param name="right">An object to compare to <paramref name="left" />.</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>Indicates whether a <see cref="T:System.RuntimeTypeHandle" /> structure is not equal to an object.</summary>
      <returns>true if <paramref name="right" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is not equal to <paramref name="left" />; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="right" />.</param>
      <param name="right">An object to compare to <paramref name="left" />.</param>
    </member>
    <member name="T:System.SByte">
      <summary>Represents an 8-bit signed integer.</summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="obj" />.Return Value Description Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.-or- <paramref name="obj" /> is null. </returns>
      <param name="obj">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not an <see cref="T:System.SByte" />. </exception>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>Compares this instance to a specified 8-bit signed integer and returns an indication of their relative values.</summary>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An 8-bit signed integer to compare. </param>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.SByte" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.SByte" /> value.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.SByte" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.SByte" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.SByte" />.</returns>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.SByte" />. This field is constant.</summary>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.SByte" />. This field is constant.</summary>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>Converts the string representation of a number to its 8-bit signed integer equivalent.</summary>
      <returns>An 8-bit signed integer that is equivalent to the number contained in the <paramref name="s" /> parameter.</returns>
      <param name="s">A string that represents a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 8-bit signed integer equivalent.</summary>
      <returns>An 8-bit signed integer that is equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number that is in a specified style and culture-specific format to its 8-bit signed equivalent.</summary>
      <returns>An 8-bit signed byte value that is equivalent to the number specified in the <paramref name="s" /> parameter.</returns>
      <param name="s">A string that contains the number to convert. The string is interpreted by using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is null, the thread current culture is used.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.-or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.-or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 8-bit signed integer equivalent.</summary>
      <returns>An 8-bit signed integer that is equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string that represents a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is null, the thread current culture is used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is unused.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is unused.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is unused.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an object of type <paramref name="type" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> to which to convert this <see cref="T:System.SByte" /> value.</param>
      <param name="provider">A <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance, as specified by <paramref name="provider" />.</returns>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 8-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string that contains a number to convert.</param>
      <param name="result">When this method returns, contains the 8-bit signed integer value that is equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in the correct format, or represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Single">
      <summary>Represents a single-precision floating-point number.</summary>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- This instance and value are both not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Single" />. </exception>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified single-precision floating-point number.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />). </returns>
      <param name="value">A single-precision floating-point number to compare. </param>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>Represents the smallest positive <see cref="T:System.Single" /> value greater than zero. This field is constant.</summary>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Single" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Single" /> object represent the same value.</summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Single" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Single" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Single" />.</returns>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to negative or positive infinity.</summary>
      <returns>true if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />; otherwise, false.</returns>
      <param name="f">A single-precision floating-point number. </param>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to not a number (<see cref="F:System.Single.NaN" />).</summary>
      <returns>true if <paramref name="f" /> evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, false.</returns>
      <param name="f">A single-precision floating-point number. </param>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to negative infinity.</summary>
      <returns>true if <paramref name="f" /> evaluates to <see cref="F:System.Single.NegativeInfinity" />; otherwise, false.</returns>
      <param name="f">A single-precision floating-point number. </param>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to positive infinity.</summary>
      <returns>true if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" />; otherwise, false.</returns>
      <param name="f">A single-precision floating-point number. </param>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.Single" />. This field is constant.</summary>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Single" />. This field is constant.</summary>
    </member>
    <member name="F:System.Single.NaN">
      <summary>Represents not a number (NaN). This field is constant.</summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>Represents negative infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>Converts the string representation of a number to its single-precision floating-point number equivalent.</summary>
      <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string representing a number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</summary>
      <returns>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string representing a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</summary>
      <returns>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</summary>
      <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />. </summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Single" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent. A return code indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>Converts the string representation of a number to its single-precision floating-point number equivalent. A return code indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing a number to convert. </param>
      <param name="result">When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not a number in a valid format, or represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.StackOverflowException">
      <summary>The exception that is thrown when the execution stack overflows because it contains too many nested method calls. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "The requested operation caused a stack overflow." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>Indicates that the COM threading model for an application is single-threaded apartment (STA). </summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.STAThreadAttribute" /> class.</summary>
    </member>
    <member name="T:System.String">
      <summary>Represents text as a series of Unicode characters.</summary>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</summary>
      <param name="value">A pointer to a null terminated array of Unicode characters. </param>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</summary>
      <param name="value">A pointer to an array of Unicode characters. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <param name="length">The number of characters within <paramref name="value" /> to use. </param>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character repeated a specified number of times.</summary>
      <param name="c">A Unicode character. </param>
      <param name="count">The number of times <paramref name="c" /> occurs. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters.</summary>
      <param name="value">An array of Unicode characters. </param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</summary>
      <param name="value">An array of Unicode characters. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <param name="length">The number of characters within <paramref name="value" /> to use. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or- The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />. </exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</summary>
      <param name="value">A pointer to a null terminated array of 8-bit signed integers. </param>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>Gets the character at a specified character position in the current <see cref="T:System.String" /> object.</summary>
      <returns>A Unicode character.</returns>
      <param name="index">A character position in the current <see cref="T:System.String" /> object. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is greater than or equal to the length of this object or less than zero. </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Performs a culture-sensitive comparison of substrings that are extracted from two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition Less than zero The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />. Zero The substrings are equal, or <paramref name="length" /> is zero. Greater than zero The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" />. </param>
      <param name="indexA">The position of the substring within <paramref name="strA" />. </param>
      <param name="strB">The second <see cref="T:System.String" />. </param>
      <param name="indexB">The position of the substring within <paramref name="strB" />. </param>
      <param name="length">The maximum number of characters in the substrings to compare. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. -or-Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to one another in the sort order. </summary>
      <returns>An integer that indicates the lexical relationship between the two substrings.ValueConditionLess than zeroThe substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.ZeroThe substrings are equal or <paramref name="length" /> is zero.Greater than zeroThe substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</returns>
      <param name="strA">The first string.   </param>
      <param name="indexA">The starting position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string.</param>
      <param name="indexB">The starting position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="culture">The culture that supplies culture-specific comparison information.</param>
      <param name="options">Options, such as ignoring case or symbols, to use when performing the comparison.  </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than strA.Length.-or-<paramref name="indexB" /> is greater than strB.Length.-or-<paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.-or-Either <paramref name="strA" /> or <paramref name="strB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects using the specified string comparison options and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition Less than zero The substring in the <paramref name="strA" /> parameter is less than the substring in the <paramref name="strB" /> parameter.Zero The substrings are equal, or the <paramref name="length" /> parameter is zero. Greater than zero The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" /> object. </param>
      <param name="indexA">The position of the substring within <paramref name="strA" />. </param>
      <param name="strB">The second <see cref="T:System.String" /> object.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />. </param>
      <param name="length">The maximum number of characters in the substrings to compare. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. -or-Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>Performs a culture-sensitive comparison of two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition Less than zero <paramref name="strA" /> is less than <paramref name="strB" />. Zero <paramref name="strA" /> equals <paramref name="strB" />. Greater than zero <paramref name="strA" /> is greater than <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" />. </param>
      <param name="strB">The second <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>Compares two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to one another in the sort order.</summary>
      <returns>A 32-bit signed integer that indicates the lexical relationship between <paramref name="strA" /> and <paramref name="strB" />.ValueConditionLess than zero<paramref name="strA" /> is less than <paramref name="strB" />.Zero<paramref name="strA" /> equals <paramref name="strB" />.Greater than zero<paramref name="strA" /> is greater than <paramref name="strB" />.</returns>
      <param name="strA">The first string.  </param>
      <param name="strB">The second string.</param>
      <param name="culture">The culture that supplies culture-specific comparison information.</param>
      <param name="options">Options, such as ignoring case or symbols, to use when performing the comparison.  </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>Compares two specified <see cref="T:System.String" /> objects using the specified string comparison options and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition Less than zero <paramref name="strA" /> is less than <paramref name="strB" />. Zero <paramref name="strA" /> equals <paramref name="strB" />. Greater than zero <paramref name="strA" /> is greater than <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" /> object.</param>
      <param name="strB">The second <see cref="T:System.String" /> object. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.StringComparison" /> is not supported.</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each substring. </summary>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.ValueCondition Less than zero The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />. Zero The substrings are equal, or <paramref name="length" /> is zero. Greater than zero The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" />. </param>
      <param name="indexA">The starting index of the substring in <paramref name="strA" />. </param>
      <param name="strB">The second <see cref="T:System.String" />. </param>
      <param name="indexB">The starting index of the substring in <paramref name="strB" />. </param>
      <param name="length">The maximum number of characters in the substrings to compare. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />. <see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />. <see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. </exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string and returns an integer that indicates their relative position in the sort order.</summary>
      <returns>An integer indicating the lexical relationship between the two comparands.ValueCondition Less than zero <paramref name="strA" /> is less than <paramref name="strB" />. Zero <paramref name="strA" /> and <paramref name="strB" /> are equal. Greater than zero <paramref name="strA" /> is greater than <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" />. </param>
      <param name="strB">The second <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <summary>Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</summary>
      <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.Value Condition Less than zero This instance precedes <paramref name="value" />. Zero This instance has the same position in the sort order as <paramref name="value" />. Greater than zero This instance follows <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An <see cref="T:System.Object" /> that evaluates to a String. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.String" />. </exception>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.String" />.</summary>
      <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.Value Condition Less than zero This instance precedes <paramref name="strB" />. Zero This instance has the same position in the sort order as <paramref name="strB" />. Greater than zero This instance follows <paramref name="strB" />.-or- <paramref name="strB" /> is null. </returns>
      <param name="strB">A <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />.</summary>
      <returns>The concatenated strings in <paramref name="values" />.</returns>
      <param name="values">A collection object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> and whose generic type argument is <see cref="T:System.String" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates the members of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementation.</summary>
      <returns>The concatenated members in <paramref name="values" />.</returns>
      <param name="values">A collection object that implements the <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface.</param>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>Creates the <see cref="T:System.String" /> representation of a specified object.</summary>
      <returns>The <see cref="T:System.String" /> representation of the value of <paramref name="arg0" />.</returns>
      <param name="arg0">An <see cref="T:System.Object" /> or null. </param>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>Concatenates the <see cref="T:System.String" /> representations of two specified objects.</summary>
      <returns>The concatenated <see cref="T:System.String" /> representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</returns>
      <param name="arg0">The first <see cref="T:System.Object" />. </param>
      <param name="arg1">The second <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>Concatenates the <see cref="T:System.String" /> representations of three specified objects.</summary>
      <returns>The concatenated <see cref="T:System.String" /> representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</returns>
      <param name="arg0">The first <see cref="T:System.Object" />. </param>
      <param name="arg1">The second <see cref="T:System.Object" />. </param>
      <param name="arg2">The third <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>Concatenates the <see cref="T:System.String" /> representations of the elements in a specified <see cref="T:System.Object" /> array.</summary>
      <returns>The concatenated <see cref="T:System.String" /> representations of the values of the elements in <paramref name="args" />.</returns>
      <param name="args">An <see cref="T:System.Object" /> array. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is null. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>Concatenates two specified instances of <see cref="T:System.String" />.</summary>
      <returns>The concatenation of <paramref name="str0" /> and <paramref name="str1" />.</returns>
      <param name="str0">The first <see cref="T:System.String" />. </param>
      <param name="str1">The second <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>Concatenates three specified instances of <see cref="T:System.String" />.</summary>
      <returns>The concatenation of <paramref name="str0" />, <paramref name="str1" />, and <paramref name="str2" />.</returns>
      <param name="str0">The first <see cref="T:System.String" />. </param>
      <param name="str1">The second <see cref="T:System.String" />. </param>
      <param name="str2">The third <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>Concatenates four specified instances of <see cref="T:System.String" />.</summary>
      <returns>The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</returns>
      <param name="str0">The first <see cref="T:System.String" />. </param>
      <param name="str1">The second <see cref="T:System.String" />. </param>
      <param name="str2">The third <see cref="T:System.String" />. </param>
      <param name="str3">The fourth <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>Concatenates the elements of a specified <see cref="T:System.String" /> array.</summary>
      <returns>The concatenated elements of <paramref name="values" />.</returns>
      <param name="values">An array of <see cref="T:System.String" /> instances. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>Returns a value indicating whether the specified <see cref="T:System.String" /> object occurs within this string.</summary>
      <returns>true if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, false.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <summary>Creates a new instance of <see cref="T:System.String" /> with the same value as a specified <see cref="T:System.String" />.</summary>
      <returns>A new <see cref="T:System.String" /> with the same value as <paramref name="str" />.</returns>
      <param name="str">The <see cref="T:System.String" /> to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</summary>
      <param name="sourceIndex">The index of the first character in this instance to copy. </param>
      <param name="destination">An array of Unicode characters to which characters in this instance are copied. </param>
      <param name="destinationIndex">An index in <paramref name="destination" /> at which the copy operation begins. </param>
      <param name="count">The number of characters in this instance to copy to <paramref name="destination" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative -or- <paramref name="count" /> is greater than the length of the substring from <paramref name="startIndex" /> to the end of this instance -or- <paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of <paramref name="destination" /></exception>
    </member>
    <member name="F:System.String.Empty">
      <summary>Represents the empty string. This field is read-only.</summary>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>Determines whether the end of this instance matches the specified string.</summary>
      <returns>true if <paramref name="value" /> matches the end of this instance; otherwise, false.</returns>
      <param name="value">A string to compare to. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>Determines whether the end of this string matches the specified string when compared using the specified comparison option.</summary>
      <returns>true if the <paramref name="value" /> parameter matches the end of this string; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" /> object to compare to. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values that determines how this string and <paramref name="value" /> are compared. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>Determines whether this instance of <see cref="T:System.String" /> and a specified object, which must also be a <see cref="T:System.String" /> object, have the same value.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.String" /> and its value is the same as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.</summary>
      <returns>true if the value of the <paramref name="value" /> parameter is the same as this instance; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have the same value.</summary>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.String" /> or null. </param>
      <param name="b">A <see cref="T:System.String" /> or null. </param>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</summary>
      <returns>true if the value of the <paramref name="a" /> parameter is equal to the value of the <paramref name="b" /> parameter; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.String" /> object or null. </param>
      <param name="b">A <see cref="T:System.String" /> object or null. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>Determines whether this string and a specified <see cref="T:System.String" /> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</summary>
      <returns>true if the value of the <paramref name="value" /> parameter is the same as this string; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" /> object.</param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>Replaces the format item in a specified string with the text equivalent of the value of a corresponding object in a specified array. A specified parameter supplies culture-specific formatting information.</summary>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific formatting information. </param>
      <param name="format">A composite format string. </param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>Replaces one or more format items in a specified string with the string representation of a specified object.</summary>
      <returns>A copy of <paramref name="format" /> in which the first format item has been replaced by the string representation of <paramref name="arg0" />.</returns>
      <param name="format">A composite format string. </param>
      <param name="arg0">An object to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">The format item in <paramref name="format" /> is invalid.-or- The index of a format item is greater or less than zero. </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>Replaces the format item in a specified string with the string representations of two specified objects.</summary>
      <returns>A copy of <paramref name="format" /> in which format items have been replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</returns>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to format. </param>
      <param name="arg1">The second object to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than one. </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>Replaces the format items in a specified string with the string representation of three specified objects.</summary>
      <returns>A copy of <paramref name="format" /> in which the first, second, and third format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</returns>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to format. </param>
      <param name="arg1">The second object to format. </param>
      <param name="arg2">The third object to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than two. </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</summary>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</returns>
      <param name="format">A composite format string. </param>
      <param name="args">An object array that contains zero or more objects to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. </exception>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>Returns the hash code for this string.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.String.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for class <see cref="T:System.String" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.String" />.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>Reports the index of the first occurrence of the specified Unicode character in this string.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>Reports the index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or specifies a position beyond the end of this instance. </exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>Reports the index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> + <paramref name="startIndex" /> specifies a position beyond the end of this instance. </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>Reports the index of the first occurrence of the specified string in this instance.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</returns>
      <param name="value">The string to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>Reports the index of the first occurrence of the specified string in this instance. The search starts at a specified character position.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The string to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> specifies a position not within this instance. </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>Reports the index of the first occurrence of the specified string this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The string to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> plus <paramref name="startIndex" /> specify a position not within this instance. </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Reports the index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> plus <paramref name="startIndex" /> specify a position that is not within this instance. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>Reports the index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative, or specifies a position that is not within this instance. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>Reports the index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. A parameter specifies the type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</summary>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</summary>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the number of characters in this instance. </exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance. </exception>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>Inserts a specified instance of <see cref="T:System.String" /> at a specified index position in this instance.</summary>
      <returns>A new <see cref="T:System.String" /> equivalent to this instance but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.</returns>
      <param name="startIndex">The index position of the insertion. </param>
      <param name="value">The <see cref="T:System.String" /> to insert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative or greater than the length of this instance. </exception>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <summary>Retrieves the system's reference to the specified <see cref="T:System.String" />.</summary>
      <returns>If the value of <paramref name="str" /> is already interned, the system's reference is returned; otherwise, a new reference to a string with the value of <paramref name="str" /> is returned.</returns>
      <param name="str">A <see cref="T:System.String" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <summary>Retrieves a reference to a specified <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> reference to <paramref name="str" /> if it is in the common language runtime "intern pool"; otherwise null.</returns>
      <param name="str">A <see cref="T:System.String" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>Indicates whether the specified <see cref="T:System.String" /> object is null or an <see cref="F:System.String.Empty" /> string.</summary>
      <returns>true if the <paramref name="value" /> parameter is null or an empty string (""); otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" /> reference. </param>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>Indicates whether a specified string is null, empty, or consists only of white-space characters.</summary>
      <returns>true if the <paramref name="value" /> parameter is null or <see cref="F:System.String.Empty" />, or if <paramref name="value" /> consists exclusively of white-space characters. </returns>
      <param name="value">The string to test.</param>
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />, using the specified separator between each member.</summary>
      <returns>A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</returns>
      <param name="separator">The string to use as a separator.</param>
      <param name="values">A collection that contains the strings to concatenate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates the members of a string collection, using the specified separator between each member.</summary>
      <returns>A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</returns>
      <param name="separator">The string to use as a separator.</param>
      <param name="values">A collection that contains the objects to concatenate.</param>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>Concatenates the elements of an object array, using the specified separator between each element.</summary>
      <returns>A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</returns>
      <param name="separator">The string to use as a separator.</param>
      <param name="values">An array that contains the elements to concatenate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified <see cref="T:System.String" /> array, yielding a single concatenated string.</summary>
      <returns>A <see cref="T:System.String" /> consisting of the elements of <paramref name="value" /> interspersed with the <paramref name="separator" /> string.</returns>
      <param name="separator">A <see cref="T:System.String" />. </param>
      <param name="value">An array of <see cref="T:System.String" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified <see cref="T:System.String" /> array, yielding a single concatenated string. Parameters specify the first array element and number of elements to use.</summary>
      <returns>A <see cref="T:System.String" /> object consisting of the strings in <paramref name="value" /> joined by <paramref name="separator" />. Or, <see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or <paramref name="separator" /> and all the elements of <paramref name="value" /> are <see cref="F:System.String.Empty" />.</returns>
      <param name="separator">A <see cref="T:System.String" />. </param>
      <param name="value">An array of <see cref="T:System.String" />. </param>
      <param name="startIndex">The first array element in <paramref name="value" /> to use. </param>
      <param name="count">The number of elements of <paramref name="value" /> to use. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than 0.-or- <paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>Reports the index position of the last occurrence of a specified Unicode character within this instance.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>Reports the index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
      <param name="startIndex">The starting position of a substring within this instance. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance. </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>Reports the index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
      <param name="startIndex">The starting position of a substring within this instance. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.-or-<paramref name="startIndex" /> + 1 - <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>Reports the index position of the last occurrence of a specified string within this instance.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</returns>
      <param name="value">A string to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>Reports the index position of the last occurrence of a specified string within this instance. The search starts at a specified character position.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The string to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or specifies a position not within this instance. </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>Reports the index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The string to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this instance.-or-<paramref name="startIndex" /> + 1 minus <paramref name="count" /> specifies a position that is not within this instance. </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Reports the index position of the last occurrence of a specified <see cref="T:System.String" /> object within this instance. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this instance.-or-<paramref name="startIndex" /> +1 - <paramref name="count" /> specifies a position that is not within this instance. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>Reports the index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string, and type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or specifies a position that is not within this instance. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>Reports the index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object. A parameter specifies the type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</summary>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position.</summary>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> specifies a position not within this instance. </exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> minus <paramref name="count" /> specify a position that is not within this instance. </exception>
    </member>
    <member name="P:System.String.Length">
      <summary>Gets the number of characters in the current <see cref="T:System.String" /> object.</summary>
      <returns>The number of characters in this instance.</returns>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have the same value.</summary>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.String" /> or null. </param>
      <param name="b">A <see cref="T:System.String" /> or null. </param>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have different values.</summary>
      <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">A String or null. </param>
      <param name="b">A String or null. </param>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>Right-aligns the characters in this instance, padding with spaces on the left for a specified total length.</summary>
      <returns>A new <see cref="T:System.String" /> that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> object that is identical to this instance.</returns>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>Right-aligns the characters in this instance, padding on the left with a specified Unicode character for a specified total length.</summary>
      <returns>A new <see cref="T:System.String" /> that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> that is identical to this instance.</returns>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <param name="paddingChar">A Unicode padding character. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>Returns a new string of a specified length in which the end of the string is padded with spaces or a specified Unicode character.</summary>
      <returns>A new <see cref="T:System.String" /> that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> that is identical to this instance.</returns>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>Left-aligns the characters in this string, padding on the right with a specified Unicode character, for a specified total length.</summary>
      <returns>A new <see cref="T:System.String" /> that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> that is identical to this instance.</returns>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <param name="paddingChar">A Unicode padding character. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>Deletes all the characters from this string beginning at a specified position and continuing through the last position.</summary>
      <returns>A new <see cref="T:System.String" /> object that is equivalent to this string without the removed characters.</returns>
      <param name="startIndex">The zero-based position to begin deleting characters.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero.-or- <paramref name="startIndex" /> specifies a position that is not within this string. </exception>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>Deletes a specified number of characters from this instance beginning at a specified position.</summary>
      <returns>A new <see cref="T:System.String" /> that is equivalent to this instance less <paramref name="count" /> number of characters.</returns>
      <param name="startIndex">The zero-based position to begin deleting characters. </param>
      <param name="count">The number of characters to delete. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance. </exception>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>Returns a new string in which all occurrences of a specified Unicode character in the current string are replaced with another specified Unicode character.</summary>
      <returns>A string that is equivalent to this instance except that all instances of <paramref name="oldChar" /> are replaced with <paramref name="newChar" />.</returns>
      <param name="oldChar">A Unicode character to be replaced. </param>
      <param name="newChar">A Unicode character to replace all occurrences of <paramref name="oldChar" />. </param>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>Returns a new string in which all occurrences of a specified string in the current string are replaced with another specified string.</summary>
      <returns>A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</returns>
      <param name="oldValue">A string to be replaced. </param>
      <param name="newValue">A string to replace all occurrences of <paramref name="oldValue" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> is the empty string (""). </exception>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>Returns a string array that contains the substrings in this instance that are delimited by elements of a specified Unicode character array.</summary>
      <returns>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array that contains no delimiters, or null. </param>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>Returns a string array that contains the substrings in this string that are delimited by elements of a specified Unicode character array. A parameter specifies whether to return empty array elements.</summary>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or null.</param>
      <param name="options">A flag that indicates whether to include empty elements in the returned array. Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty elements from the returned array. Specify <see cref="F:System.StringSplitOptions.None" /> to include empty elements in the returned array.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is a member of the <see cref="T:System.StringSplitOptions" /> enumeration.</exception>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>Returns a string array that contains the substrings in this string that are delimited by elements of a specified string array. A parameter specifies whether to return empty array elements.</summary>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <param name="separator">An array of strings that delimits the substrings in this string, an empty array that contains no delimiters, or null. </param>
      <param name="options">A flag that indicates whether to include empty elements in the returned array. Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the returned array. Specify <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the returned array. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a member of the <see cref="T:System.StringSplitOptions" /> enumeration.</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>Determines whether the beginning of this instance matches the specified string.</summary>
      <returns>true if <paramref name="value" /> matches the beginning of this string; otherwise, false.</returns>
      <param name="value">The string to compare. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>Determines whether the beginning of this string matches the specified string when compared using the specified comparison option.</summary>
      <returns>true if the <paramref name="value" /> parameter matches the beginning of this string; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" /> object to compare to. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values that determines how this string and <paramref name="value" /> are compared. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>Retrieves a substring from this instance. The substring starts at a specified character position.</summary>
      <returns>A <see cref="T:System.String" /> object equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.</returns>
      <param name="startIndex">The zero-based starting character position of a substring in this instance. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance. </exception>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</summary>
      <returns>A <see cref="T:System.String" /> equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance and <paramref name="length" /> is zero.</returns>
      <param name="startIndex">The zero-based starting character position of a substring in this instance. </param>
      <param name="length">The number of characters in the substring. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.-or- <paramref name="startIndex" /> or <paramref name="length" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the current <see cref="T:System.String" /> object. </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Char" /> that can be used to iterate through the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the current <see cref="T:System.String" /> object. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <returns>true if the value of the current <see cref="T:System.String" /> object is <see cref="F:System.Boolean.TrueString" />, or false if the value of the current <see cref="T:System.String" /> object is <see cref="F:System.Boolean.FalseString" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <returns>The character at index 0 in the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="type">The type of the returned object. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. </param>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>Copies the characters in this instance to a Unicode character array.</summary>
      <returns>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</returns>
    </member>
    <member name="M:System.String.ToLower">
      <summary>Returns a copy of this string converted to lowercase, using the casing rules of the current culture.</summary>
      <returns>A string in lowercase.</returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <summary>Returns a copy of this <see cref="T:System.String" /> converted to lowercase, using the casing rules of the specified culture.</summary>
      <returns>A <see cref="T:System.String" /> in lowercase.</returns>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>Returns a copy of this <see cref="T:System.String" /> object converted to lowercase using the casing rules of the invariant culture.</summary>
      <returns>The lowercase equivalent of the current string.</returns>
    </member>
    <member name="M:System.String.ToString">
      <summary>Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</summary>
      <returns>This <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <summary>Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</summary>
      <returns>This <see cref="T:System.String" />.</returns>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>Returns a copy of this string converted to uppercase, using the casing rules of the current culture.</summary>
      <returns>A string in uppercase.</returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <summary>Returns a copy of this <see cref="T:System.String" /> converted to uppercase, using the casing rules of the specified culture.</summary>
      <returns>A <see cref="T:System.String" /> in uppercase.</returns>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>Returns a copy of this <see cref="T:System.String" /> object converted to uppercase using the casing rules of the invariant culture.</summary>
      <returns>The uppercase equivalent of the current string.</returns>
    </member>
    <member name="M:System.String.Trim">
      <summary>Removes all leading and trailing white-space characters from the current <see cref="T:System.String" /> object.</summary>
      <returns>The string that remains after all white-space characters are removed from the start and end of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</summary>
      <returns>The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the start and end of the current <see cref="T:System.String" /> object. If <paramref name="trimChars" /> is null or an empty array, white-space characters are removed instead.</returns>
      <param name="trimChars">An array of Unicode characters to remove or null. </param>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>Removes all trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</summary>
      <returns>The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the end of the current <see cref="T:System.String" /> object. If <paramref name="trimChars" /> is null or an empty array, white-space characters are removed instead.</returns>
      <param name="trimChars">An array of Unicode characters to remove or null. </param>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>Removes all leading occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</summary>
      <returns>The string that remains after all occurrences of characters in the <paramref name="trimChars" /> parameter are removed from the start of the current <see cref="T:System.String" /> object. If <paramref name="trimChars" /> is null or an empty array, white-space characters are removed instead.</returns>
      <param name="trimChars">An array of Unicode characters to remove or null. </param>
    </member>
    <member name="T:System.StringComparer">
      <summary>Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.StringComparer" /> class. </summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</summary>
      <returns>ValueMeaningLess than zero<paramref name="x" /> is less than <paramref name="y" />. -or-<paramref name="x" /> is null.Zero<paramref name="x" /> is equal to <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.-or-<paramref name="y" /> is null.</returns>
      <param name="x">An object to compare to <paramref name="y" />.</param>
      <param name="y">An object to compare to <paramref name="x" />.</param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</summary>
      <returns>ValueMeaningLess than zero<paramref name="x" /> is less than <paramref name="y" />.-or-<paramref name="x" /> is null.Zero<paramref name="x" /> is equal to <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.-or-<paramref name="y" /> is null.</returns>
      <param name="x">A string to compare to <paramref name="y" />.</param>
      <param name="y">A string to compare to <paramref name="x" />.</param>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</summary>
      <returns>A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</returns>
      <param name="culture">A culture whose linguistic rules are used to perform a string comparison.</param>
      <param name="ignoreCase">true to specify that comparison operations be case-insensitive; false to specify that comparison operations be case-sensitive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.</exception>
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</summary>
      <returns>A new <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</summary>
      <returns>A new <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>When overridden in a derived class, indicates whether two objects are equal.</summary>
      <returns>true if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal; otherwise, false.</returns>
      <param name="x">An object to compare to <paramref name="y" />.</param>
      <param name="y">An object to compare to <paramref name="x" />.</param>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>When overridden in a derived class, indicates whether two strings are equal.</summary>
      <returns>true if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal; otherwise, false.</returns>
      <param name="x">A string to compare to <paramref name="y" />.</param>
      <param name="y">A string to compare to <paramref name="x" />.</param>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>When overridden in a derived class, gets the hash code for the specified object.</summary>
      <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</returns>
      <param name="obj">An object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>When overridden in a derived class, gets the hash code for the specified string.</summary>
      <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</returns>
      <param name="obj">A string.</param>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</summary>
      <returns>A new <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</summary>
      <returns>A new <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</summary>
      <returns>A <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</summary>
      <returns>A <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="T:System.StringComparison">
      <summary>Specifies the culture, case, and sort rules to be used by certain overloads of the <see cref="M:System.String.Compare(System.String,System.String)" /> and <see cref="M:System.String.Equals(System.Object)" /> methods.</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>Compare strings using culture-sensitive sort rules and the current culture.</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCulture">
      <summary>Compare strings using culture-sensitive sort rules and the invariant culture.</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCultureIgnoreCase">
      <summary>Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>Compare strings using ordinal sort rules.</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>Compare strings using ordinal sort rules and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>Specifies whether methods that split delimited substrings include or omit empty substrings from the returned array.</summary>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>The return value includes array elements that contain an empty string</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>The return value does not include array elements that contain an empty string</summary>
    </member>
    <member name="T:System.SystemException">
      <summary>Defines the base class for predefined exceptions in the <see cref="N:System" /> namespace.</summary>
    </member>
    <member name="M:System.SystemException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.SystemException" /> class.</summary>
    </member>
    <member name="M:System.SystemException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.SystemException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.SystemException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>Indicates that the value of a static field is unique for each thread.</summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ThreadStaticAttribute" /> class.</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>The exception that is thrown when the time allotted for a process or operation has expired.</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class.</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with the specified error message and inner exception.</summary>
      <param name="message">The message that describes the error. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>Represents a time interval.</summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:System.TimeSpan" /> to a specified number of hours, minutes, and seconds.</summary>
      <param name="hours">Number of hours. </param>
      <param name="minutes">Number of minutes. </param>
      <param name="seconds">Number of seconds. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:System.TimeSpan" /> to a specified number of days, hours, minutes, and seconds.</summary>
      <param name="days">Number of days. </param>
      <param name="hours">Number of hours. </param>
      <param name="minutes">Number of minutes. </param>
      <param name="seconds">Number of seconds. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:System.TimeSpan" /> to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>
      <param name="days">Number of days. </param>
      <param name="hours">Number of hours. </param>
      <param name="minutes">Number of minutes. </param>
      <param name="seconds">Number of seconds. </param>
      <param name="milliseconds">Number of milliseconds. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>Initializes a new <see cref="T:System.TimeSpan" /> to the specified number of ticks.</summary>
      <param name="ticks">A time period expressed in 100-nanosecond units. </param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>Adds the specified <see cref="T:System.TimeSpan" /> to this instance.</summary>
      <returns>An object that represents the value of this instance plus the value of <paramref name="ts" />.</returns>
      <param name="ts">The time interval to add. </param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>Compares two <see cref="T:System.TimeSpan" /> values and returns an integer that indicates whether the first time interval is longer than, equal to, or shorter than the second time interval.</summary>
      <returns>One of the values in the following table.Value Description -1 <paramref name="t1" /> is shorter than <paramref name="t2" />0 <paramref name="t1" /> is equal to <paramref name="t2" />1 <paramref name="t1" /> is longer than <paramref name="t2" /></returns>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the time interval represented by this instance is longer than, equal to, or shorter than the time interval represented by the specified object.</summary>
      <returns>One of the values in the following table.Value Description -1 The value of this instance is shorter than the value of <paramref name="value" />. 0 The value of this instance is equal to the value of <paramref name="value" />. 1 The value of this instance is longer than the value of <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.TimeSpan" />. </exception>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>Compares this instance to a specified <see cref="T:System.TimeSpan" /> object and returns an integer that indicates whether the time interval represented by this instance is longer than, equal to, or shorter than the time interval represented by the specified <see cref="T:System.TimeSpan" /> object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Value Description A negative integer This instance is shorter than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. A positive integer This instance is longer than <paramref name="value" />. </returns>
      <param name="value">An object to compare to this instance.</param>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>Gets the days component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The day component of this instance. The return value can be positive or negative.</returns>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</summary>
      <returns>A new object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</returns>
      <exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.TimeSpan" /> object that represents the same time interval as the current <see cref="T:System.TimeSpan" /> structure; otherwise, false.</returns>
      <param name="value">An object to compare with this instance. </param>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> object.</summary>
      <returns>true if <paramref name="obj" /> represents the same time interval as this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>Returns a value indicating whether two specified instances of <see cref="T:System.TimeSpan" /> are equal.</summary>
      <returns>true if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, false.</returns>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</summary>
      <returns>An object that represents <paramref name="value" />.</returns>
      <param name="value">A number of days, accurate to the nearest millisecond. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. -or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</summary>
      <returns>An object that represents <paramref name="value" />.</returns>
      <param name="value">A number of hours, accurate to the nearest millisecond. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. -or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.</summary>
      <returns>An object that represents <paramref name="value" />.</returns>
      <param name="value">A number of milliseconds. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</summary>
      <returns>An object that represents <paramref name="value" />.</returns>
      <param name="value">A number of minutes, accurate to the nearest millisecond. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</summary>
      <returns>An object that represents <paramref name="value" />.</returns>
      <param name="value">A number of seconds, accurate to the nearest millisecond. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where the specification is in units of ticks.</summary>
      <returns>An object that represents <paramref name="value" />.</returns>
      <param name="value">A number of ticks that represent a time. </param>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>Gets the hour component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The hour component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -23 through 23.</returns>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>Represents the maximum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>Gets the millisecond component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The millisecond component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -999 through 999.</returns>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>Gets the minute component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The minute component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</returns>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>Represents the minimum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of this instance.</summary>
      <returns>The same numeric value as this instance, but with the opposite sign.</returns>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>Adds two specified <see cref="T:System.TimeSpan" /> instances.</summary>
      <returns>An object whose value is the sum of the values of <paramref name="t1" /> and <paramref name="t2" />.</returns>
      <param name="t1">The first time interval to add. </param>
      <param name="t2">The second time interval to add. </param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are equal.</summary>
      <returns>true if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, false.</returns>
      <param name="t1">The first time interval to compare. </param>
      <param name="t2">The second time interval to compare. </param>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than another specified <see cref="T:System.TimeSpan" />.</summary>
      <returns>true if the value of <paramref name="t1" /> is greater than the value of <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
      <returns>true if the value of <paramref name="t1" /> is greater than or equal to the value of <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are not equal.</summary>
      <returns>true if the values of <paramref name="t1" /> and <paramref name="t2" /> are not equal; otherwise, false.</returns>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than another specified <see cref="T:System.TimeSpan" />.</summary>
      <returns>true if the value of <paramref name="t1" /> is less than the value of <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
      <returns>true if the value of <paramref name="t1" /> is less than or equal to the value of <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>Subtracts a specified <see cref="T:System.TimeSpan" /> from another specified <see cref="T:System.TimeSpan" />.</summary>
      <returns>An object whose value is the result of the value of <paramref name="t1" /> minus the value of <paramref name="t2" />.</returns>
      <param name="t1">The time interval to subtract from (the minuend). </param>
      <param name="t2">The time interval to subtract (the subtrahend). </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of the specified instance.</summary>
      <returns>An object that has the same numeric value as this instance, but the opposite sign.</returns>
      <param name="t">The time interval to be negated. </param>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>Returns the specified instance of <see cref="T:System.TimeSpan" />.</summary>
      <returns>The time interval specified by <paramref name="t" />.</returns>
      <param name="t">The time interval to return. </param>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent. </summary>
      <returns>A time interval that corresponds to <paramref name="s" />.</returns>
      <param name="s">A string that specifies that specifies the time interval to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific format information.</summary>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles. The format of the string representation must match the specified format exactly.</summary>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified array of format strings and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</summary>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" /> and <paramref name="formatProvider" />.</returns>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">A array of standard or custom format strings that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles. The format of the string representation must match one of the specified formats exactly. </summary>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">A array of standard or custom format strings that define the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in input.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>Gets the second component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The second component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>Subtracts the specified <see cref="T:System.TimeSpan" /> from this instance.</summary>
      <returns>An object whose value is the result of the value of this instance minus the value of <paramref name="ts" />.</returns>
      <param name="ts">The time interval to be subtracted. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>Gets the number of ticks that represents the value of the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The number of ticks contained in this instance.</returns>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>Represents the number of ticks in 1 day. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>Represents the number of ticks in 1 hour. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>Represents the number of ticks in 1 millisecond. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>Represents the number of ticks in 1 minute. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>Represents the number of ticks in 1 second.</summary>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value.</returns>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation by using the specified format.</summary>
      <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value in the format specified by the <paramref name="format" /> parameter.</returns>
      <param name="format">A standard or custom <see cref="T:System.TimeSpan" /> format string.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation by using the specified format and culture-specific formatting information.</summary>
      <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
      <param name="format">A standard or custom <see cref="T:System.TimeSpan" /> format string.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional days.</summary>
      <returns>The total number of days represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional hours.</summary>
      <returns>The total number of hours represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional milliseconds.</summary>
      <returns>The total number of milliseconds represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional minutes.</summary>
      <returns>The total number of minutes represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional seconds.</summary>
      <returns>The total number of seconds represented by this instance.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="input" /> was converted successfully; otherwise, false. This operation returns false if the <paramref name="input" /> parameter is null or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false. This operation returns false if the <paramref name="s" /> parameter is null or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
      <param name="s">A string that specifies the time interval to convert.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="s" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly. </summary>
      <returns>true if <paramref name="input" /> was converted successfully; otherwise, false.</returns>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly. </summary>
      <returns>true if <paramref name="input" /> was converted successfully; otherwise, false.</returns>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly. </summary>
      <returns>true if <paramref name="input" /> was converted successfully; otherwise, false.</returns>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">A array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly. </summary>
      <returns>true if <paramref name="input" /> was converted successfully; otherwise, false.</returns>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">A array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>Represents the zero <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>Represents a time zone.</summary>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that indicates the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>Converts a time to the time in a particular time zone.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that represents the date and time in the destination time zone.</returns>
      <param name="dateTime">The date and time to convert.   </param>
      <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime" /> to. It must be either <see cref="P:System.TimeZoneInfo.Local" /> or <see cref="P:System.TimeZoneInfo.Utc" />.</param>
      <exception cref="T:System.ArgumentException">The value of the <paramref name="dateTime" /> parameter represents an invalid time.</exception>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is null.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>Converts a time to the time in a particular time zone.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> value that represents the date and time in the destination time zone.</returns>
      <param name="dateTimeOffset">The date and time to convert.   </param>
      <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime" /> to. It must be either <see cref="P:System.TimeZoneInfo.Local" /> or <see cref="P:System.TimeZoneInfo.Utc" />.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is null.</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>Gets the localized display name for the current time zone's daylight saving time.</summary>
      <returns>The display name for the time zone's localized daylight saving time.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>Gets the localized general display name that represents the time zone.</summary>
      <returns>The time zone's localized general display name.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another <see cref="T:System.TimeZoneInfo" /> object are equal.</summary>
      <returns>true if the two <see cref="T:System.TimeZoneInfo" /> objects are equal; otherwise, false.</returns>
      <param name="other">A second <see cref="T:System.TimeZoneInfo" /> object to compare with the current <see cref="T:System.TimeZoneInfo" /> object.  </param>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
      <returns>An array of <see cref="T:System.TimeSpan" /> objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
      <param name="dateTime">A date and time.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> is not an ambiguous time.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
      <returns>An array of <see cref="T:System.TimeSpan" /> objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
      <param name="dateTimeOffset">A date and time.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> is not an ambiguous time.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
      <returns>A 32-bit signed integer that serves as the hash code for this <see cref="T:System.TimeZoneInfo" /> object.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that indicates the time difference between the two time zones.</returns>
      <param name="dateTime">The date and time to determine the offset for.   </param>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.</returns>
      <param name="dateTimeOffset">The date and time to determine the offset for.</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
      <returns>true if the <paramref name="dateTime" /> parameter is ambiguous; otherwise, false.</returns>
      <param name="dateTime">A date and time value.   </param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
      <returns>true if the <paramref name="dateTimeOffset" /> parameter is ambiguous in the current time zone; otherwise, false.</returns>
      <param name="dateTimeOffset">A date and time.</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <returns>true if the <paramref name="dateTime" /> parameter is a daylight saving time; otherwise, false.</returns>
      <param name="dateTime">A date and time value.   </param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <returns>true if the <paramref name="dateTimeOffset" /> parameter is a daylight saving time; otherwise, false.</returns>
      <param name="dateTimeOffset">A date and time value.</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>Indicates whether a particular date and time is invalid.</summary>
      <returns>true if <paramref name="dateTime" /> is invalid; otherwise, false.</returns>
      <param name="dateTime">A date and time value.   </param>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone.</summary>
      <returns>A <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>Gets the localized display name for the time zone's standard time.</summary>
      <returns>The localized display name of the time zone's standard time.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>Gets a value indicating whether the time zone has any daylight saving time rules.</summary>
      <returns>true if the time zone supports daylight saving time; otherwise, false.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>Returns the current <see cref="T:System.TimeZoneInfo" /> object's display name.</summary>
      <returns>The value of the <see cref="P:System.TimeZoneInfo.DisplayName" /> property of the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the Coordinated Universal Time (UTC) zone.</summary>
      <returns>A <see cref="T:System.TimeZoneInfo" /> object that represents the Coordinated Universal Time (UTC) zone.</returns>
    </member>
    <member name="T:System.Tuple">
      <summary>Provides static methods for creating tuple objects.</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>Creates a new 1-tuple, or singleton.</summary>
      <returns>A tuple whose value is (<paramref name="item1" />).</returns>
      <param name="item1">The value of the only component of the tuple.</param>
      <typeparam name="T1">The type of the only component of the tuple.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>Creates a new 2-tuple, or pair.</summary>
      <returns>A 2-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />).</returns>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>Creates a new 3-tuple, or triple.</summary>
      <returns>A 3-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />).</returns>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>Creates a new 4-tuple, or quadruple.</summary>
      <returns>A 4-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />).</returns>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.  </typeparam>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>Creates a new 5-tuple, or quintuple.</summary>
      <returns>A 5-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />).</returns>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>Creates a new 6-tuple, or sextuple.</summary>
      <returns>A 6-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />).</returns>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>Creates a new 7-tuple, or septuple.</summary>
      <returns>A 7-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />).</returns>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <param name="item7">The value of the seventh component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>Creates a new 8-tuple, or octuple.</summary>
      <returns>An 8-tuple (octuple) whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />). </returns>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <param name="item7">The value of the seventh component of the tuple.</param>
      <param name="item8">The value of the eighth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
      <typeparam name="T8">The type of the eighth component of the tuple.</typeparam>
    </member>
    <member name="T:System.Tuple`1">
      <summary>Represents a 1-tuple, or singleton.</summary>
      <typeparam name="T1">The type of the tuple's only component.</typeparam>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`1" /> class.</summary>
      <param name="item1">The value of the tuple's only component.</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`1" /> object is equal to a specified object.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`1" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>Gets the value of the <see cref="T:System.Tuple`1" /> object's single component. </summary>
      <returns>The value of the current <see cref="T:System.Tuple`1" /> object's single component.</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`1" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="other" />.ZeroThis instance and <paramref name="other" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="other" />.</returns>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`1" /> object.</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`1" /> object is equal to a specified object based on a specified comparison method.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`1" /> object by using a specified computation method.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" />  method calculates the hash code of the current <see cref="T:System.Tuple`1" /> object.</param>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`1" /> object to a specified object, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="obj" />.ZeroThis instance and <paramref name="obj" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="obj" />.</returns>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`1" /> object.</exception>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`1" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`1" /> object.</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>Represents a 2-tuple, or pair.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`2" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`2" /> object is equal to a specified object.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`2" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`2" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`2" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`2" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`2" /> object's second component.</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`2" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="other" />.ZeroThis instance and <paramref name="other" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="other" />.</returns>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`2" /> object.</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`2" /> object is equal to a specified object based on a specified comparison method.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`2" /> object by using a specified computation method.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" />  method calculates the hash code of the current <see cref="T:System.Tuple`2" /> object.</param>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`2" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="obj" />.ZeroThis instance and <paramref name="obj" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="obj" />.</returns>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`2" /> object.</exception>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`2" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`2" /> object.</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>Represents a 3-tuple, or triple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`3" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`3" /> object is equal to a specified object.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`3" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`3" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`3" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`3" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`3" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`3" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`3" /> object's third component.</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`3" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="other" />.ZeroThis instance and <paramref name="other" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="other" />.</returns>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`3" /> object.</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`3" /> object is equal to a specified object based on a specified comparison method.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`3" /> object by using a specified computation method.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" />  method calculates the hash code of the current <see cref="T:System.Tuple`3" /> object.</param>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`3" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="obj" />.ZeroThis instance and <paramref name="obj" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="obj" />.</returns>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`3" /> object.</exception>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`3" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`3" /> object.</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>Represents a 4-tuple, or quadruple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`4" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`4" /> object is equal to a specified object.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`4" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's fourth component.</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`4" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="other" />.ZeroThis instance and <paramref name="other" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="other" />.</returns>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`4" /> object.</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`4" /> object is equal to a specified object based on a specified comparison method.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`4" /> object by using a specified computation method.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" />  method calculates the hash code of the current <see cref="T:System.Tuple`4" /> object.</param>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`4" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="obj" />.ZeroThis instance and <paramref name="obj" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="obj" />.</returns>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`4" /> object.</exception>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`4" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`4" /> object.</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>Represents a 5-tuple, or quintuple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`5" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`5" /> object is equal to a specified object.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`5" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's fifth component.</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`5" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="other" />.ZeroThis instance and <paramref name="other" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="other" />.</returns>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`5" /> object.</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`5" /> object is equal to a specified object based on a specified comparison method.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`5" /> object by using a specified computation method.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" />  method calculates the hash code of the current <see cref="T:System.Tuple`5" /> object.</param>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`5" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="obj" />.ZeroThis instance and <paramref name="obj" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="obj" />.</returns>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`5" /> object.</exception>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`5" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`5" /> object.</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>Represents a 6-tuple, or sextuple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`6" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`6" /> object is equal to a specified object.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`6" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's fifth  component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's sixth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's sixth component.</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`6" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="other" />.ZeroThis instance and <paramref name="other" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="other" />.</returns>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`6" /> object.</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`6" /> object is equal to a specified object based on a specified comparison method.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`6" /> object by using a specified computation method.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" />  method calculates the hash code of the current <see cref="T:System.Tuple`6" /> object.</param>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`6" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="obj" />.ZeroThis instance and <paramref name="obj" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="obj" />.</returns>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`6" /> object.</exception>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`6" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`6" /> object.</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>Represents a 7-tuple, or septuple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
      <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`7" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
      <param name="item7">The value of the tuple's seventh component.</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`7" /> object is equal to a specified object.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`7" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's fifth component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's sixth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's sixth component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's seventh component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's seventh component.</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`7" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="other" />.ZeroThis instance and <paramref name="other" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="other" />.</returns>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`7" /> object.</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`7" /> object is equal to a specified object based on a specified comparison method.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`7" /> object by using a specified computation method.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`7" /> object.</param>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`7" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="obj" />.ZeroThis instance and <paramref name="obj" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="obj" />.</returns>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`7" /> object.</exception>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`7" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`7" /> object.</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>Represents an n-tuple, where n is 8 or greater. </summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
      <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
      <typeparam name="TRest">Any generic Tuple object that defines the types of the tuple's remaining components.</typeparam>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`8" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
      <param name="item7">The value of the tuple's seventh component.</param>
      <param name="rest">Any generic Tuple object that contains the values of the tuple's remaining components.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> is not a generic Tuple object.</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`8" /> object is equal to a specified object.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`8" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's fifth component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's sixth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's sixth component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's seventh component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's seventh component.</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>Gets the current <see cref="T:System.Tuple`8" /> object's remaining components.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's remaining components.</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`8" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="other" />.ZeroThis instance and <paramref name="other" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="other" />.</returns>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`8" /> object.</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`8" /> object is equal to a specified object based on a specified comparison method.</summary>
      <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`8" /> object by using a specified computation method.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" />  method calculates the hash code of the current <see cref="T:System.Tuple`8" /> object.</param>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`8" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.ValueDescriptionA negative integerThis instance precedes <paramref name="obj" />.ZeroThis instance and <paramref name="obj" /> have the same position in the sort order.A positive integerThis instance follows <paramref name="obj" />.</returns>
      <param name="obj">An object to compare with the current instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`8" /> object.</exception>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`8" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`8" /> object.</returns>
    </member>
    <member name="T:System.Type">
      <summary>Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</summary>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</returns>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>Gets the assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</summary>
      <returns>The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or null if the current instance represents a generic type parameter.</returns>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>Gets the attributes associated with the <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified. </returns>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</summary>
      <returns>The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or null if the current Type represents the <see cref="T:System.Object" /> class or an interface.</returns>
    </member>
    <member name="P:System.Type.ContainsGenericParameters">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</summary>
      <returns>true if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.DeclaringMethod">
      <summary>Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</summary>
      <returns>If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, null.</returns>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>Gets the type that declares the current nested type or generic type parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, null.</returns>
    </member>
    <member name="P:System.Type.DefaultBinder">
      <summary>Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</summary>
      <returns>A reference to the default binder used by the system.</returns>
    </member>
    <member name="F:System.Type.Delimiter">
      <summary>Separates names in the namespace of the <see cref="T:System.Type" />. This field is read-only.</summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>Represents an empty array of type <see cref="T:System.Type" />. This field is read-only.</summary>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" />.</summary>
      <returns>true if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, false. This method also returns false if the object specified by the <paramref name="o" /> parameter is not a Type.</returns>
      <param name="o">The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />. </param>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</summary>
      <returns>true if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />. </param>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
      <summary>Represents the case-insensitive member filter used on names. This field is read-only.</summary>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</summary>
      <returns>A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</returns>
      <param name="memberType">A MemberTypes object indicating the type of member to search for. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="filter">The delegate that does the comparisons, returning true if the member currently being inspected matches the <paramref name="filterCriteria" /> and false otherwise. You can use the FilterAttribute, FilterName, and FilterNameIgnoreCase delegates supplied by this class. The first uses the fields of FieldAttributes, MethodAttributes, and MethodImplAttributes as search criteria, and the other two delegates use String objects as the search criteria. </param>
      <param name="filterCriteria">The search criteria that determines whether a member is returned in the array of MemberInfo objects.The fields of FieldAttributes, MethodAttributes, and MethodImplAttributes can be used in conjunction with the FilterAttribute delegate supplied by this class. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null. </exception>
    </member>
    <member name="P:System.Type.FullName">
      <summary>Gets the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly.</summary>
      <returns>The fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly; or null if the current instance represents a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</returns>
    </member>
    <member name="P:System.Type.GenericParameterAttributes">
      <summary>Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter. </summary>
      <returns>A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns false.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</summary>
      <returns>The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.</returns>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a type parameter. That is, <see cref="P:System.Type.IsGenericParameter" /> returns false. </exception>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>Gets the number of dimensions in an <see cref="T:System.Array" />.</summary>
      <returns>An <see cref="T:System.Int32" /> containing the number of dimensions in the current Type.</returns>
      <exception cref="T:System.NotSupportedException">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead. </exception>
      <exception cref="T:System.ArgumentException">The current Type is not an array. </exception>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.-or- <see cref="F:System.Type.EmptyTypes" />. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>Searches for a public instance constructor whose parameters match the types in the specified array.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null.</returns>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.-or- An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters. Such an empty array is provided by the static field <see cref="F:System.Type.EmptyTypes" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
      <exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</exception>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>Returns all the public constructors defined for the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor). If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified BindingFlags.</summary>
      <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</returns>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</summary>
      <returns>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</summary>
      <returns>The <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event which is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</summary>
      <returns>The <see cref="T:System.Reflection.EventInfo" /> object representing the specified event which is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events which are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>Searches for the public field with the specified name.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the public field with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the data field to get. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called. </exception>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified field, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the data field to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>Returns all the public fields of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type or the type parameters of a generic type definition.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.GetGenericParameterConstraints">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter. </summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns false.</exception>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</summary>
      <returns>A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</returns>
      <exception cref="T:System.InvalidOperationException">The current type is not a generic type.  That is, <see cref="P:System.Type.IsGenericType" /> returns false. </exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>An <see cref="T:System.Int32" /> containing the hash code for this instance.</returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
      <summary>When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
      <param name="ignoreCase">true to ignore the case of that part of <paramref name="name" /> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).-or- false to perform a case-sensitive search for all parts of <paramref name="name" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments. </exception>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the specified interface type.</summary>
      <returns>An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</returns>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="interfaceType" /> parameter does not refer to an interface. -or-<paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is true.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">A static initializer is invoked and throws an exception. </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>Searches for the public members with the specified name.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public members to get. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified members, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the members to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return an empty array. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Searches for the specified members of the specified member type, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the members to get. </param>
      <param name="type">The <see cref="T:System.Reflection.MemberTypes" /> value to search for. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return an empty array. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">A derived class must provide an implementation. </exception>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>Returns all the public members of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>Searches for the public method with the specified name.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified method, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>Searches for the specified public method whose parameters match the specified argument types.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose parameters match the specified argument types, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified public method whose parameters match the specified argument types and modifiers.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.  </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.-or- null. If <paramref name="types" /> is null, arguments are not matched. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
      <exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</exception>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>Returns all the public methods of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The string containing the name of the nested type to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>Returns all the public properties of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>Searches for the public property with the specified name.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name. See Remarks.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified property, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. See Remarks.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is null.</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>Searches for the public property with the specified name and return type.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <param name="returnType">The return type of the property. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null, or <paramref name="returnType" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>Searches for the specified public property whose parameters match the specified argument types.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. </exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is null.</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified public property whose parameters match the specified argument types and modifiers.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types and modifiers. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is null.</exception>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
      <exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</exception>
    </member>
    <member name="M:System.Type.GetType">
      <summary>Gets the current <see cref="T:System.Type" />.</summary>
      <returns>The current <see cref="T:System.Type" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</summary>
      <returns>The <see cref="T:System.Type" /> with the specified name, if found; otherwise, null.</returns>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly or one of its dependencies was not found. </exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-The assembly was compiled with a later version of the .NET Framework.</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</summary>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether null is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section. </returns>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="throwOnError">true to throw an exception if the type cannot be found; false to return null. Specifying false also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. -or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid syntax. For example, "MyType[,*,]".-or- <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is true and the assembly or one of its dependencies was not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-The assembly was compiled with a later version of the .NET Framework.</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</summary>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether null is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section. </returns>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="throwOnError">true to throw an exception if the type cannot be found; false to return null. Specifying false also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <param name="ignoreCase">true to perform a case-insensitive search for <paramref name="typeName" />, false to perform a case-sensitive search for <paramref name="typeName" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. -or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid syntax. For example, "MyType[,*,]".-or- <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is true and the assembly or one of its dependencies was not found. </exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-The assembly was compiled with a later version of the .NET Framework.</exception>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>Gets the underlying type code of the specified <see cref="T:System.Type" />.</summary>
      <returns>The <see cref="T:System.TypeCode" /> value of the underlying type.</returns>
      <param name="type">The <see cref="T:System.Type" /> whose underlying type code to get. </param>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>Gets the type referenced by the specified type handle.</summary>
      <returns>The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or null if the value of the handle is null.</returns>
      <param name="handle">The <see cref="T:System.RuntimeTypeHandle" /> object that refers to the type. </param>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
    </member>
    <member name="M:System.Type.GetTypeHandle(System.Object)">
      <summary>Gets the handle for the <see cref="T:System.Type" /> of a specified object.</summary>
      <returns>The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</returns>
      <param name="o">The <see cref="T:System.Object" /> for which to get the Type handle. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is null.</exception>
    </member>
    <member name="P:System.Type.GUID">
      <summary>Gets the GUID associated with the <see cref="T:System.Type" />.</summary>
      <returns>The GUID associated with the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list.</summary>
      <returns>An <see cref="T:System.Object" /> representing the return value of the invoked member.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. </param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be requird for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member. </param>
      <param name="args">An array containing the arguments to pass to the member to invoke. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> contains CreateInstance and <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> is multidimensional.-or- <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute. -or- <paramref name="invokeAttr" /> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty. -or- <paramref name="invokeAttr" /> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains both GetField and SetField.-or- <paramref name="invokeAttr" /> contains both GetProperty and SetProperty.-or- <paramref name="invokeAttr" /> contains InvokeMethod combined with SetField or SetProperty.-or- <paramref name="invokeAttr" /> contains SetField and <paramref name="args" /> has more than one element.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null. </exception>
      <exception cref="T:System.MethodAccessException">The specified member is a class initializer. </exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception>
      <exception cref="T:System.MissingMethodException">The method cannot be found.-or- The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true. </exception>
      <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria. </exception>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this method.</exception>
      <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns true.</exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</summary>
      <returns>An <see cref="T:System.Object" /> representing the return value of the invoked member.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be requird for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member. </param>
      <param name="args">An array containing the arguments to pass to the member to invoke. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array. A parameter's associated attributes are stored in the member's signature. The default binder processes this parameter only when calling a COM component. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or- null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />. </param>
      <param name="namedParameters">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> contains CreateInstance and <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.-or- <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute. -or- <paramref name="invokeAttr" /> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty. -or- <paramref name="invokeAttr" /> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains both GetField and SetField.-or- <paramref name="invokeAttr" /> contains both GetProperty and SetProperty.-or- <paramref name="invokeAttr" /> contains InvokeMethod combined with SetField or SetProperty.-or- <paramref name="invokeAttr" /> contains SetField and <paramref name="args" /> has more than one element.-or- The named parameter array is larger than the argument array.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null. </exception>
      <exception cref="T:System.MethodAccessException">The specified member is a class initializer. </exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception>
      <exception cref="T:System.MissingMethodException">The method cannot be found.-or- The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true. </exception>
      <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria. </exception>
      <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns true.</exception>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</summary>
      <returns>true if the <see cref="T:System.Type" /> is abstract; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsAnsiClass">
      <summary>Gets a value indicating whether the string format attribute AnsiClass is selected for the <see cref="T:System.Type" />.</summary>
      <returns>true if the string format attribute AnsiClass is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is an array.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>Determines whether an instance of the current <see cref="T:System.Type" /> can be assigned from an instance of the specified Type.</summary>
      <returns>true if <paramref name="c" /> and the current Type represent the same type, or if the current Type is in the inheritance hierarchy of <paramref name="c" />, or if the current Type is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current Type represents one of the constraints of <paramref name="c" />. false if none of these conditions are true, or if <paramref name="c" /> is null.</returns>
      <param name="c">The Type to compare with the current Type. </param>
    </member>
    <member name="P:System.Type.IsAutoClass">
      <summary>Gets a value indicating whether the string format attribute AutoClass is selected for the <see cref="T:System.Type" />.</summary>
      <returns>true if the string format attribute AutoClass is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsAutoLayout">
      <summary>Gets a value indicating whether the class layout attribute AutoLayout is selected for the <see cref="T:System.Type" />.</summary>
      <returns>true if the class layout attribute AutoLayout is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>true if the <see cref="T:System.Type" /> is passed by reference; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>true if the <see cref="T:System.Type" /> is passed by reference; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsClass">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a class; that is, not a value type or interface.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a class; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsCOMObject">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a COM object; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a COM object; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</summary>
      <returns>true if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsGenericParameter">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</summary>
      <returns>true if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsGenericType">
      <summary>Gets a value indicating whether the current type is a generic type.</summary>
      <returns>true if the current type is a generic type; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</summary>
      <returns>true if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsImport">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</summary>
      <returns>true if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</summary>
      <returns>true if the current Type is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current Type is an interface that <paramref name="o" /> supports. false if neither of these conditions is the case, or if <paramref name="o" /> is null, or if the current Type is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true).</returns>
      <param name="o">The object to compare with the current Type. </param>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an interface; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested inside another type; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and declared private; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>Gets a value indicating whether a class is nested and declared public.</summary>
      <returns>true if the class is nested and declared public; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</summary>
      <returns>true if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a pointer; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a pointer; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>true if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>true if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</summary>
      <returns>true if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</summary>
      <returns>true if the <see cref="T:System.Type" /> is declared sealed; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsSpecialName">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> has a name that requires special handling.</summary>
      <returns>true if the <see cref="T:System.Type" /> has a name that requires special handling; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>Determines whether the class represented by the current <see cref="T:System.Type" /> derives from the class represented by the specified <see cref="T:System.Type" />.</summary>
      <returns>true if the Type represented by the <paramref name="c" /> parameter and the current Type represent classes, and the class represented by the current Type derives from the class represented by <paramref name="c" />; otherwise, false. This method also returns false if <paramref name="c" /> and the current Type represent the same class.</returns>
      <param name="c">The Type to compare with the current Type. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="c" /> parameter is null. </exception>
    </member>
    <member name="P:System.Type.IsUnicodeClass">
      <summary>Gets a value indicating whether the string format attribute UnicodeClass is selected for the <see cref="T:System.Type" />.</summary>
      <returns>true if the string format attribute UnicodeClass is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a value type; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a value type; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsVisible">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</summary>
      <returns>true if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</summary>
      <returns>A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</summary>
      <returns>A <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</returns>
      <param name="rank">The number of dimensions for the array. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is invalid. For example, 0 or negative.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</summary>
      <returns>A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</returns>
      <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic type.</param>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a generic type definition. That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns false. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is null.-or- Any element of <paramref name="typeArguments" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.-or- Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. </exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents a pointer to the current type.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="P:System.Type.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</returns>
    </member>
    <member name="F:System.Type.Missing">
      <summary>Represents a missing value in the <see cref="T:System.Type" /> information. This field is read-only.</summary>
    </member>
    <member name="P:System.Type.Module">
      <summary>Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</summary>
      <returns>The module in which the current <see cref="T:System.Type" /> is defined.</returns>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>Gets the namespace of the <see cref="T:System.Type" />.</summary>
      <returns>The namespace of the <see cref="T:System.Type" />; null if the current instance has no namespace, or represents a generic parameter.</returns>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>Gets the class object that was used to obtain this member. </summary>
      <returns>The Type object through which this MemberInfo object was obtained. </returns>
    </member>
    <member name="M:System.Type.ToString">
      <summary>Returns a String representing the name of the current Type.</summary>
      <returns>A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>Gets the handle for the current <see cref="T:System.Type" />.</summary>
      <returns>The handle for the current <see cref="T:System.Type" />.</returns>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this property.</exception>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>Indicates the type provided by the common language runtime that represents this type.</summary>
      <returns>The underlying system type for the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>The exception that is thrown when a method attempts to use a type that it does not have access to.</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.TypeCode">
      <summary>Specifies the type of an object.</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>A null reference.</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>A general type representing any reference or value type not explicitly represented by another TypeCode.</summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
      <summary>A database null (column) value.</summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>A simple type representing Boolean values of true or false.</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535. The set of possible values for the <see cref="F:System.TypeCode.Char" /> type corresponds to the Unicode character set.</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>An integral type representing signed 8-bit integers with values between -128 and 127.</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>An integral type representing unsigned 8-bit integers with values between 0 and 255.</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>An integral type representing signed 16-bit integers with values between -32768 and 32767.</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535.</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>An integral type representing unsigned 32-bit integers with values between 0 and 4294967295.</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits.</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>A type representing a date and time value.</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>A sealed class type representing Unicode character strings.</summary>
    </member>
    <member name="T:System.TypedReference">
      <summary>Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location.</summary>
    </member>
    <member name="M:System.TypedReference.Equals(System.Object)">
      <summary>Checks if this object is equal to the specified object.</summary>
      <returns>true if this object is equal to the specified object; otherwise, false.</returns>
      <param name="o">The object with which to compare the current object. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented. </exception>
    </member>
    <member name="M:System.TypedReference.GetHashCode">
      <summary>Returns the hash code of this object.</summary>
      <returns>The hash code of this object.</returns>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>The exception that is thrown as a wrapper around the exception thrown by the class initializer. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</summary>
      <param name="fullTypeName">The fully qualified name of the type that fails to initialize. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>Gets the fully qualified name of the type that fails to initialize.</summary>
      <returns>The fully qualified name of the type that fails to initialize.</returns>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>The exception that is thrown when type-loading failures occur.</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class.</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>Gets the error message for this exception.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.UInt16">
      <summary>Represents a 16-bit unsigned integer.</summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt16" />. </exception>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>Compares this instance to a specified 16-bit unsigned integer and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified 16-bit unsigned integer.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An unsigned integer to compare. </param>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UInt16" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance. </param>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt16" /> value.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.UInt16" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt16" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt16" />.</returns>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt16" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt16" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>Converts the string representation of a number to its 16-bit unsigned integer equivalent.</summary>
      <returns>A 16-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string that represents the number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 16-bit unsigned integer equivalent.</summary>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.-or-<paramref name="s" /> includes non-zero, fractional digits. </exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent.</summary>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 16-bit unsigned integer equivalent.</summary>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string that represents the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of this instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The current value pf this instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.UInt16" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</returns>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 16-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>Tries to convert the string representation of a number to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="result">When this method returns, contains the 16-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in the correct format, or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.UInt32">
      <summary>Represents a 32-bit unsigned integer.</summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt32" />. </exception>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>Compares this instance to a specified 32-bit unsigned integer and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified 32-bit unsigned integer.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An unsigned integer to compare. </param>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UInt32" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt32" />.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.UInt32" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt32" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt32" />.</returns>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt32" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt32" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>Converts the string representation of a number to its 32-bit unsigned integer equivalent.</summary>
      <returns>A 32-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 32-bit unsigned integer equivalent.</summary>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent.</summary>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 32-bit unsigned integer equivalent.</summary>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct style.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.UInt32" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance. </param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 32-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>Converts the string representation of a number to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="result">When this method returns, contains the 32-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.UInt64">
      <summary>Represents a 64-bit unsigned integer.</summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt64" />. </exception>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>Compares this instance to a specified 64-bit unsigned integer and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified 64-bit unsigned integer.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An unsigned integer to compare. </param>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UInt64" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance. </param>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt64" /> value.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.UInt64" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt64" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt64" />.</returns>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt64" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt64" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>Converts the string representation of a number to its 64-bit unsigned integer equivalent.</summary>
      <returns>A 64-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string that represents the number to convert. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 64-bit unsigned integer equivalent.</summary>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of the enumeration values that specifies the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent.</summary>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent.</summary>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.UInt64" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information about this instance. </param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 64-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>Tries to convert the string representation of a number to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string that represents the number to convert. </param>
      <param name="result">When this method returns, contains the 64-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.UIntPtr">
      <summary>A platform-specific type that is used to represent a pointer or a handle.</summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.UIntPtr" /> structure using the specified 32-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified 64-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.UIntPtr" />. </exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified pointer to an unspecified type.</summary>
      <param name="value">A pointer to an unspecified type. </param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UIntPtr" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance or null. </param>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are equal.</summary>
      <returns>true if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, false.</returns>
      <param name="value1">A <see cref="T:System.UIntPtr" />. </param>
      <param name="value2">A <see cref="T:System.UIntPtr" />. </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>Converts the value of a 32-bit unsigned integer to an <see cref="T:System.UIntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>Converts the value of a 64-bit unsigned integer to an <see cref="T:System.UIntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.UIntPtr" />. </exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 32-bit unsigned integer.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.UIntPtr" />. </param>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit unsigned integer. </exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 64-bit unsigned integer.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.UIntPtr" />. </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a pointer to an unspecified type.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.UIntPtr" />. </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>Converts the specified pointer to an unspecified type to a <see cref="T:System.UIntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A pointer to an unspecified type. </param>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are not equal.</summary>
      <returns>true if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, false.</returns>
      <param name="value1">A <see cref="T:System.UIntPtr" />. </param>
      <param name="value2">A <see cref="T:System.UIntPtr" />. </param>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>Gets the size of this instance.</summary>
      <returns>The size of a pointer or handle on this platform, measured in bytes. The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.</returns>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>Converts the value of this instance to a pointer to an unspecified type.</summary>
      <returns>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.</returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>Converts the value of this instance to a 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equal to the value of this instance.</returns>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of this instance is too large to represent as a 32-bit unsigned integer. </exception>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>Converts the value of this instance to a 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equal to the value of this instance.</returns>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>A read-only field that represents a pointer or handle that has been initialized to zero.</summary>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>The exception that is thrown when the operating system denies access because of an I/O error or a specific type of security error. </summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class.</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that caused the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.UnhandledExceptionEventArgs">
      <summary>Provides data for the event that is raised when there is an exception that is not handled in any application domain.</summary>
    </member>
    <member name="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</summary>
      <param name="exception">The exception that is not handled. </param>
      <param name="isTerminating">true if the runtime is terminating; otherwise, false. </param>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.ExceptionObject">
      <summary>Gets the unhandled exception object.</summary>
      <returns>The unhandled exception object.</returns>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.IsTerminating">
      <summary>Indicates whether the common language runtime is terminating.</summary>
      <returns>true if the runtime is terminating; otherwise, false.</returns>
    </member>
    <member name="T:System.UnhandledExceptionEventHandler">
      <summary>[SECURITY CRITICAL] Represents the method that will handle the event raised by an exception that is not handled by the application domain.</summary>
      <param name="sender">The source of the unhandled exception event. </param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.ValueType">
      <summary>Provides the base class for value types.</summary>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ValueType" /> class. </summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
      <param name="obj">Another object to compare to. </param>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
    </member>
    <member name="T:System.Version">
      <summary>Represents the version number for a common language runtime assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified major and minor values.</summary>
      <param name="major">The major version number. </param>
      <param name="minor">The minor version number. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> or <paramref name="minor" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified major, minor, and build values.</summary>
      <param name="major">The major version number. </param>
      <param name="minor">The minor version number. </param>
      <param name="build">The build number. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, or <paramref name="build" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class with the specified major, minor, build, and revision numbers.</summary>
      <param name="major">The major version number. </param>
      <param name="minor">The minor version number. </param>
      <param name="build">The build number. </param>
      <param name="revision">The revision number. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, <paramref name="build" />, or <paramref name="revision" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified string.</summary>
      <param name="version">A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.'). </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> has fewer than two components or more than four components. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A major, minor, build, or revision component is less than zero. </exception>
      <exception cref="T:System.FormatException">At least one component of <paramref name="version" /> does not parse to an integer. </exception>
      <exception cref="T:System.OverflowException">At least one component of <paramref name="version" /> represents a number greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>Gets the value of the build component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The build number, or -1 if the build number is undefined.</returns>
    </member>
    <member name="M:System.Version.Clone">
      <summary>Returns a new <see cref="T:System.Version" /> object whose value is the same as the current <see cref="T:System.Version" /> object.</summary>
      <returns>A new <see cref="T:System.Object" /> whose values are a copy of the current <see cref="T:System.Version" /> object.</returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Version" /> object to a specified object and returns an indication of their relative values.</summary>
      <returns>Return Value Description Less than zero The current <see cref="T:System.Version" /> object is a version before <paramref name="version" />. Zero The current <see cref="T:System.Version" /> object is the same version as <paramref name="version" />. Greater than zero The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="version" />.-or- <paramref name="version" /> is null. </returns>
      <param name="version">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> is not of type <see cref="T:System.Version" />. </exception>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>Compares the current <see cref="T:System.Version" /> object to a specified <see cref="T:System.Version" /> object and returns an indication of their relative values.</summary>
      <returns>Return Value Description Less than zero The current <see cref="T:System.Version" /> object is a version before <paramref name="value" />. Zero The current <see cref="T:System.Version" /> object is the same version as <paramref name="value" />. Greater than zero The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="value" />. -or-<paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or null.</param>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>Returns a value indicating whether the current <see cref="T:System.Version" /> object is equal to a specified object.</summary>
      <returns>true if the current <see cref="T:System.Version" /> object and <paramref name="obj" /> are both <see cref="T:System.Version" /> objects, and every component of the current <see cref="T:System.Version" /> object matches the corresponding component of <paramref name="obj" />; otherwise, false.</returns>
      <param name="obj">An object to compare with the current <see cref="T:System.Version" /> object, or null. </param>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>Returns a value indicating whether the current <see cref="T:System.Version" /> object and a specified <see cref="T:System.Version" /> object represent the same value.</summary>
      <returns>true if every component of the current <see cref="T:System.Version" /> object matches the corresponding component of the <paramref name="obj" /> parameter; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or null.</param>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Version" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Version.Major">
      <summary>Gets the value of the major component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The major version number.</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>Gets the value of the minor component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The minor version number.</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>Determines whether two specified <see cref="T:System.Version" /> objects are equal.</summary>
      <returns>true if <paramref name="v1" /> equals <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is greater than the second specified <see cref="T:System.Version" /> object.</summary>
      <returns>true if <paramref name="v1" /> is greater than <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is greater than or equal to the second specified <see cref="T:System.Version" /> object.</summary>
      <returns>true if <paramref name="v1" /> is greater than or equal to <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>Determines whether two specified <see cref="T:System.Version" /> objects are not equal.</summary>
      <returns>true if <paramref name="v1" /> does not equal <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is less than the second specified <see cref="T:System.Version" /> object.</summary>
      <returns>true if <paramref name="v1" /> is less than <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. </exception>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is less than or equal to the second <see cref="T:System.Version" /> object.</summary>
      <returns>true if <paramref name="v1" /> is less than or equal to <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. </exception>
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>Converts the string representation of a version number to an equivalent <see cref="T:System.Version" /> object.</summary>
      <returns>An object that is equivalent to the version number specified in the <paramref name="input" /> parameter.</returns>
      <param name="input">A string that contains a version number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> has fewer than two or more than four version components.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">At least one component in <paramref name="input" /> is less than zero.</exception>
      <exception cref="T:System.FormatException">At least one component in <paramref name="input" /> is not an integer.</exception>
      <exception cref="T:System.OverflowException">At least one component in <paramref name="input" /> represents a number that is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>Gets the value of the revision component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The revision number, or -1 if the revision number is undefined.</returns>
    </member>
    <member name="M:System.Version.ToString">
      <summary>Converts the value of the current <see cref="T:System.Version" /> object to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of the current <see cref="T:System.Version" /> object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined: major.minor[.build[.revision]] For example, if you create a <see cref="T:System.Version" /> object using the constructor Version(1,1), the returned string is "1.1". If you create a <see cref="T:System.Version" /> object using the constructor Version(1,3,4,2), the returned string is "1.3.4.2".</returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>Converts the value of the current <see cref="T:System.Version" /> object to its equivalent <see cref="T:System.String" /> representation. A specified count indicates the number of components to return.</summary>
      <returns>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of the current <see cref="T:System.Version" /> object, each separated by a period character ('.'). The <paramref name="fieldCount" /> parameter determines how many components are returned.fieldCount Return Value 0 An empty string (""). 1 major 2 major.minor 3 major.minor.build 4 major.minor.build.revision For example, if you create <see cref="T:System.Version" /> object using the constructor Version(1,3,5), ToString(2) returns "1.3" and ToString(4) throws an exception.</returns>
      <param name="fieldCount">The number of components to return. The <paramref name="fieldCount" /> ranges from 0 to 4. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> is less than 0, or more than 4.-or- <paramref name="fieldCount" /> is more than the number of components defined in the current <see cref="T:System.Version" /> object. </exception>
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>Tries to convert the string representation of a version number to an equivalent <see cref="T:System.Version" /> object, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="input" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="input">A string that contains a version number to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Version" /> equivalent of the number that is contained in <paramref name="input" />, if the conversion succeeded, or a <see cref="T:System.Version" /> object whose major and minor version numbers are 0 if the conversion failed.</param>
    </member>
    <member name="T:System.Void">
      <summary>Specifies a return value type for a method that does not return a value.</summary>
    </member>
    <member name="T:System.WeakReference">
      <summary>Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.WeakReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class. This constructor overload cannot be implemented in Silverlight-based applications.</summary>
      <exception cref="T:System.NotImplementedException">This constructor is not implemented.</exception>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, referencing the specified object.</summary>
      <param name="target">The object to track or null. </param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, referencing the specified object and using the specified resurrection tracking.</summary>
      <param name="target">An object to track. </param>
      <param name="trackResurrection">Indicates when to stop tracking the object. If true, the object is tracked after finalization; if false, the object is only tracked until finalization. </param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>Discards the reference to the target represented by the current <see cref="T:System.WeakReference" /> object.</summary>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected.</summary>
      <returns>true if the object referenced by the current <see cref="T:System.WeakReference" /> object has not been garbage collected and is still accessible; otherwise, false.</returns>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference" /> object.</summary>
      <returns>null if the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</exception>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference" /> object is tracked after it is finalized.</summary>
      <returns>true if the object the current <see cref="T:System.WeakReference" /> object refers to is tracked after finalization; or false if the object is only tracked until finalization.</returns>
    </member>
    <member name="M:System.Delegate.Finalize">
      <summary>Releases the resources held by the current instance.</summary>
    </member>
    <member name="T:System.DeviceType">
      <summary>Identifies whether the current device is a physical device or an emulator.</summary>
    </member>
    <member name="F:System.DeviceType.Unknown">
      <summary>Represents an unknown device type.</summary>
    </member>
    <member name="F:System.DeviceType.Emulator">
      <summary>Represents an emulator</summary>
    </member>
    <member name="F:System.DeviceType.Device">
      <summary>Represents a physical device.</summary>
    </member>
    <member name="P:System.Environment.DeviceType">
      <summary>Gets a value that identifies the device type.</summary>
      <returns>A <see cref="T:System.DeviceType" /> value that identifies the device type.</returns>
    </member>
    <member name="T:System.Collections.BitArray">
      <summary>Manages a compact array of bit values, which are represented as Booleans, where true indicates that the bit is on (1) and false indicates the bit is off (0).</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of Booleans.</summary>
      <param name="values">An array of Booleans to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of bytes.</summary>
      <param name="bytes">An array of bytes containing the values to copy, where each byte represents eight consecutive bits. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="bytes" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="bits">The <see cref="T:System.Collections.BitArray" /> to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is null. </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that can hold the specified number of bit values, which are initially set to false.</summary>
      <param name="length">The number of bit values in the new <see cref="T:System.Collections.BitArray" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero. </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that can hold the specified number of bit values, which are initially set to the specified value.</summary>
      <param name="length">The number of bit values in the new <see cref="T:System.Collections.BitArray" />. </param>
      <param name="defaultValue">The Boolean value to assign to each bit. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero. </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of 32-bit integers.</summary>
      <param name="values">An array of integers containing the values to copy, where each integer represents 32 consecutive bits. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="values" /> is greater than <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>Performs the bitwise AND operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise AND operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</returns>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise AND operation. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements. </exception>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>A shallow copy of the <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.BitArray" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.BitArray" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.BitArray" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. </exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.BitArray" /> cannot be cast automatically to the type of the destination <paramref name="array" />. </exception>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>Gets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>The value of the bit at position <paramref name="index" />.</returns>
      <param name="index">The zero-based index of the value to get. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is greater than or equal to the number of elements in the <see cref="T:System.Collections.BitArray" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the entire <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.BitArray" /> is read-only.</summary>
      <returns>This property is always false.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.BitArray" /> is synchronized (thread safe).</summary>
      <returns>This property is always false.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>Gets or sets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>The value of the bit at position <paramref name="index" />.</returns>
      <param name="index">The zero-based index of the value to get or set. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.BitArray.Count" />. </exception>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>Gets or sets the number of elements in the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>The number of elements in the <see cref="T:System.Collections.BitArray" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to a value that is less than zero. </exception>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>Inverts all the bit values in the current <see cref="T:System.Collections.BitArray" />, so that elements set to true are changed to false, and elements set to false are changed to true.</summary>
      <returns>The current instance with inverted bit values.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>Performs the bitwise OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</returns>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise OR operation. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements. </exception>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>Sets the bit at a specific position in the <see cref="T:System.Collections.BitArray" /> to the specified value.</summary>
      <param name="index">The zero-based index of the bit to set. </param>
      <param name="value">The Boolean value to assign to the bit. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is greater than or equal to the number of elements in the <see cref="T:System.Collections.BitArray" />. </exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>Sets all bits in the <see cref="T:System.Collections.BitArray" /> to the specified value.</summary>
      <param name="value">The Boolean value to assign to all bits. </param>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>Performs the bitwise exclusive OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise exclusive OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</returns>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise exclusive OR operation. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements. </exception>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>Defines a dictionary key/value pair that can be set or retrieved.</summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>Initializes an instance of the <see cref="T:System.Collections.DictionaryEntry" /> type with the specified key and value.</summary>
      <param name="key">The object defined in each key/value pair. </param>
      <param name="value">The definition associated with <paramref name="key" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null and the .NET Framework version is 1.0 or 1.1. </exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>Gets or sets the key in the key/value pair.</summary>
      <returns>The key in the key/value pair.</returns>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>Gets or sets the value in the key/value pair.</summary>
      <returns>The value in the key/value pair.</returns>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>Defines size, enumerators, and synchronization methods for all nongeneric collections.</summary>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or- The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" /><paramref name="." /></exception>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>Exposes a method that compares two objects.</summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Condition Less than zero <paramref name="x" /> is less than <paramref name="y" />. Zero <paramref name="x" /> equals <paramref name="y" />. Greater than zero <paramref name="x" /> is greater than <paramref name="y" />. </returns>
      <param name="x">The first object to compare. </param>
      <param name="y">The second object to compare. </param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.-or- <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other. </exception>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>Represents a nongeneric collection of key/value pairs.</summary>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add. </param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" /> object. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> is read-only.-or- The <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only. </exception>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>Gets or sets the element with the specified key.</summary>
      <returns>The element with the specified key.</returns>
      <param name="key">The key of the element to get or set. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary" /> object is read-only.-or- The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The key of the element to remove. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.-or- The <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>Enumerates the elements of a nongeneric dictionary.</summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>Gets both the key and the value of the current dictionary entry.</summary>
      <returns>A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry. </exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>Gets the key of the current dictionary entry.</summary>
      <returns>The key of the current element of the enumeration.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry. </exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>Gets the value of the current dictionary entry.</summary>
      <returns>The value of the current element of the enumeration.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry. </exception>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>Exposes the enumerator, which supports a simple iteration over a non-generic collection.</summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>Supports a simple iteration over a nongeneric collection.</summary>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>Defines methods to support the comparison of objects for equality.</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified objects are equal.</summary>
      <returns>true if the specified objects are equal; otherwise, false.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other.</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>Returns a hash code for the specified object.</summary>
      <returns>A hash code for the specified object.</returns>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>Represents a non-generic collection of objects that can be individually accessed by index.</summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only. </exception>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. </param>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. </param>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only. </exception>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>Supports the structural comparison of collection objects.</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</summary>
      <returns>An integer that indicates the relationship of the current collection object to <paramref name="other" />, as shown in the following table.Return valueDescription-1The current instance precedes <paramref name="other" />.0The current instance and <paramref name="other" /> are equal.1The current instance follows <paramref name="other" />.</returns>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that compares members of the current collection object with the corresponding members of <paramref name="other" />.</param>
      <exception cref="T:System.ArgumentException">This instance and <paramref name="other" /> are not the same type.</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>Defines methods to support the comparison of objects for structural equality.</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determines whether an object is structurally equal to the current instance.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that determines whether the current instance and <paramref name="other" /> are equal. </param>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Returns a hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
      <param name="comparer">An object that computes the hash code of the current object.</param>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary>Provides a base class for implementations of the <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Comparer`1" /> class.</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary>When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</summary>
      <returns>A signed integer that indicates the relative values of x and y, as shown in the following table.Value Condition Less than zero <paramref name="x" /> is less than <paramref name="y" />.Zero <paramref name="x" /> equals <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">Type <paramref name="T" /> does not implement either the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary>Returns a default sort order comparer for the type specified by the generic argument.</summary>
      <returns>An object that inherits <see cref="T:System.Collections.Generic.Comparer`1" /> and serves as a sort order comparer for type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>A signed integer that indicates the relative values of x and y, as shown in the following table.Value Condition Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> or <paramref name="y" /> is of a type that cannot be cast to type <paramref name="T" />.-or-<paramref name="x" /> and <paramref name="y" /> do not implement either the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary>Represents a collection of keys and values.</summary>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the default equality comparer for the key type.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary>Adds the specified key and value to the dictionary.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary>Removes all keys and values from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary>Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> that is used to determine equality of keys for the dictionary. </summary>
      <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface implementation that is used to determine equality of keys for the current <see cref="T:System.Collections.Generic.Dictionary`2" /> and to provide hash values for the keys.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains a specific value.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified value; otherwise, false.</returns>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />. The value can be null for reference types.</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> structure for the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element with the specified key.</returns>
      <param name="key">The key of the value to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> does not exist in the collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary>Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary>Removes the value with the specified key from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false.  This method returns false if <paramref name="key" /> is not found in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Adds the specified value to the <see cref="T:System.Collections.Generic.ICollection`1" /> with the specified key.</summary>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure representing the key and value to add to the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The key of <paramref name="keyValuePair" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific key and value.</summary>
      <returns>true if <paramref name="keyValuePair" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> that is the destination of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the dictionary is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Removes a key and value from the dictionary.</summary>
      <returns>true if the key and value represented by <paramref name="keyValuePair" /> is successfully found and removed; otherwise, false. This method returns false if <paramref name="keyValuePair" /> is not found in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure representing the key and value to remove from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <paramref name="TKey" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <paramref name="TValue" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.-or-<paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.Generic.ICollection`1" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />. </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds the specified key and value to the dictionary.</summary>
      <param name="key">The object to use as the key.</param>
      <param name="value">The object to use as the value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.-or-<paramref name="value" /> is of a type that is not assignable to <paramref name="TValue" />, the type of values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.-or-A value with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Gets or sets the value with the specified key.</summary>
      <returns>The value associated with the specified key, or null if <paramref name="key" /> is not in the dictionary or <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
      <param name="key">The key of the value to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">A value is being assigned, and <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.-or-A value is being assigned, and <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary>Gets a collection containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.Dictionary`2" /> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the dictionary at the current position of the enumerator, as a <see cref="T:System.Collections.DictionaryEntry" />.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>Gets the key of the element at the current position of the enumerator.</summary>
      <returns>The key of the element in the dictionary at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>Gets the value of the element at the current position of the enumerator.</summary>
      <returns>The value of the element in the dictionary at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary>Represents the collection of keys in a <see cref="T:System.Collections.Generic.Dictionary`2" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> class that reflects the keys in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2" /> whose keys are reflected in the new <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.Retrieving the value of this property is an O(1) operation.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> for the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, this property always returns true.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary>Represents the collection of values in a <see cref="T:System.Collections.Generic.Dictionary`2" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> class that reflects the values in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2" /> whose values are reflected in the new <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> for the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, this property always returns true.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />. This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary>Provides a base class for implementations of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.EqualityComparer`1" /> class.</summary>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary>Returns a default equality comparer for the type specified by the generic argument.</summary>
      <returns>The default instance of the <see cref="T:System.Collections.Generic.EqualityComparer`1" /> class for type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary>When overridden in a derived class, determines whether two objects of type <paramref name="T" /> are equal.</summary>
      <returns>true if the specified objects are equal; otherwise, false.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary>When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the specified object.</returns>
      <param name="obj">The object for which to get a hash code.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>Determines whether the specified objects are equal.</summary>
      <returns>true if the specified objects are equal; otherwise, false.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> or <paramref name="y" /> is of a type that cannot be cast to type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>Returns a hash code for the specified object.</summary>
      <returns>A hash code for the specified object.</returns>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.-or-<paramref name="obj" /> is of a type that cannot be cast to type <paramref name="T" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>Defines methods to manipulate generic collections.</summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>Defines a method that a type implements to compare two objects.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Condition Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>Represents a generic collection of key/value pairs.</summary>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>Gets or sets the element with the specified key.</summary>
      <returns>The element with the specified key.</returns>
      <param name="key">The key of the element to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>Supports a simple iteration over a generic collection.</summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>Defines methods to support the comparison of objects for equality.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>Determines whether the specified objects are equal.</summary>
      <returns>true if the specified objects are equal; otherwise, false.</returns>
      <param name="x">The first object of type <paramref name="T" /> to compare.</param>
      <param name="y">The second object of type <paramref name="T" /> to compare.</param>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>Returns a hash code for the specified object.</summary>
      <returns>A hash code for the specified object.</returns>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>Represents a collection of objects that can be individually accessed by index.</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>The exception that is thrown when the key specified for accessing an element in a collection does not match any key in the collection.</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class using default property values.</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>Defines a key/value pair that can be set or retrieved.</summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure with the specified key and value.</summary>
      <param name="key">The object defined in each key/value pair.</param>
      <param name="value">The definition associated with <paramref name="key" />.</param>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>Gets the key in the key/value pair.</summary>
      <returns>A <paramref name="TKey" /> that is the key of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />. </returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>Returns a string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, using the string representations of the key and value.</summary>
      <returns>A string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, which includes the string representations of the key and value.</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>Gets the value in the key/value pair.</summary>
      <returns>A <paramref name="TValue" /> that is the value of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />. </returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary>Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the default initial capacity.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The collection whose elements are copied to the new list.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the specified initial capacity.</summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0. </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary>Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1" />. The collection itself cannot be null, but it can contain elements that are null, if type <paramref name="T" /> is a reference type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary>Returns a read-only <see cref="T:System.Collections.Generic.IList`1" /> wrapper for the current collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Searches a range of elements in the sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</summary>
      <returns>The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
      <param name="index">The zero-based starting index of the range to search.</param>
      <param name="count">The length of the range to search.</param>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="count" /> is less than 0. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary>Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the default comparer and returns the zero-based index of the element.</summary>
      <returns>The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <exception cref="T:System.InvalidOperationException">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</summary>
      <returns>The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.-or-null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary>Gets or sets the total number of elements the internal data structure can hold without resizing.</summary>
      <returns>The number of elements that the <see cref="T:System.Collections.Generic.List`1" /> can contain before resizing is required.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.List`1.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.List`1.Count" />. </exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.Generic.List`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.List`1" />; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copies a range of elements from the <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="index">The zero-based index in the source <see cref="T:System.Collections.Generic.List`1" /> at which copying begins.</param>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <param name="count">The number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="arrayIndex" /> is less than 0.-or-<paramref name="count" /> is less than 0. </exception>
      <exception cref="T:System.ArgumentException">The number of elements from <paramref name="index" /> to the end of the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />. </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary>Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the beginning of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the number of elements that the destination <paramref name="array" /> can contain.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary>Gets the number of elements actually contained in the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>The number of elements actually contained in the <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary>Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="action">The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary>Creates a shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>A shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</returns>
      <param name="index">The zero-based <see cref="T:System.Collections.Generic.List`1" /> index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from <paramref name="index" /> to the last element, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the search.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.-or-<paramref name="count" /> is less than 0.-or-<paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="collection">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List`1" />. The collection itself cannot be null, but it can contain elements that are null, if type <paramref name="T" /> is a reference type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />. </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the entire the <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to <paramref name="index" />, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the backward search.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />. </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, –1.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.-or-<paramref name="count" /> is less than 0.-or-<paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />. </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>true if <paramref name="item" /> is successfully removed; otherwise, false.  This method also returns false if <paramref name="item" /> was not found in the <see cref="T:System.Collections.Generic.List`1" />.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary>Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.List`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="count" /> is less than 0. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />. </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the default comparer.</summary>
      <exception cref="T:System.InvalidOperationException">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified <see cref="T:System.Comparison`1" />.</summary>
      <param name="comparison">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</summary>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="T:System.Collections.Generic.List`1" />.-or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns false.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="item">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, –1.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.List`1" /> to a new array.</summary>
      <returns>An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.List`1" />, if that number is less than a threshold value.</summary>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.List`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.List`1" /> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.List`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.List`1" /> at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>Provides the base class for a generic collection.</summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class that is empty.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class as a wrapper for the specified list.</summary>
      <param name="list">The list that is wrapped by the new collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>Adds an object to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />. </summary>
      <param name="item">The object to be added to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.ObjectModel.Collection`1" />; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.ObjectModel.Collection`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.Collection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.-or-<paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.Collection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>Gets the number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>The number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />, if found; otherwise, -1.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>Gets a <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>true if <paramref name="item" /> is successfully removed; otherwise, false.  This method also returns false if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1. </returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item into the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
      <summary>Provides the abstract base class for a collection whose keys are embedded in the values.</summary>
      <typeparam name="TKey">The type of keys in the collection.</typeparam>
      <typeparam name="TItem">The type of items in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</summary>
      <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or null to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</summary>
      <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or null to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
      <param name="dictionaryCreationThreshold">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dictionaryCreationThreshold" /> is less than –1.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary>Changes the key associated with the specified element in the lookup dictionary.</summary>
      <param name="item">The element to change the key of.</param>
      <param name="newKey">The new key for <paramref name="item" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.-or-<paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is not found.-or-<paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
      <summary>Gets the generic equality comparer that is used to determine equality of keys in the collection.</summary>
      <returns>The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface that is used to determine equality of keys in the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
      <summary>Determines whether the collection contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
      <summary>Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <returns>The lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, if it exists; otherwise, null.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
      <summary>When implemented in a derived class, extracts the key from the specified element.</summary>
      <returns>The key for the specified element.</returns>
      <param name="item">The element from which to extract the key.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
      <summary>Gets the element with the specified key. </summary>
      <returns>The element with the specified key. If an element with the specified key is not found, an exception is thrown.</returns>
      <param name="key">The key of the element to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">An element with the specified key does not exist in the collection.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="index">The index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>Replaces the item at the specified index with the specified item.</summary>
      <param name="index">The zero-based index of the item to be replaced.</param>
      <param name="item">The new item.</param>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>Provides the base class for a generic read-only collection.</summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> class that is a read-only wrapper around the specified list.</summary>
      <param name="list">The list to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>true if <paramref name="value" /> is found in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />; otherwise, false.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> instance.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> instance.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, if found; otherwise, -1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>Gets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />. </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>Returns the <see cref="T:System.Collections.Generic.IList`1" /> that the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wraps.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IList`1" /> that the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wraps.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns true.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>true if <paramref name="value" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="value">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">Always thrown, if the property is set.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns true.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns true.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">Always thrown, if the property is set.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />. </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
      <summary>Specifies all the hash algorithms used for hashing files and for generating the strong name.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.None">
      <summary>A mask indicating that there is no hash algorithm. If you specify None for a multi-module assembly, the common language runtime defaults to the SHA1 algorithm, since multi-module assemblies need to generate a hash.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
      <summary>Retrieves the MD5 message-digest algorithm. MD5 was developed by Rivest in 1991. It is basically MD4 with safety-belts and while it is slightly slower than MD4, it helps provide more security. The algorithm consists of four distinct rounds, which has a slightly different design from that of MD4. Message-digest size, as well as padding requirements, remain the same.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1">
      <summary>A mask used to retrieve a revision of the Secure Hash Algorithm that corrects an unpublished flaw in SHA.</summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyVersionCompatibility">
      <summary>Defines the different types of assembly version compatibility. </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine">
      <summary>The assembly cannot execute with other versions if they are executing on the same machine.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameProcess">
      <summary>The assembly cannot execute with other versions if they are executing in the same process.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameDomain">
      <summary>The assembly cannot execute with other versions if they are executing in the same application domain.</summary>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined. </summary>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.ConditionalAttribute" /> class.</summary>
      <param name="conditionString">A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute. </param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>Gets the conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.</summary>
      <returns>A string that specifies the case-sensitive conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggableAttribute" /> class, using the specified tracking and optimization options for the just-in-time (JIT) compiler.</summary>
      <param name="isJITTrackingEnabled">true to enable debugging; otherwise, false. </param>
      <param name="isJITOptimizerDisabled">true to disable the optimizer for execution; otherwise, false. </param>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggableAttribute" /> class, using the specified debugging modes for the just-in-time (JIT) compiler. </summary>
      <param name="modes">A bitwise combination of the enumeration  values that specify the debugging mode for the JIT compiler.</param>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>Specifies the debugging mode for the just-in-time (JIT) compiler.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>In the .NET Framework, just-in-time (JIT) tracking information is always generated. This flag has the same effect as <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />. </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>Use the default behavior for the just-in-time (JIT) compiler, which includes enabling optimizations, disabling Edit and Continue support, and using symbol store sequence points if they are present. In the .NET Framework, JIT tracking information is always generated. This makes it possible for the debugger to match up a chain of MSIL with its machine code counterpart, and to track where local variables and function arguments are stored.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>Disable optimizations performed by the compiler to make your output file smaller, faster, and more efficient. Optimizations result in code rearrangement in the output file, which can make debugging difficult. Typically, optimization should be disabled while debugging. </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>Use the implicit MSIL sequence points, not the program database (PDB) sequence points. The symbolic information typically includes at least one MSIL offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. </summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>Enable Edit and Continue. This feature enables you to change your source code while your program is in break mode. The ability to Edit and Continue is compiler-dependent. </summary>
    </member>
    <member name="T:System.Diagnostics.Debugger">
      <summary>Enables communication with a debugger. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Debugger" /> class. </summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.Break">
      <summary>Signals a breakpoint to an attached debugger.</summary>
    </member>
    <member name="P:System.Diagnostics.Debugger.IsAttached">
      <summary>Gets a value that indicates whether a debugger is attached to the process.</summary>
      <returns>true if a debugger is attached; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.IsLogging">
      <summary>Checks to see whether logging is enabled by an attached debugger.</summary>
      <returns>true if a debugger is attached and logging is enabled; otherwise, false. The attached debugger is the registered managed debugger in the DbgManagedDebugger registry key. </returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.Launch">
      <summary>Launches and attaches a debugger to the process.</summary>
      <returns>true if the startup is successful or if the debugger is already attached; otherwise, false.</returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)">
      <summary>Posts a message for the attached debugger.</summary>
      <param name="level">A description of the importance of the message. </param>
      <param name="category">The category of the message. This parameter is limited to 256 characters. Longer strings are truncated.</param>
      <param name="message">The message to show. </param>
    </member>
    <member name="T:System.Diagnostics.DebuggerBrowsableAttribute">
      <summary>Determines if and how a member is displayed in the debugger variable windows. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerBrowsableAttribute.#ctor(System.Diagnostics.DebuggerBrowsableState)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerBrowsableAttribute" /> class. </summary>
      <param name="state">One of the enumeration values that specify how to display the member.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="state" /> is not one of the <see cref="T:System.Diagnostics.DebuggerBrowsableState" /> values.</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerBrowsableAttribute.State">
      <summary>Gets the display state for the attribute.</summary>
      <returns>One of the enumeration values.</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggerBrowsableState">
      <summary>Provides display instructions for the debugger.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.Never">
      <summary>The element is never shown.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.Collapsed">
      <summary>The element is shown as collapsed.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.RootHidden">
      <summary>The root element is not displayed, but the child elements are displayed if the element is a collection or array of items.</summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerDisplayAttribute">
      <summary>Determines how a class or field is displayed in the debugger variable windows.</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerDisplayAttribute" /> class. </summary>
      <param name="value">The string to be displayed in the value column for instances of the type. An empty string ("") causes the value column to be hidden.</param>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
      <summary>Gets or sets the name to display in the debugger variable windows.</summary>
      <returns>The name to display in the debugger variable windows.</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Target">
      <summary>Gets or sets the type of the attribute's target.</summary>
      <returns>An object that identifies the attribute's target type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.DebuggerDisplayAttribute.Target" /> is set to null.</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName">
      <summary>Gets or sets the type name of the attribute's target.</summary>
      <returns>The name of the attribute's target type.</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Type">
      <summary>Gets or sets the string to display in the type column of the debugger variable windows.</summary>
      <returns>The string to display in the type column of the debugger variable windows.</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Value">
      <summary>Gets the string to display in the value column of the debugger variable windows.</summary>
      <returns>The string to display in the value column of the debugger variable.</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggerHiddenAttribute">
      <summary>Hides the code from the debugger. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerHiddenAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerHiddenAttribute" /> class. </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerNonUserCodeAttribute">
      <summary>Identifies a type or member that is not part of the user code for an application.</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerNonUserCodeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute" /> class. </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerStepThroughAttribute">
      <summary>Instructs the debugger to step through the code instead of into the code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerStepThroughAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerStepThroughAttribute" /> class. </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerTypeProxyAttribute">
      <summary>Specifies the display proxy for a type.</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute" /> class using the type name of the proxy. </summary>
      <param name="typeName">The name of the proxy type.</param>
    </member>
    <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute" /> class using the type of the proxy. </summary>
      <param name="type">The proxy type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.ProxyTypeName">
      <summary>Gets the name of the proxy type. </summary>
      <returns>The name of the proxy type.</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target">
      <summary>Gets or sets the target type for the attribute.</summary>
      <returns>The target type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target" /> is set to null.</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.TargetTypeName">
      <summary>Gets or sets the name of the target type for the attribute.</summary>
      <returns>The name of the target type.</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>Provides information about a stack frame, which represents a function call on the call stack for the current thread.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class, and optionally captures source information.</summary>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number of the stack frame; otherwise, false. </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class that corresponds to a frame above the current stack frame.</summary>
      <param name="skipFrames">The number of frames up the stack to skip. </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class that corresponds to a frame above the current stack frame, and optionally captures source information.</summary>
      <param name="skipFrames">The number of frames up the stack to skip. </param>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number of the stack frame; otherwise, false. </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class that contains only the specified file name and line number.</summary>
      <param name="fileName">The file name. </param>
      <param name="lineNumber">The line number in the specified file. </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> class that contains only the specified file name, line number, and column number.</summary>
      <param name="fileName">The file name. </param>
      <param name="lineNumber">The line number in the specified file. </param>
      <param name="colNumber">The column number in the specified file. </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</summary>
      <returns>The file column number.-or- 0 (zero) if the file column number cannot be determined.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</summary>
      <returns>The file line number.-or- 0 (zero) if the file line number cannot be determined.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>[SECURITY CRITICAL] Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</summary>
      <returns>The file name.-or- A null reference (Nothing in Visual Basic) if the file name cannot be determined. </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the <see cref="T:System.Diagnostics.DebuggableAttribute" /> attribute.</summary>
      <returns>The offset from the start of the MSIL code for the method that is executing.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>Gets the method in which the frame is executing.</summary>
      <returns>The method in which the frame is executing.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary>Gets the offset from the start of the native just-in-time (JIT) compiled code for the method that is being executed. The generation of this debugging information is controlled by the <see cref="T:System.Diagnostics.DebuggableAttribute" /> class.</summary>
      <returns>The offset from the start of the JIT-compiled code for the method that is being executed.</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>Defines the value that is returned from the <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> or <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>Builds a readable representation of the stack frame.</summary>
      <returns>A readable representation of the stack frame.</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>Represents a stack trace, which is an ordered collection of one or more stack frames.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the caller's frame.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the caller's frame, and optionally captures source information.</summary>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number; otherwise, false. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class that contains a single frame.</summary>
      <param name="frame">The frame that the <see cref="T:System.Diagnostics.StackTrace" /> object should contain. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class by using the specified exception object.</summary>
      <param name="e">The exception object from which to construct the stack trace. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null. </exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class by using the specified exception object, and optionally captures source information.</summary>
      <param name="e">The exception object from which to construct the stack trace. </param>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number; otherwise, false. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class by using the specified exception object and skipping the specified number of frames.</summary>
      <param name="e">The exception object from which to construct the stack trace. </param>
      <param name="skipFrames">The number of frames up the stack from which to start the trace. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class by using the specified exception object and skipping the specified number of frames, and optionally captures source information.</summary>
      <param name="e">The exception object from which to construct the stack trace. </param>
      <param name="skipFrames">The number of frames up the stack from which to start the trace. </param>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number; otherwise, false. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the caller's frame, skipping the specified number of frames.</summary>
      <param name="skipFrames">The number of frames up the stack from which to start the trace. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the caller's frame, skipping the specified number of frames and optionally capturing source information.</summary>
      <param name="skipFrames">The number of frames up the stack from which to start the trace. </param>
      <param name="fNeedFileInfo">true to capture the file name, line number, and column number; otherwise, false. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class for a specific thread, and optionally captures source information.</summary>
      <param name="targetThread">The thread whose stack trace is requested. </param>
      <param name="needFileInfo">true to capture the file name, line number, and column number; otherwise, false. </param>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary>Gets the number of frames in the stack trace.</summary>
      <returns>The number of frames in the stack trace. </returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary>Gets the specified stack frame.</summary>
      <returns>The specified stack frame.</returns>
      <param name="index">The index of the stack frame requested. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>Returns a copy of all stack frames in the current stack trace.</summary>
      <returns>An array that represents the function calls in the stack trace.</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary>Defines the default for the number of methods to omit from the stack trace. This field is constant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>Builds a readable representation of the stack trace.</summary>
      <returns>A readable representation of the stack trace.</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute">
      <summary>Suppresses reporting of a specific static analysis tool rule violation, allowing multiple suppressions on a single code artifact.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute" /> class, specifying the category of the static analysis tool and the identifier for an analysis rule. </summary>
      <param name="category">The category for the attribute.</param>
      <param name="checkId">The identifier of the analysis tool rule the attribute applies to.</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Category">
      <summary>Gets the category that identifies the classification of the attribute.</summary>
      <returns>The category that identifies the attribute.</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.CheckId">
      <summary>Gets the identifier of the static analysis tool rule to be suppressed.</summary>
      <returns>The identifier of the static analysis tool rule to be suppressed.</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Justification">
      <summary>Gets or sets the justification for suppressing the code analysis message.</summary>
      <returns>The justification for suppressing the message.</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.MessageId">
      <summary>Gets or sets an optional argument that expands on exclusion criteria.</summary>
      <returns>A string containing the expanded exclusion criteria.</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Scope">
      <summary>Gets or sets the scope of the code that is relevant for the attribute.</summary>
      <returns>The scope of the code that is relevant for the attribute.</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Target">
      <summary>Gets or sets a fully qualified path that represents the target of the attribute.</summary>
      <returns>A fully qualified path that represents the target of the attribute.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary>Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary>Checks for a condition; if the condition is false, follows the escalation policy set for the analyzer.</summary>
      <param name="condition">The conditional expression to test.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary>Checks for a condition; if the condition is false, follows the escalation policy set by the analyzer and displays the specified message.</summary>
      <param name="condition">The conditional expression to test.</param>
      <param name="userMessage">A message to display if the condition is not met.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary>Instructs code analysis tools to assume that the specified condition is true, even if it cannot be statically proven to always be true.</summary>
      <param name="condition">The conditional expression to assume true.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary>Instructs code analysis tools to assume that a condition is true, even if it cannot be statically proven to always be true, and displays a message if the assumption fails.</summary>
      <param name="condition">The conditional expression to assume true.</param>
      <param name="userMessage">The message to post if the assumption fails.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary>Marks the end of the contract section when a method's contracts contain only preconditions in the if-then-throw form.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary>Specifies a postcondition contract for the enclosing method or property.</summary>
      <param name="condition">The conditional expression to test. The expression may include <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, <see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" />, and <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> values. </param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary>Specifies a postcondition contract for a provided exit condition and a message to display if the condition is false.</summary>
      <param name="condition">The conditional expression to test. The expression may include <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> and <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> values. </param>
      <param name="userMessage">The message to display if the expression is not true.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary>Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.</summary>
      <param name="condition">The conditional expression to test.</param>
      <typeparam name="TException">The type of exception that invokes the postcondition check.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary>Specifies a postcondition contract and a message to display if the condition is false for the enclosing method or property, based on the provided exception and condition.</summary>
      <param name="condition">The conditional expression to test.</param>
      <param name="userMessage">The message to display if the expression is false.</param>
      <typeparam name="TException">The type of exception that invokes the postcondition check.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>Determines whether an element within a collection of elements exists within a function.</summary>
      <returns>true if and only if <paramref name="predicate" /> returns true for any element of type <paramref name="T" /> in <paramref name="collection" />.</returns>
      <param name="collection">The collection from which elements of type <paramref name="T" /> will be drawn to pass to <paramref name="predicate" />.</param>
      <param name="predicate">The function to evaluate for an element in <paramref name="collection" />.</param>
      <typeparam name="T">The type that is contained in <paramref name="collection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>Determines whether a specified test is true for any integer within a range of integers.</summary>
      <returns>true if <paramref name="predicate" /> returns true for any integer starting from <paramref name="fromInclusive" /> to <paramref name="toExclusive" /> - 1.</returns>
      <param name="fromInclusive">The first integer to pass to <paramref name="predicate" />.</param>
      <param name="toExclusive">One more than the last integer to pass to <paramref name="predicate" />.</param>
      <param name="predicate">The function to evaluate for any value of the integer in the specified range.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive " />is less than <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>Determines whether all the elements in a collection exist within a function.</summary>
      <returns>true if and only if <paramref name="predicate" /> returns true for all elements of type <paramref name="T" /> in <paramref name="collection" />.</returns>
      <param name="collection">The collection from which elements of type <paramref name="T" /> will be drawn to pass to <paramref name="predicate" />.</param>
      <param name="predicate">The function to evaluate for the existence of all the elements in <paramref name="collection" />.</param>
      <typeparam name="T">The type that is contained in <paramref name="collection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>Determines whether a particular condition is valid for all integers in a specified range.</summary>
      <returns>true if <paramref name="predicate" /> returns true for all integers starting from <paramref name="fromInclusive" /> to <paramref name="toExclusive" /> - 1.</returns>
      <param name="fromInclusive">The first integer to pass to <paramref name="predicate" />.</param>
      <param name="toExclusive">One more than the last integer to pass to <paramref name="predicate" />.</param>
      <param name="predicate">The function to evaluate for the existence of the integers in the specified range.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive " />is less than <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary>Specifies an invariant contract for the enclosing class. </summary>
      <param name="condition">The conditional expression to test.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary>Specifies an invariant contract for the enclosing class, and displays a message if the condition for the contract fails.</summary>
      <param name="condition">The conditional expression to test.</param>
      <param name="userMessage">The message to display if the condition is false.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary>Represents values as they were at the start of a method or property.</summary>
      <returns>The value of the parameter or field at the start of a method or property.</returns>
      <param name="value">The value to represent (field or parameter).</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary>Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.</summary>
      <param name="condition">The conditional expression to test.</param>
      <typeparam name="TException">The exception to throw if the condition is false.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary>Specifies a precondition contract for the enclosing method or property.</summary>
      <param name="condition">The conditional expression to test.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary>Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.</summary>
      <param name="condition">The conditional expression to test.</param>
      <param name="userMessage">The message to display if the condition is false.</param>
      <typeparam name="TException">The exception to throw if the condition is false.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary>Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.</summary>
      <param name="condition">The conditional expression to test.</param>
      <param name="userMessage">The message to display if the condition is false.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary>Represents the return value of a method or property.</summary>
      <returns>Return value of the enclosing method or property.</returns>
      <typeparam name="T">Type of return value of the enclosing method or property.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary>Represents the final (output) value of an out parameter when returning from a method.</summary>
      <returns>The output value of the out parameter.</returns>
      <param name="value">The out parameter.</param>
      <typeparam name="T">The type of the out parameter.</typeparam>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary>Specifies that a separate type contains the code contracts for this type.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" /> class. </summary>
      <param name="typeContainingContracts">The type that contains the code contracts for this type.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary>Gets the type that contains the code contracts for this type.</summary>
      <returns>The type that contains the code contracts for this type. </returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary>Specifies that a class is a contract for a type.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> class, specifying the type the current class is a contract for. </summary>
      <param name="typeContractsAreFor">The type the current class is a contract for.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary>Gets the type that this code contract applies to. </summary>
      <returns>The type that this contract applies to.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary>Specifies the type of contract that failed. </summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary>A <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> contract failed.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary>An <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> contract failed. </summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary>An <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> contract failed.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary>An <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> contract failed.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary>An <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> contract failed.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary>An <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> contract failed.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary>Marks a method as being the invariant method for a class.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" /> class. </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary>Specifies that a field can be used in method contracts when the field has less visibility than the method. </summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" /> class. </summary>
      <param name="name">The property name to apply to the field.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary>Gets the property name to be applied to the field.</summary>
      <returns>The property name to be applied to the field.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary>Specifies that an assembly is a reference assembly that contains contracts.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" /> class. </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary>Identifies a member that has no run-time behavior.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" /> class. </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary>Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" /> class. </summary>
      <param name="value">true to require verification; otherwise, false. </param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary>Gets the value that indicates whether to verify the contract of the target. </summary>
      <returns>true if verification is required; otherwise, false.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary>Indicates that a type or method is pure, that is, it does not make any visible state changes.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.PureAttribute" /> class. </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.Internal.ContractHelper">
      <summary>Provides methods that the binary rewriter uses to handle contract failures.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>Used by the binary rewriter to activate the default failure behavior.</summary>
      <returns>A null reference (Nothing in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.</returns>
      <param name="failureKind">The type of failure.</param>
      <param name="userMessage">Additional user information.</param>
      <param name="conditionText">The description of the condition that caused the failure.</param>
      <param name="innerException">The inner exception that caused the current exception.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="failureKind" /> is not a valid <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> value.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Internal.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary>Triggers the default failure behavior.</summary>
      <param name="kind">The type of failure.</param>
      <param name="displayMessage">The message to display.</param>
      <param name="userMessage">Additional user information.</param>
      <param name="conditionText">The description of the condition that caused the failure.</param>
      <param name="innerException">The inner exception that caused the current exception.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary>Represents a document that is referenced by a symbol store.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary>Sets checksum information.</summary>
      <param name="algorithmId">The GUID that represents the algorithm ID. </param>
      <param name="checkSum">The checksum. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary>Stores the raw source for a document in the symbol store.</summary>
      <param name="source">The document source represented as unsigned bytes. </param>
    </member>
    <member name="T:System.Globalization.Calendar">
      <summary>Represents time in divisions, such as weeks, months, and years.</summary>
    </member>
    <member name="M:System.Globalization.Calendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.Calendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of days away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of days to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add days. </param>
      <param name="days">The number of days to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="days" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of hours away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of hours to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add hours. </param>
      <param name="hours">The number of hours to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hours" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of milliseconds away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of milliseconds to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to add milliseconds to. </param>
      <param name="milliseconds">The number of milliseconds to add.</param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of minutes away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of minutes to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add minutes. </param>
      <param name="minutes">The number of minutes to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minutes" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)">
      <summary>When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months. </param>
      <param name="months">The number of months to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of seconds away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of seconds to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add seconds. </param>
      <param name="seconds">The number of seconds to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of weeks away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of weeks to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add weeks. </param>
      <param name="weeks">The number of weeks to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="weeks" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)">
      <summary>When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years. </param>
      <param name="years">The number of years to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value. </exception>
    </member>
    <member name="F:System.Globalization.Calendar.CurrentEra">
      <summary>Represents the current era of the current calendar. </summary>
    </member>
    <member name="P:System.Globalization.Calendar.Eras">
      <summary>When overridden in a derived class, gets the list of eras in the current calendar.</summary>
      <returns>An array of integers that represents the eras in the current calendar.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)">
      <summary>When overridden in a derived class, returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A positive integer that represents the day of the month in the <paramref name="time" /> parameter.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)">
      <summary>When overridden in a derived class, returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the <paramref name="time" /> parameter.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)">
      <summary>When overridden in a derived class, returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A positive integer that represents the day of the year in the <paramref name="time" /> parameter.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month and year of the current era.</summary>
      <returns>The number of days in the specified month in the specified year in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">A positive integer that represents the month. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>When overridden in a derived class, returns the number of days in the specified month, year, and era.</summary>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">A positive integer that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32)">
      <summary>Returns the number of days in the specified year of the current era.</summary>
      <returns>The number of days in the specified year in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>When overridden in a derived class, returns the number of days in the specified year and era.</summary>
      <returns>The number of days in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetEra(System.DateTime)">
      <summary>When overridden in a derived class, returns the era in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer that represents the era in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetHour(System.DateTime)">
      <summary>Returns the hours value in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 0 to 23 that represents the hour in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <returns>A positive integer that indicates the leap month in the specified year and era.-or-Zero if this calendar does not support a leap month or if the <paramref name="year" /> and <paramref name="era" /> parameters do not specify a leap year.</returns>
      <param name="year">A year.</param>
      <param name="era">An era.</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)">
      <summary>Returns the milliseconds value in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A double-precision floating-point number from 0 to 999 that represents the milliseconds in the <paramref name="time" /> parameter.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMinute(System.DateTime)">
      <summary>Returns the minutes value in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 0 to 59 that represents the minutes in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonth(System.DateTime)">
      <summary>When overridden in a derived class, returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A positive integer that represents the month in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)">
      <summary>Returns the number of months in the specified year in the current era.</summary>
      <returns>The number of months in the specified year in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>When overridden in a derived class, returns the number of months in the specified year in the specified era.</summary>
      <returns>The number of months in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetSecond(System.DateTime)">
      <summary>Returns the seconds value in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 0 to 59 that represents the seconds in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A positive integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
      <param name="rule">A <see cref="T:System.Globalization.CalendarWeekRule" /> value that defines a calendar week. </param>
      <param name="firstDayOfWeek">A <see cref="T:System.DayOfWeek" /> value that represents the first day of the week. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.-or- <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetYear(System.DateTime)">
      <summary>When overridden in a derived class, returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer that represents the year in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the current era is a leap day.</summary>
      <returns>true if the specified day is a leap day; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">A positive integer that represents the month. </param>
      <param name="day">A positive integer that represents the day. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>When overridden in a derived class, determines whether the specified date in the specified era is a leap day.</summary>
      <returns>true if the specified day is a leap day; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">A positive integer that represents the month. </param>
      <param name="day">A positive integer that represents the day. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the current era is a leap month.</summary>
      <returns>true if the specified month is a leap month; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">A positive integer that represents the month. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>When overridden in a derived class, determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <returns>true if the specified month is a leap month; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">A positive integer that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32)">
      <summary>Determines whether the specified year in the current era is a leap year.</summary>
      <returns>true if the specified year is a leap year; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>When overridden in a derived class, determines whether the specified year in the specified era is a leap year.</summary>
      <returns>true if the specified year is a leap year; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.Calendar.IsReadOnly">
      <summary>Gets a value indicating whether this <see cref="T:System.Globalization.Calendar" /> object is read-only.</summary>
      <returns>true if this <see cref="T:System.Globalization.Calendar" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by this <see cref="T:System.Globalization.Calendar" /> object.</summary>
      <returns>The latest date and time supported by this calendar. The default is <see cref="F:System.DateTime.MaxValue" />.</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by this <see cref="T:System.Globalization.Calendar" /> object.</summary>
      <returns>The earliest date and time supported by this calendar. The default is <see cref="F:System.DateTime.MinValue" />.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</summary>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">A positive integer that represents the month. </param>
      <param name="day">A positive integer that represents the day. </param>
      <param name="hour">An integer from 0 to 23 that represents the hour. </param>
      <param name="minute">An integer from 0 to 59 that represents the minute. </param>
      <param name="second">An integer from 0 to 59 that represents the second. </param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="hour" /> is less than zero or greater than 23.-or- <paramref name="minute" /> is less than zero or greater than 59.-or- <paramref name="second" /> is less than zero or greater than 59.-or- <paramref name="millisecond" /> is less than zero or greater than 999. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">A positive integer that represents the month. </param>
      <param name="day">A positive integer that represents the day. </param>
      <param name="hour">An integer from 0 to 23 that represents the hour. </param>
      <param name="minute">An integer from 0 to 59 that represents the minute. </param>
      <param name="second">An integer from 0 to 59 that represents the second. </param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="hour" /> is less than zero or greater than 23.-or- <paramref name="minute" /> is less than zero or greater than 59.-or- <paramref name="second" /> is less than zero or greater than 59.-or- <paramref name="millisecond" /> is less than zero or greater than 999.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <param name="year">A two-digit or four-digit integer that represents the year to convert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.Calendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Globalization.Calendar" /> object is read-only.</exception>
    </member>
    <member name="T:System.Globalization.CalendarWeekRule">
      <summary>Defines different rules for determining the first week of the year.</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstDay">
      <summary>Indicates that the first week of the year starts on the first day of the year and ends before the following designated first day of the week. The value is 0.</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFullWeek">
      <summary>Indicates that the first week of the year begins on the first occurrence of the designated first day of the week on or after the first day of the year. The value is 1.</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFourDayWeek">
      <summary>Indicates that the first week of the year is the first week with four or more days before the designated first day of the week. The value is 2.</summary>
    </member>
    <member name="T:System.Globalization.CharUnicodeInfo">
      <summary>Retrieves information about a Unicode character. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)">
      <summary>Gets the numeric value associated with the specified character.</summary>
      <returns>The numeric value associated with the specified character.-or- -1, if the specified character is not a numeric character.</returns>
      <param name="ch">The Unicode character for which to get the numeric value. </param>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)">
      <summary>Gets the numeric value associated with the character at the specified index of the specified string.</summary>
      <returns>The numeric value associated with the character at the specified index of the specified string.-or- -1, if the character at the specified index of the specified string is not a numeric character.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the numeric value. </param>
      <param name="index">The index of the Unicode character for which to get the numeric value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)">
      <summary>Gets the Unicode category of the specified character.</summary>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the specified character.</returns>
      <param name="ch">The Unicode character for which to get the Unicode category. </param>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)">
      <summary>Gets the Unicode category of the character at the specified index of the specified string.</summary>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the character at the specified index of the specified string.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the Unicode category. </param>
      <param name="index">The index of the Unicode character for which to get the Unicode category. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />. </exception>
    </member>
    <member name="T:System.Globalization.CompareInfo">
      <summary>Implements a set of methods for culture-sensitive string comparisons.</summary>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Compares a section of one string with a section of another string and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>An integer that indicates the relationship between the two strings in the sort order, as follows: Value Condition zero The two strings are equal. less than zero The specified section of <paramref name="string1" /> precedes the specified section of <paramref name="string2" />. greater than zero The specified section of <paramref name="string1" /> follows the specified section of <paramref name="string2" />. </returns>
      <param name="string1">The first string to compare. </param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start the comparison. </param>
      <param name="length1">The number of consecutive characters in <paramref name="string1" /> to compare. </param>
      <param name="string2">The second string to compare. </param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start the comparison. </param>
      <param name="length2">The number of consecutive characters in <paramref name="string2" /> to compare. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.-or- <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.-or- <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.-or- <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.-or- <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>Compares a section of one string with a section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>An integer that indicates the relationship between the two strings in the sort order, as follows: Value Condition zero The two strings are equal. less than zero The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />. greater than zero The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />. </returns>
      <param name="string1">The first string to compare. </param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing. </param>
      <param name="length1">The number of consecutive characters in <paramref name="string1" /> to compare. </param>
      <param name="string2">The second string to compare. </param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing. </param>
      <param name="length2">The number of consecutive characters in <paramref name="string2" /> to compare. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="string1" /> and <paramref name="string2" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.-or- <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.-or- <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.-or- <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.-or- <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)">
      <summary>Compares the end section of a string with the end section of another string and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>An integer that indicates the relationship between the two strings in the sort order, as follows: Value Condition zero The two strings are equal. less than zero The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />. greater than zero The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />. </returns>
      <param name="string1">The first string to compare. </param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing. </param>
      <param name="string2">The second string to compare. </param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.-or- <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.-or- <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>Compares the end section of a string with the end section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>An integer that indicates the relationship between the two strings in the sort order, as follows: Value Condition zero The two strings are equal. less than zero The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />. greater than zero The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />. </returns>
      <param name="string1">The first string to compare. </param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing. </param>
      <param name="string2">The second string to compare. </param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="string1" /> and <paramref name="string2" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.-or- <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.-or- <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String)">
      <summary>Compares two strings and returns an integer that indicates their relationship to one another in the sort order. </summary>
      <returns>An integer that indicates the relationship between the two strings in the sort order, as follows: Value Condition zero The two strings are equal. less than zero <paramref name="string1" /> precedes <paramref name="string2" />. greater than zero <paramref name="string1" /> follows <paramref name="string2" />. </returns>
      <param name="string1">The first string to compare. </param>
      <param name="string2">The second string to compare. </param>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>Compares two strings using the specified <see cref="T:System.Globalization.CompareOptions" /> value and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>An integer that indicates the relationship between the two strings in the sort order, as follows: Value Condition zero The two strings are equal. less than zero <paramref name="string1" /> is less than <paramref name="string2" />. greater than zero <paramref name="string1" /> is greater than <paramref name="string2" />. </returns>
      <param name="string1">The first string to compare. </param>
      <param name="string2">The second string to compare. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="string1" /> and <paramref name="string2" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
      <returns>true if the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" />; otherwise, false.</returns>
      <param name="value">The object to compare with the current <see cref="T:System.Globalization.CompareInfo" />. </param>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)">
      <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the culture with the specified name.</summary>
      <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
      <param name="name">A string representing the culture name. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an invalid culture name. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Globalization.CompareInfo" /> for hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Globalization.CompareInfo" />.</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="source" />, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The character to locate within <paramref name="source" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The character to locate within <paramref name="source" />. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The character to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the search. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The character to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the search. </param>
      <param name="count">The number of elements in the section to search. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.-or- <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The character to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the search. </param>
      <param name="count">The number of elements in the section to search. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.-or- <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="source" />, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The string to locate within <paramref name="source" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The string to locate within <paramref name="source" />. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The string to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the search. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The string to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the search. </param>
      <param name="count">The number of elements in the section to search. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.-or- <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The string to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the search. </param>
      <param name="count">The number of elements in the section to search. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.-or- <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)">
      <summary>Determines whether the specified source string starts with the specified prefix.</summary>
      <returns>true if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, false.</returns>
      <param name="source">The string to search in. </param>
      <param name="prefix">The string to compare with the beginning of <paramref name="source" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="prefix" /> is null. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>Determines whether the specified source string starts with the specified prefix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>true if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, false.</returns>
      <param name="source">The string to search in. </param>
      <param name="prefix">The string to compare with the beginning of <paramref name="source" />. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="prefix" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="prefix" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)">
      <summary>Determines whether the specified source string ends with the specified suffix.</summary>
      <returns>true if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, false.</returns>
      <param name="source">The string to search in. </param>
      <param name="suffix">The string to compare with the end of <paramref name="source" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="suffix" /> is null. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>Determines whether the specified source string ends with the specified suffix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>true if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, false.</returns>
      <param name="source">The string to search in. </param>
      <param name="suffix">The string to compare with the end of <paramref name="source" />. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="suffix" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="suffix" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="source" />, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The character to locate within <paramref name="source" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The character to locate within <paramref name="source" />. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The character to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the backward search. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The character to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the backward search. </param>
      <param name="count">The number of elements in the section to search. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.-or- <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The character to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the backward search. </param>
      <param name="count">The number of elements in the section to search. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.-or- <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="source" />, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The string to locate within <paramref name="source" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The string to locate within <paramref name="source" />. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The string to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the backward search. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The string to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the backward search. </param>
      <param name="count">The number of elements in the section to search. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.-or- <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. </exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value, if found; otherwise, -1.</returns>
      <param name="source">The string to search. </param>
      <param name="value">The string to locate within <paramref name="source" />. </param>
      <param name="startIndex">The zero-based starting index of the backward search. </param>
      <param name="count">The number of elements in the section to search. </param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.-or- <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.-or- <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value. </exception>
    </member>
    <member name="P:System.Globalization.CompareInfo.Name">
      <summary>Gets the name of the culture used for sorting operations by this <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
      <returns>The name of a culture.</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Globalization.CompareInfo" />.</summary>
      <returns>A string that represents the current <see cref="T:System.Globalization.CompareInfo" />.</returns>
    </member>
    <member name="T:System.Globalization.CompareOptions">
      <summary>Defines the options to use with a number of string comparison methods.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.None">
      <summary>Indicates the default option settings for string comparisons.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreCase">
      <summary>Indicates that the string comparison must ignore case.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreNonSpace">
      <summary>Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics. The Unicode Standard defines combining characters as characters that are combined with base characters to produce a new character. Nonspacing combining characters do not occupy a spacing position by themselves when rendered. For more information on nonspacing combining characters, see The Unicode Standard at the Unicode home page.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreSymbols">
      <summary>Indicates that the string comparison must ignore symbols, such as white-space characters, punctuation, currency symbols, the percent sign, mathematical symbols, the ampersand, and so on.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreKanaType">
      <summary>Indicates that the string comparison must ignore the Kana type. Kana type refers to Japanese hiragana and katakana characters, which represent phonetic sounds in the Japanese language. Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as "computer" or "Internet". A phonetic sound can be expressed in both hiragana and katakana. If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreWidth">
      <summary>Indicates that the string comparison must ignore the character width. For example, Japanese katakana characters can be written as full-width or half-width. If this value is selected, the katakana characters written as full-width are considered equal to the same characters written as half-width.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.OrdinalIgnoreCase">
      <summary>String comparison must ignore case, then perform an ordinal comparison. This technique is equivalent to converting the string to uppercase using the invariant culture and then performing an ordinal comparison on the result.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.StringSort">
      <summary>Indicates that the string comparison must use the string sort algorithm. In a string sort, the hyphen and the apostrophe, as well as other nonalphanumeric symbols, come before alphanumeric characters.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.Ordinal">
      <summary>Indicates that the string comparison must use the Unicode values of each character, leading to a fast comparison but one that is culture-insensitive. A string starting with "U+xxxx" comes before a string starting with "U+yyyy", if xxxx is less than yyyy. This value cannot be combined with other <see cref="T:System.Globalization.CompareOptions" /> values and must be used alone.</summary>
    </member>
    <member name="T:System.Globalization.CultureInfo">
      <summary>Provides information about a specific culture. The information includes the names for the culture, the writing system, the calendar used, the formatting used for numbers and dates, and the order of sorted strings.</summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by name.</summary>
      <param name="name">A predefined culture name, or the <see cref="P:System.Globalization.CultureInfo.Name" /> property of an existing <see cref="T:System.Globalization.CultureInfo" /> object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">On Windows systems, <paramref name="name" /> is not a valid culture name.</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.Calendar">
      <summary>Gets the default calendar used by the culture.</summary>
      <returns>An object that represents the default calendar used by the culture.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Clone">
      <summary>Creates a copy of the current <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>A copy of the current <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CompareInfo">
      <summary>Gets the <see cref="T:System.Globalization.CompareInfo" /> object that defines how to compare strings for the culture.</summary>
      <returns>The object that defines how to compare strings for the culture.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentCulture">
      <summary>Gets the <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture used by the current thread.</summary>
      <returns>The object that represents the culture used by the current thread.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentUICulture">
      <summary>Gets the <see cref="T:System.Globalization.CultureInfo" /> object that represents the current culture used by the Resource Manager to look up culture-specific resources at run time.</summary>
      <returns>The object that represents the current culture used by the Resource Manager to look up culture-specific resources at run time.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
      <summary>Gets or sets a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the culturally appropriate format for converting dates and times to strings.</summary>
      <returns>An object that defines the culturally appropriate format for converting dates and times to strings.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property or any of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> properties is set, and the <see cref="T:System.Globalization.CultureInfo" /> is read-only. </exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DisplayName">
      <summary>Gets the culture name in the format "language (country/region)" in the language of the localized version of .NET Framework.</summary>
      <returns>The culture name in the format "language (country/region)" in the language of the localized version of .NET Framework, where language is the full name of the language and country/region is the full name of the country or region.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.EnglishName">
      <summary>Gets the culture name in the format "language (country/region)" in English.</summary>
      <returns>The culture name in the format "language (country/region)" in English, where language is the full name of the language and country/region is the full name of the country or region.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Equals(System.Object)">
      <summary>Determines whether the specified object is the same culture as this <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>true if <paramref name="value" /> is the same culture as the current <see cref="T:System.Globalization.CultureInfo" />; otherwise, false.</returns>
      <param name="value">The object to compare with this <see cref="T:System.Globalization.CultureInfo" /> object. </param>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetFormat(System.Type)">
      <summary>Gets an object that defines how to format the specified type.</summary>
      <returns>The value of the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property, if <paramref name="formatType" /> is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.Globalization.NumberFormatInfo" /> class. This value is a <see cref="T:System.Globalization.NumberFormatInfo" /> object that contains numeric formatting information for this <see cref="T:System.Globalization.CultureInfo" /> object, -or- The value of the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, if <paramref name="formatType" /> is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class. This value is a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that contains date and time formatting information for this <see cref="T:System.Globalization.CultureInfo" /> object, -or- null, if <paramref name="formatType" /> is any other object.</returns>
      <param name="formatType">The type to get a formatting object for. This method supports only the <see cref="T:System.Globalization.NumberFormatInfo" /> and <see cref="T:System.Globalization.DateTimeFormatInfo" /> types. </param>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Globalization.CultureInfo" />, suitable for hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InvariantCulture">
      <summary>Gets the <see cref="T:System.Globalization.CultureInfo" /> that is culture-independent (invariant).</summary>
      <returns>The <see cref="T:System.Globalization.CultureInfo" /> that is culture-independent (invariant).</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsNeutralCulture">
      <summary>Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> object represents a neutral culture.</summary>
      <returns>true if the current <see cref="T:System.Globalization.CultureInfo" /> object represents a neutral culture; otherwise, false.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsReadOnly">
      <summary>Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> object is read-only.</summary>
      <returns>true if the current <see cref="T:System.Globalization.CultureInfo" /> object is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Name">
      <summary>Gets the culture name in the format "languagecode-country/regioncode".</summary>
      <returns>The culture name in the format "languagecode-country/regioncode", where languagecode is a lowercase two-letter code derived from ISO 639-1 and country/regioncode is an uppercase two-letter code derived from ISO 3166.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NativeName">
      <summary>Gets the culture's native name, which consists of the language, the country/region, and the optional script, that the culture is set to display.</summary>
      <returns>The culture's native name. which consists of the full name of the language, the full name of the country/region, and the optional script. The format is discussed in the description of the <see cref="T:System.Globalization.CultureInfo" /> class.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NumberFormat">
      <summary>Gets or sets a <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines the culturally appropriate format for converting numbers, currency values, and percentages to strings.</summary>
      <returns>An object that defines the culturally appropriate format for outputting numbers, currency values, and percentages.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property or any of the <see cref="T:System.Globalization.NumberFormatInfo" /> properties is being set, and the <see cref="T:System.Globalization.CultureInfo" /> is read-only. </exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.OptionalCalendars">
      <summary>Gets the list of calendars that can be used by this culture.</summary>
      <returns>An array that represents the calendars that can be used by the culture represented by this <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Parent">
      <summary>Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the parent culture of the current <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>The <see cref="T:System.Globalization.CultureInfo" /> that represents the parent culture of the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)">
      <summary>Returns a read-only wrapper around the specified <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>A read-only <see cref="T:System.Globalization.CultureInfo" /> wrapper around <paramref name="ci" />.</returns>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object to wrap. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ci" /> is null. </exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.TextInfo">
      <summary>Gets the <see cref="T:System.Globalization.TextInfo" /> object that defines the writing system associated with the culture.</summary>
      <returns>The <see cref="T:System.Globalization.TextInfo" /> object that defines the writing system associated with the culture.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ToString">
      <summary>Returns a string containing the name of the current <see cref="T:System.Globalization.CultureInfo" /> object in the format "languagecode-country/regioncode".</summary>
      <returns>A string containing the name of the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName">
      <summary>Gets the ISO 639-1 two-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>The ISO 639-1 two-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
    </member>
    <member name="T:System.Globalization.CultureNotFoundException">
      <summary>The exception that is thrown when a method attempts to construct a culture that is not available on the local system.</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a system-supplied message.</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with the specified error message.</summary>
      <param name="message">The error message that explains the reason for this exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that explains the reason for this exception.</param>
      <param name="innerException">The exception that caused the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a specified error message and the name of the parameter that caused this exception.</summary>
      <param name="paramName">The name of the parameter that caused the current exception.</param>
      <param name="message">The error message that explains the reason for this exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a specified error message, the invalid culture name, and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that explains the reason for this exception.</param>
      <param name="invalidCultureName">The culture name that cannot be found.</param>
      <param name="innerException">The exception that caused the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a specified error message, the invalid culture name, and the name of the parameter that caused this exception.</summary>
      <param name="paramName">The name of the parameter that caused the current exception.</param>
      <param name="invalidCultureName">The culture name that cannot be found.</param>
      <param name="message">The error message that explains the reason for this exception.</param>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.InvalidCultureName">
      <summary>Gets the culture name that cannot be found.</summary>
      <returns>The invalid culture name.</returns>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.Message">
      <summary>Gets the error message that explains the reason for the exception.</summary>
      <returns>A text string that describes the details of the exception.</returns>
    </member>
    <member name="T:System.Globalization.DateTimeFormatInfo">
      <summary>Defines how <see cref="T:System.DateTime" /> values are formatted and displayed, depending on the culture.</summary>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.#ctor">
      <summary>Initializes a new writable instance of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class that is culture-independent (invariant).</summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
      <summary>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the days of the week.</summary>
      <returns>A one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the days of the week. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", and "Sat".</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.ArgumentException">An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 7. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames">
      <summary>Gets or sets a string array of abbreviated month names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>A string array of abbreviated month names.</returns>
      <exception cref="T:System.ArgumentException">An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 13.</exception>
      <exception cref="T:System.ArgumentNullException">In a set operation, the value array or one of the elements of the value array is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
      <summary>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the months.</summary>
      <returns>A one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the months. In a 12-month calendar, the 13th element of the array is an empty string. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", and "".</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.ArgumentException">An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 13. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
      <summary>Gets or sets the string designator for hours that are "ante meridiem" (before noon).</summary>
      <returns>The string designator for hours that are "ante meridiem" (before noon). The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is "AM".</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.Calendar">
      <summary>Gets or sets the calendar to use for the current culture.</summary>
      <returns>The <see cref="T:System.Globalization.Calendar" /> indicating the calendar to use for the current culture. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is the <see cref="T:System.Globalization.GregorianCalendar" />.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">An attempt was made to set the property to a <see cref="T:System.Globalization.Calendar" /> that is not valid for the current culture. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule">
      <summary>Gets or sets a value that specifies which rule is used to determine the first calendar week of the year.</summary>
      <returns>A <see cref="T:System.Globalization.CalendarWeekRule" /> value that determines the first calendar week of the year. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">An attempt was made to set the property to a value that is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>A new <see cref="T:System.Globalization.DateTimeFormatInfo" /> object copied from the original <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
      <summary>Gets a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the date and time formatting information for the current culture.</summary>
      <returns>A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object based on the <see cref="T:System.Globalization.CultureInfo" /> object for the current thread. It is identical to retrieving the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the CultureInfo.CurrentCulture.DateTimeFormat property.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
      <summary>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the days of the week.</summary>
      <returns>A one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the days of the week. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", and "Saturday".</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.ArgumentException">An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 7. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek">
      <summary>Gets or sets the first day of the week.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> value representing the first day of the week. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is <see cref="F:System.DayOfWeek.Sunday" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">An attempt was made to set the property to a value that is not a valid <see cref="T:System.DayOfWeek" /> value. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
      <summary>Gets or sets the custom format string for a long date and long time value, which is associated with the "F" standard date and time format string.</summary>
      <returns>The custom format string for a long date and long time value, which is associated with the "F" standard date and time format string.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)">
      <summary>Returns the culture-specific abbreviated name of the specified day of the week based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>The culture-specific abbreviated name of the day of the week represented by <paramref name="dayofweek" />.</returns>
      <param name="dayofweek">A <see cref="T:System.DayOfWeek" /> value. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> is not a valid <see cref="T:System.DayOfWeek" /> value. </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)">
      <summary>Returns the string containing the abbreviated name of the specified era, if an abbreviation exists.</summary>
      <returns>A string containing the abbreviated name of the specified era, if an abbreviation exists; or a string containing the full name of the era, if an abbreviation does not exist.</returns>
      <param name="era">The integer representing the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> does not represent a valid era in the calendar specified in the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property. </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)">
      <summary>Returns the culture-specific abbreviated name of the specified month based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>The culture-specific abbreviated name of the month represented by <paramref name="month" />.</returns>
      <param name="month">An integer from 1 through 13 representing the name of the month to retrieve. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 13. </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)">
      <summary>Returns the culture-specific full name of the specified day of the week based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>The culture-specific full name of the day of the week represented by <paramref name="dayofweek" />.</returns>
      <param name="dayofweek">A <see cref="T:System.DayOfWeek" /> value. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> is not a valid <see cref="T:System.DayOfWeek" /> value. </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)">
      <summary>Returns the integer representing the specified era name.</summary>
      <returns>The integer representing the era, if <paramref name="eraName" /> is valid; otherwise, -1.</returns>
      <param name="eraName">The string containing the name of the era. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eraName" /> is null. </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)">
      <summary>Returns the string containing the name of the specified era.</summary>
      <returns>A string containing the name of the era.</returns>
      <param name="era">The integer representing the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> does not represent a valid era in the calendar specified in the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property. </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)">
      <summary>Returns an object of the specified type that provides a <see cref="T:System.DateTime" /> formatting service.</summary>
      <returns>The current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object, if the type of <paramref name="formatType" /> is <see cref="T:System.Globalization.DateTimeFormatInfo" />; otherwise, null.</returns>
      <param name="formatType">The <see cref="T:System.Type" /> of the required formatting service. </param>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>Returns the <see cref="T:System.Globalization.DateTimeFormatInfo" /> associated with the specified <see cref="T:System.IFormatProvider" />.</summary>
      <returns>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> associated with the specified <see cref="T:System.IFormatProvider" />.</returns>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> that gets the <see cref="T:System.Globalization.DateTimeFormatInfo" />.-or- null to get <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />. </param>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)">
      <summary>Returns the culture-specific full name of the specified month based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>The culture-specific full name of the month represented by <paramref name="month" />.</returns>
      <param name="month">An integer from 1 through 13 representing the name of the month to retrieve. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 13. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.InvariantInfo">
      <summary>Gets the default read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> that is culture-independent (invariant).</summary>
      <returns>The default read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that is culture-independent (invariant). It is identical to the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the CultureInfo.InvariantCulture.DateTimeFormat property.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
      <summary>Gets or sets the custom format string for a long date value, which is associated with the "D" standard date and time format string.</summary>
      <returns>The custom format string for a long date value, which is associated with the "D" standard format string.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
      <summary>Gets or sets the custom format string for a long time value, which is associated with the "T" standard format string.</summary>
      <returns>The custom format string for a long time value, which is associated with the "T" standard format string.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
      <summary>Gets or sets the custom format string for a month and day value, which is associated with the "m" and "M" standard date and time format strings.</summary>
      <returns>The custom format string for a month and day value, which is associated with the "m" and "M" standard format strings.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames">
      <summary>Gets or sets a string array of month names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>A string array of month names.</returns>
      <exception cref="T:System.ArgumentException">An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 13.</exception>
      <exception cref="T:System.ArgumentNullException">In a set operation, the value array or one of the elements of the value array is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
      <summary>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the months.</summary>
      <returns>A one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the months. In a 12-month calendar, the 13th element of the array is an empty string. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", and "".</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.ArgumentException">An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 13. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
      <summary>Gets or sets the string designator for hours that are "post meridiem" (after noon).</summary>
      <returns>The string designator for hours that are "post meridiem" (after noon). The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is "PM".</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)">
      <summary>Returns a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper.</summary>
      <returns>A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper around <paramref name="dtfi" />.</returns>
      <param name="dtfi">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> to wrap. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dtfi" /> is null. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
      <summary>Gets the custom date and time format string that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification and is associated with the "r" and "R" standard format strings.</summary>
      <returns>The custom date and time format string that is based on the IETF RFC 1123 specification. The string is invariant; it does not vary by cultures.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
      <summary>Gets or sets the custom date and time format string for a short date value, which is associated with the "d" standard format string.</summary>
      <returns>The custom format string for a short date value, which is associated with the "d" standard format string.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames">
      <summary>Gets or sets a string array of the shortest unique abbreviated day names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>A string array of day names.</returns>
      <exception cref="T:System.ArgumentException">An attempt was made to set the property to a multidimensional array or to a single-dimensional array with a length that is not exactly 7.</exception>
      <exception cref="T:System.ArgumentNullException">In a set operation, the value array or one of the elements of the value array is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
      <summary>Gets or sets the custom date and time format string for a short time value, which is associated with the "t" standard format string.</summary>
      <returns>The custom format string for a short time value, which is associated with the "t" standard format string.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
      <summary>Gets the custom date and time format string for a sortable date and time value, which is associated with the "s" standard format string.</summary>
      <returns>The custom format string for a sortable date and time value, which is associated with the "s" standard format string.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
      <summary>Gets the custom date and time format string for a universal sortable date and time value, which is associated with the "u" standard format string.</summary>
      <returns>The custom format string for a universal sortable date and time value, which is associated with the "u" standard format string.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
      <summary>Gets or sets the custom date and time format string for a year and month value, which is associated with the "y" and "Y" standard format strings.</summary>
      <returns>The custom format string for a year and month value, which is associated with the "y" and "Y" format strings.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the property to null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>Defines the formatting options that customize string parsing for a number of <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> parsing methods.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>Default formatting options must be used. This value represents the default style for <see cref="M:System.DateTime.Parse(System.String)" />, <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />, and <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>Leading white-space characters must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>Trailing white-space characters must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>Extra white-space characters in the middle of the string must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>Extra white-space characters anywhere in the string must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns. This value is a combination of the <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> values.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>If the parsed string contains only the time and not the date, the parsing methods assume the Gregorian date with year = 1, month = 1, and day = 1. If this value is not used, the current date is assumed.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>Date and time are returned as a Coordinated Universal Time (UTC). If the input string denotes a local time, through a time zone specifier or <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, the date and time are converted from the local time to UTC. If the input string denotes a UTC time, through a time zone specifier or <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />, no conversion occurs. If the input string does not denote a local or UTC time, no conversion occurs and the resulting <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Unspecified" />. </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>If no time zone is specified in the parsed string, the string is assumed to denote a local time. </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>If no time zone is specified in the parsed string, the string is assumed to denote a UTC. </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>For parsing operations using <see cref="T:System.DateTime" /> methods on strings that contain time zone information, tries to prevent the conversion to a local <see cref="T:System.DateTime" /> value with its <see cref="P:System.DateTime.Kind" /> property set to <see cref="F:System.DateTimeKind.Local" />. For <see cref="T:System.DateTimeOffset" /> values, this flag has no effect.</summary>
    </member>
    <member name="T:System.Globalization.GregorianCalendar">
      <summary>Represents the Gregorian calendar.</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.GregorianCalendar" /> class using the default <see cref="T:System.Globalization.GregorianCalendarTypes" /> value.</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.GregorianCalendar" /> class using the specified <see cref="T:System.Globalization.GregorianCalendarTypes" /> value.</summary>
      <param name="type">The <see cref="T:System.Globalization.GregorianCalendarTypes" /> value that denotes which language version of the calendar to create. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="type" /> is not a member of the <see cref="T:System.Globalization.GregorianCalendarTypes" /> enumeration.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months. </param>
      <param name="months">The number of months to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.-or- <paramref name="months" /> is greater than 120000. </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years. </param>
      <param name="years">The number of years to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
    </member>
    <member name="F:System.Globalization.GregorianCalendar.ADEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.CalendarType">
      <summary>Gets or sets the <see cref="T:System.Globalization.GregorianCalendarTypes" /> value that denotes the language version of the current <see cref="T:System.Globalization.GregorianCalendar" />.</summary>
      <returns>A <see cref="T:System.Globalization.GregorianCalendarTypes" /> value that denotes the language version of the current <see cref="T:System.Globalization.GregorianCalendar" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value assigned in a set operation is not a member of the <see cref="T:System.Globalization.GregorianCalendarTypes" /> enumeration.</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.GregorianCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.GregorianCalendar" />.</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 31 that represents the day of the month in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 366 that represents the day of the year in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.-or- <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <returns>The number of days in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.-or- <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)">
      <summary>Returns the era of a specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>An integer that represents the era of <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <returns>The return value is always 0 because the <see cref="T:System.Globalization.GregorianCalendar" /> type does not support the notion of a leap month.</returns>
      <param name="year">A year.</param>
      <param name="era">An era. Specify either <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> or <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the Gregorian calendar year 1 or greater than the Gregorian calendar year 9999.-or-<paramref name="era" /> is not <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> or <see cref="F:System.Globalization.Calendar.CurrentEra" />.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 12 that represents the month in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <returns>The number of months in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.-or- <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" /> object.</summary>
      <returns>A 1-based integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> object to read. </param>
      <param name="rule">One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week. </param>
      <param name="firstDayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.-or- <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer that represents the year in <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <returns>true if the specified day is a leap day; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 31 that represents the day. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar. -or- <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <returns>This method always returns false, unless overridden by a derived class.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.-or- <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <returns>true if the specified year is a leap year; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.-or- <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type, which is the last moment of December 31, 9999 C.E. and is equivalent to <see cref="F:System.DateTime.MaxValue" />.</returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type, which is the first moment of January 1, 0001 C.E. and is equivalent to <see cref="F:System.DateTime.MinValue" />.</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 31 that represents the day. </param>
      <param name="hour">An integer from 0 to 23 that represents the hour. </param>
      <param name="minute">An integer from 0 to 59 that represents the minute. </param>
      <param name="second">An integer from 0 to 59 that represents the second. </param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.-or- <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="hour" /> is less than zero or greater than 23.-or- <paramref name="minute" /> is less than zero or greater than 59.-or- <paramref name="second" /> is less than zero or greater than 59.-or- <paramref name="millisecond" /> is less than zero or greater than 999. </exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.GregorianCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <param name="year">A two-digit or four-digit integer that represents the year to convert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the value assigned is less than 99.-or-In a set operation, the value assigned is greater than 9999.</exception>
    </member>
    <member name="T:System.Globalization.GregorianCalendarTypes">
      <summary>Defines the different language versions of the Gregorian calendar.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Localized">
      <summary>Refers to the localized version of the Gregorian calendar, based on the language of the <see cref="T:System.Globalization.CultureInfo" /> object that uses the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.USEnglish">
      <summary>Refers to the U.S. English version of the Gregorian calendar.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.MiddleEastFrench">
      <summary>Refers to the Middle East French version of the Gregorian calendar.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Arabic">
      <summary>Refers to the Arabic version of the Gregorian calendar.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedEnglish">
      <summary>Refers to the transliterated English version of the Gregorian calendar.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedFrench">
      <summary>Refers to the transliterated French version of the Gregorian calendar.</summary>
    </member>
    <member name="T:System.Globalization.HebrewCalendar">
      <summary>Represents the Hebrew calendar.</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.HebrewCalendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add <paramref name="months" />. </param>
      <param name="months">The number of months to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120,000 or greater than 120,000. </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add <paramref name="years" />. </param>
      <param name="years">The number of years to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.HebrewCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.HebrewCalendar" /> type. The return value is always an array containing one element equal to <see cref="F:System.Globalization.Calendar.CurrentEra" />. </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 30 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 385 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is less than <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 13 that represents the month. </param>
      <param name="era">An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object. </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <returns>The number of days in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object. </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)">
      <summary>Returns the era of a specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>An integer that represents the era of the specified <see cref="T:System.DateTime" /> value. The return value is always <see cref="F:System.Globalization.Calendar.CurrentEra" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <returns>A positive integer that indicates the leap month in the specified year and era. The return value is 7 if the <paramref name="year" /> and <paramref name="era" /> parameters specify a leap year, or 0 if the year is not a leap year.</returns>
      <param name="year">A year.</param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is not <see cref="F:System.Globalization.Calendar.CurrentEra" />.-or-<paramref name="year" /> is less than the Hebrew calendar year 5343 or greater than the Hebrew calendar year 5999.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 13 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is less than <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <returns>The number of months in the specified year in the specified era. The return value is either 12 in a common year, or 13 in a leap year.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object. </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" /> value.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object. </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <returns>true if the specified day is a leap day; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 13 that represents the month. </param>
      <param name="day">An integer from 1 to 30 that represents the day. </param>
      <param name="era">An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <returns>true if the specified month is a leap month; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 13 that represents the month. </param>
      <param name="era">An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <returns>true if the specified year is a leap year; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type, which is equivalent to the last moment of September, 29, 2239 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type, which is equivalent to the first moment of January, 1, 1583 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 13 that represents the month. </param>
      <param name="day">An integer from 1 to 30 that represents the day. </param>
      <param name="hour">An integer from 0 to 23 that represents the hour. </param>
      <param name="minute">An integer from 0 to 59 that represents the minute. </param>
      <param name="second">An integer from 0 to 59 that represents the second. </param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond. </param>
      <param name="era">An integer that represents the era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" /> or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object.-or- <paramref name="hour" /> is less than 0 or greater than 23.-or- <paramref name="minute" /> is less than 0 or greater than 59.-or- <paramref name="second" /> is less than 0 or greater than 59.-or- <paramref name="millisecond" /> is less than 0 or greater than 999. </exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a 4-digit year by using the <see cref="P:System.Globalization.HebrewCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <returns>If the <paramref name="year" /> parameter is a 2-digit year, the return value is the corresponding 4-digit year. If the <paramref name="year" /> parameter is a 4-digit year, the return value is the unchanged <paramref name="year" /> parameter.</returns>
      <param name="year">A 2-digit year from 0 through 99, or a 4-digit Hebrew calendar year from 5343 through 5999.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 0.-or-<paramref name="year" /> is less than <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />. </exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Globalization.HebrewCalendar" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the Hebrew calendar year value is less than 5343 but is not 99, or the year value is greater than 5999. </exception>
    </member>
    <member name="T:System.Globalization.HijriCalendar">
      <summary>Represents the Hijri calendar.</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.HijriCalendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to add months to. </param>
      <param name="months">The number of months to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.-or- <paramref name="months" /> is greater than 120000. </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to add years to. </param>
      <param name="years">The number of years to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.HijriCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.HijriCalendar" />.</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 30 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 355 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month of the specified year and era.</summary>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. -or- <paramref name="year" /> is outside the range supported by this calendar.-or- <paramref name="month" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year and era.</summary>
      <returns>The number of days in the specified year and era. The number of days is 354 in a common year or 355 in a leap year.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)">
      <summary>Returns the era of a specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>An integer that represents the era of the specified <see cref="T:System.DateTime" /> value.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <returns>Always 0 because the <see cref="T:System.Globalization.HijriCalendar" /> type does not support leap months.</returns>
      <param name="year">A year.</param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the Hijri calendar year 1 or greater than the year 9666.-or-<paramref name="era" /> is not <see cref="F:System.Globalization.Calendar.CurrentEra" />.</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year and era.</summary>
      <returns>The number of months in the specified year and era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. -or- <paramref name="year" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="P:System.Globalization.HijriCalendar.HijriAdjustment">
      <summary>Gets or sets the number of days to add or subtract from the calendar to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions.</summary>
      <returns>An integer from -2 to 2 that represents the number of days to add or subtract from the calendar.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to an invalid value. </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date is a leap day.</summary>
      <returns>true if the specified day is a leap day; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 30 that represents the day. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. -or- <paramref name="year" /> is outside the range supported by this calendar.-or- <paramref name="month" /> is outside the range supported by this calendar.-or- <paramref name="day" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year and era is a leap month.</summary>
      <returns>This method always returns false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. -or- <paramref name="year" /> is outside the range supported by this calendar.-or- <paramref name="month" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <returns>true if the specified year is a leap year; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. -or- <paramref name="year" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by this calendar.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.HijriCalendar" /> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by this calendar.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.HijriCalendar" /> type, which is equivalent to the first moment of July 18, 622 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date, time, and era.</summary>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 30 that represents the day. </param>
      <param name="hour">An integer from 0 to 23 that represents the hour. </param>
      <param name="minute">An integer from 0 to 59 that represents the minute. </param>
      <param name="second">An integer from 0 to 59 that represents the second. </param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar. -or- <paramref name="year" /> is outside the range supported by this calendar.-or- <paramref name="month" /> is outside the range supported by this calendar.-or- <paramref name="day" /> is outside the range supported by this calendar.-or- <paramref name="hour" /> is less than zero or greater than 23.-or- <paramref name="minute" /> is less than zero or greater than 59.-or- <paramref name="second" /> is less than zero or greater than 59.-or- <paramref name="millisecond" /> is less than zero or greater than 999. </exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.HijriCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <param name="year">A two-digit or four-digit integer that represents the year to convert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.InvalidOperationException">This calendar is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than 100 or greater than 9666.</exception>
    </member>
    <member name="T:System.Globalization.JapaneseCalendar">
      <summary>Represents the Japanese calendar.</summary>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.JapaneseCalendar" /> class.</summary>
      <exception cref="T:System.TypeInitializationException">A ja-JP <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to this <see cref="T:System.Globalization.JapaneseCalendar" /> object cannot be initialized.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months. </param>
      <param name="months">The number of months to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.-or- <paramref name="months" /> is greater than 120000. </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years. </param>
      <param name="years">The number of years to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the supported range of the <see cref="T:System.Globalization.JapaneseCalendar" /> type.-or-<paramref name="years" /> is less than -10,000 or greater than 10,000. </exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.JapaneseCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.JapaneseCalendar" />.</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <returns>The number of days in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)">
      <summary>Returns the era of a specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>An integer that represents the era of the specified <see cref="T:System.DateTime" /> value.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <returns>The return value is always 0 because the <see cref="T:System.Globalization.JapaneseCalendar" /> type does not support the notion of a leap month.</returns>
      <param name="year">A year.</param>
      <param name="era">An era.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <returns>The return value is always 12.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A 1-based integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
      <param name="rule">One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week. </param>
      <param name="firstDayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.-or- <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <returns>true, if the specified day is a leap day; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 31 that represents the day. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <returns>This method always returns false, unless overridden by a derived class.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <returns>true, if the specified year is a leap year; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type, which is equivalent to the first moment of January 1, 1868 C.E. in the Gregorian calendar. </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 31 that represents the day. </param>
      <param name="hour">An integer from 0 to 23 that represents the hour. </param>
      <param name="minute">An integer from 0 to 59 that represents the minute. </param>
      <param name="second">An integer from 0 to 59 that represents the second. </param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="hour" /> is less than zero or greater than 23.-or- <paramref name="minute" /> is less than zero or greater than 59.-or- <paramref name="second" /> is less than zero or greater than 59.-or- <paramref name="millisecond" /> is less than zero or greater than 999.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <param name="year">An integer (usually two digits) that represents the year to convert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the value assigned is less than 99.-or-In a set operation, the value assigned is greater than 8011.</exception>
    </member>
    <member name="T:System.Globalization.KoreanCalendar">
      <summary>Represents the Korean calendar.</summary>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.KoreanCalendar" /> class.</summary>
      <exception cref="T:System.TypeInitializationException">A ko-KR <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to this <see cref="T:System.Globalization.KoreanCalendar" /> object cannot be initialized.</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months. </param>
      <param name="months">The number of months to add. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.-or- <paramref name="months" /> is greater than 120000. </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years. </param>
      <param name="years">The number of years to add. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> or <paramref name="time" /> is out of range.</exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.KoreanCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.KoreanCalendar" />.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <returns>The number of days in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetEra(System.DateTime)">
      <summary>Returns the era of a specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>An integer that represents the era of <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <returns>The return value is always 0 because the <see cref="T:System.Globalization.KoreanCalendar" /> class does not support leap months.</returns>
      <param name="year">A year.</param>
      <param name="era">An era.</param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <returns>The number of months in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A 1-based integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
      <param name="rule">One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week. </param>
      <param name="firstDayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.-or- <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <returns>true if the specified day is a leap day; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 31 that represents the day. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <returns>This method always returns false, unless overridden by a derived class.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <returns>true if the specified year is a leap year; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="F:System.Globalization.KoreanCalendar.KoreanEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 31 that represents the day. </param>
      <param name="hour">An integer from 0 to 23 that represents the hour. </param>
      <param name="minute">An integer from 0 to 59 that represents the minute. </param>
      <param name="second">An integer from 0 to 59 that represents the second. </param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="hour" /> is less than zero or greater than 23.-or- <paramref name="minute" /> is less than zero or greater than 59.-or- <paramref name="second" /> is less than zero or greater than 59.-or- <paramref name="millisecond" /> is less than zero or greater than 999.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.KoreanCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <param name="year">A two-digit or four-digit integer that represents the year to convert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the value assigned is less than 99.-or-In a set operation, the value assigned is greater than 12332.</exception>
    </member>
    <member name="T:System.Globalization.NumberFormatInfo">
      <summary>Defines how numeric values are formatted and displayed, depending on the culture.</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.#ctor">
      <summary>Initializes a new writable instance of the <see cref="T:System.Globalization.NumberFormatInfo" /> class that is culture-independent (invariant).</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Globalization.NumberFormatInfo" /> object.</summary>
      <returns>A new <see cref="T:System.Globalization.NumberFormatInfo" /> object copied from the original <see cref="T:System.Globalization.NumberFormatInfo" /> object.</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits">
      <summary>Indicates the number of decimal places to use in currency values.</summary>
      <returns>The number of decimal places to use in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 2.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 99. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator">
      <summary>Gets or sets the string to use as the decimal separator in currency values.</summary>
      <returns>The string to use as the decimal separator in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ".".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
      <exception cref="T:System.ArgumentException">The property is being set to an empty string.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator">
      <summary>Gets or sets the string that separates groups of digits to the left of the decimal in currency values.</summary>
      <returns>The string that separates groups of digits to the left of the decimal in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ",".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes">
      <summary>Gets or sets the number of digits in each group to the left of the decimal in currency values.</summary>
      <returns>The number of digits in each group to the left of the decimal in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is a one-dimensional array with only one element, which is set to 3.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.ArgumentException">The property is being set and the array contains an entry that is less than 0 or greater than 9.-or- The property is being set and the array contains an entry, other than the last entry, that is set to 0. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern">
      <summary>Gets or sets the format pattern for negative currency values.</summary>
      <returns>The format pattern for negative currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "($n)", where "$" is the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> and <paramref name="n" /> is a number.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 15. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern">
      <summary>Gets or sets the format pattern for positive currency values.</summary>
      <returns>The format pattern for positive currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "$n", where "$" is the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> and <paramref name="n" /> is a number.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 3. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencySymbol">
      <summary>Gets or sets the string to use as the currency symbol.</summary>
      <returns>The string to use as the currency symbol. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "$".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrentInfo">
      <summary>Gets a read-only <see cref="T:System.Globalization.NumberFormatInfo" /> object that contains numeric formatting information for the current culture.</summary>
      <returns>A read-only <see cref="T:System.Globalization.NumberFormatInfo" /> object based on the <see cref="T:System.Globalization.CultureInfo" /> object for the current thread.</returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)">
      <summary>Gets an object of the specified type that provides a numeric formatting service.</summary>
      <returns>The current <see cref="T:System.Globalization.NumberFormatInfo" /> object, if <paramref name="formatType" /> is an object of type <see cref="T:System.Globalization.NumberFormatInfo" />; otherwise, null.</returns>
      <param name="formatType">The <see cref="T:System.Type" /> of the required formatting service. </param>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>Gets the <see cref="T:System.Globalization.NumberFormatInfo" /> object associated with the specified <see cref="T:System.IFormatProvider" /> object.</summary>
      <returns>The <see cref="T:System.Globalization.NumberFormatInfo" /> object associated with the specified <see cref="T:System.IFormatProvider" /> object.</returns>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> object used to get the <see cref="T:System.Globalization.NumberFormatInfo" />.-or- null to get the <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> object. </param>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.InvariantInfo">
      <summary>Gets the default read-only <see cref="T:System.Globalization.NumberFormatInfo" /> object that is culture-independent (invariant).</summary>
      <returns>The default read-only <see cref="T:System.Globalization.NumberFormatInfo" /> object that is culture-independent (invariant).</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NaNSymbol">
      <summary>Gets or sets the string that represents the IEEE NaN (not a number) value.</summary>
      <returns>The string that represents the IEEE NaN (not a number) value. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "NaN".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol">
      <summary>Gets or sets the string that represents negative infinity.</summary>
      <returns>The string that represents negative infinity. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "-Infinity".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeSign">
      <summary>Gets or sets the string that indicates that a number is negative.</summary>
      <returns>The string that indicates that a number is negative. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "-".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits">
      <summary>Gets or sets the number of decimal places to use in numeric values.</summary>
      <returns>The number of decimal places to use in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 2.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 99. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator">
      <summary>Gets or sets the string to use as the decimal separator in numeric values.</summary>
      <returns>The string to use as the decimal separator in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ".".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
      <exception cref="T:System.ArgumentException">The property is being set to an empty string.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator">
      <summary>Gets or sets the string that separates groups of digits to the left of the decimal in numeric values.</summary>
      <returns>The string that separates groups of digits to the left of the decimal in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ",".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSizes">
      <summary>Gets or sets the number of digits in each group to the left of the decimal in numeric values.</summary>
      <returns>The number of digits in each group to the left of the decimal in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is a one-dimensional array with only one element, which is set to 3.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.ArgumentException">The property is being set and the array contains an entry that is less than 0 or greater than 9.-or- The property is being set and the array contains an entry, other than the last entry, that is set to 0. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberNegativePattern">
      <summary>Gets or sets the format pattern for negative numeric values.</summary>
      <returns>The format pattern for negative numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 1, which represents "-n", where <paramref name="n" /> is a number.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 4. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits">
      <summary>Gets the number of decimal places to use in percent values. </summary>
      <returns>The number of decimal places to use in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 2.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 99. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator">
      <summary>Gets the string to use as the decimal separator in percent values. </summary>
      <returns>The string to use as the decimal separator in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ".".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
      <exception cref="T:System.ArgumentException">The property is being set to an empty string.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator">
      <summary>Gets the string that separates groups of digits to the left of the decimal in percent values. </summary>
      <returns>The string that separates groups of digits to the left of the decimal in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ",".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSizes">
      <summary>Gets the number of digits in each group to the left of the decimal in percent values. </summary>
      <returns>The number of digits in each group to the left of the decimal in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is a one-dimensional array with only one element, which is set to 3.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.ArgumentException">The property is being set and the array contains an entry that is less than 0 or greater than 9.-or- The property is being set and the array contains an entry, other than the last entry, that is set to 0. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentNegativePattern">
      <summary>Gets or sets the format pattern for negative percent values.</summary>
      <returns>The format pattern for negative percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "-n %", where "%" is the <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> and <paramref name="n" /> is a number.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 11. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentPositivePattern">
      <summary>Gets or sets the format pattern for positive percent values.</summary>
      <returns>The format pattern for positive percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "n %", where "%" is the <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> and <paramref name="n" /> is a number.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 3. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentSymbol">
      <summary>Gets or sets the string to use as the percent symbol.</summary>
      <returns>The string to use as the percent symbol. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "%".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PerMilleSymbol">
      <summary>Gets or sets the string to use as the per mille symbol.</summary>
      <returns>The string to use as the per mille symbol. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "‰", which is the Unicode character U+2030.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol">
      <summary>Gets or sets the string that represents positive infinity.</summary>
      <returns>The string that represents positive infinity. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "Infinity".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveSign">
      <summary>Gets or sets the string that denotes that the associated number is positive.</summary>
      <returns>The string that denotes that the associated number is positive. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "+".</returns>
      <exception cref="T:System.ArgumentNullException">In a set operation, the value to be assigned to the property is null.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only. </exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)">
      <summary>Returns a read-only <see cref="T:System.Globalization.NumberFormatInfo" /> wrapper.</summary>
      <returns>A read-only <see cref="T:System.Globalization.NumberFormatInfo" /> wrapper around <paramref name="nfi" />.</returns>
      <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo" /> to wrap. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nfi" /> is null. </exception>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>Determines the styles permitted in numeric string arguments that are passed to the Parse methods of the base numeric types.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>Indicates that none of the bit styles are allowed.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>Indicates that leading white-space characters can be present in the numeric string and will be ignored during parsing. Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>Indicates that trailing white-space characters can be present in the numeric string and will be ignored during parsing. Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>Indicates that the numeric string can have a leading sign. Valid leading sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> and <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties of a <see cref="T:System.Globalization.NumberFormatInfo" /> object.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>Indicates that the numeric string can have a trailing sign. Valid trailing sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> and <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties of a <see cref="T:System.Globalization.NumberFormatInfo" /> object.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>Indicates that the numeric string can have one pair of parentheses enclosing the number.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>Indicates that the numeric string can have a decimal point. Valid decimal point characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> properties of a <see cref="T:System.Globalization.NumberFormatInfo" /> object.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>Indicates that the numeric string can have group separators, for example, separating the hundreds from the thousands. Valid group separator characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> properties of a <see cref="T:System.Globalization.NumberFormatInfo" /> object, and the number of digits in each group is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> properties of a <see cref="T:System.Globalization.NumberFormatInfo" /> object.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>Indicates that the numeric string can be in exponential notation.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>Indicates that the numeric string is parsed as currency if it contains a currency symbol. Otherwise, it is parsed as a number. Valid currency symbols are determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> property of a <see cref="T:System.Globalization.NumberFormatInfo" /> object.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>Indicates that the numeric string represents a hexadecimal value. Valid hexadecimal values include the numeric digits 0-9 and the hexadecimal digits A-F and a-f. Hexadecimal values can be left-padded with zeros. Strings parsed using this style cannot be prefixed with "0x".</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />, and <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />, and <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>Indicates that all styles, except <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> and <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />, are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>Indicates that all styles, except <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />, are used. This is a composite number style.</summary>
    </member>
    <member name="T:System.Globalization.RegionInfo">
      <summary>Contains information about a country/region.</summary>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.RegionInfo" /> class for a particular country/region based on its full culture name.</summary>
      <param name="name">A string containing the full culture name for a specific culture. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is a country/region name.-or-<paramref name="name" /> is the name of a neutral culture.-or-<paramref name="name" /> is not a valid culture name.</exception>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencySymbol">
      <summary>Gets the currency symbol associated with the country/region.</summary>
      <returns>The currency symbol associated with the country/region.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrentRegion">
      <summary>Gets the <see cref="T:System.Globalization.RegionInfo" /> that represents the country/region used by the current thread.</summary>
      <returns>The <see cref="T:System.Globalization.RegionInfo" /> that represents the country/region used by the current thread.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.DisplayName">
      <summary>Gets the full name of the country/region in the language of the localized version of the .NET Framework.</summary>
      <returns>The full name of the country/region in the language of the localized version of the .NET Framework.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.EnglishName">
      <summary>Gets the full name of the country/region in English.</summary>
      <returns>The full name of the country/region in English.</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.Equals(System.Object)">
      <summary>Determines whether the specified object is the same as the current <see cref="T:System.Globalization.RegionInfo" /> object.</summary>
      <returns>true if the <paramref name="value" /> parameter is a <see cref="T:System.Globalization.RegionInfo" /> object and its <see cref="P:System.Globalization.RegionInfo.Name" /> property is the same as the <see cref="P:System.Globalization.RegionInfo.Name" /> property of the current <see cref="T:System.Globalization.RegionInfo" /> object; otherwise, false.</returns>
      <param name="value">The object to compare with the current <see cref="T:System.Globalization.RegionInfo" />. </param>
    </member>
    <member name="M:System.Globalization.RegionInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Globalization.RegionInfo" />, suitable for hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Globalization.RegionInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.IsMetric">
      <summary>Gets a value indicating whether the country/region uses the metric system for measurements.</summary>
      <returns>true if the country/region uses the metric system for measurements; otherwise, false.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ISOCurrencySymbol">
      <summary>Gets the three-character ISO 4217 currency symbol associated with the country/region.</summary>
      <returns>The three-character ISO 4217 currency symbol associated with the country/region.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.Name">
      <summary>Gets the name or ISO 3166 two-letter country/region code for the current <see cref="T:System.Globalization.RegionInfo" /> object.</summary>
      <returns>The value specified by the <paramref name="name" /> parameter of the <see cref="M:System.Globalization.RegionInfo.#ctor(System.String)" /> constructor. The return value is in uppercase.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.NativeName">
      <summary>Gets the name of a country/region formatted in the native language of the country/region.</summary>
      <returns>The native name of the country/region formatted in the language associated with the ISO 3166 country/region code. </returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.ToString">
      <summary>Returns a string containing the culture name or ISO 3166 two-letter country/region code specified for the current <see cref="T:System.Globalization.RegionInfo" />.</summary>
      <returns>A string containing the culture name or ISO 3166 two-letter country/region codes defined for the current <see cref="T:System.Globalization.RegionInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.TwoLetterISORegionName">
      <summary>Gets the two-letter code defined in ISO 3166 for the country/region.</summary>
      <returns>The two-letter code defined in ISO 3166 for the country/region.</returns>
    </member>
    <member name="T:System.Globalization.StringInfo">
      <summary>Provides functionality to split a string into text elements and to iterate through those text elements.</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.StringInfo" /> class. </summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.StringInfo" /> class to a specified string.</summary>
      <param name="value">A string to initialize this <see cref="T:System.Globalization.StringInfo" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Globalization.StringInfo" /> object is equal to a specified object.</summary>
      <returns>true if the <paramref name="value" /> parameter is a <see cref="T:System.Globalization.StringInfo" /> object and its <see cref="P:System.Globalization.StringInfo.String" /> property equals the <see cref="P:System.Globalization.StringInfo.String" /> property of this <see cref="T:System.Globalization.StringInfo" /> object; otherwise, false.</returns>
      <param name="value">An object.</param>
    </member>
    <member name="M:System.Globalization.StringInfo.GetHashCode">
      <summary>Calculates a hash code for the value of the current <see cref="T:System.Globalization.StringInfo" /> object.</summary>
      <returns>A 32-bit signed integer hash code based on the string value of this <see cref="T:System.Globalization.StringInfo" /> object.</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
      <summary>Gets the first text element in a specified string.</summary>
      <returns>A string containing the first text element in the specified string.</returns>
      <param name="str">The string from which to get the text element. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
      <summary>Gets the text element at the specified index of the specified string.</summary>
      <returns>A string containing the text element at the specified index of the specified string.</returns>
      <param name="str">The string from which to get the text element. </param>
      <param name="index">The zero-based index at which the text element starts. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for <paramref name="str" />. </exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
      <summary>Returns an enumerator that iterates through the text elements of the entire string.</summary>
      <returns>A <see cref="T:System.Globalization.TextElementEnumerator" /> for the entire string.</returns>
      <param name="str">The string to iterate through. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
      <summary>Returns an enumerator that iterates through the text elements of the string, starting at the specified index.</summary>
      <returns>A <see cref="T:System.Globalization.TextElementEnumerator" /> for the string starting at <paramref name="index" />.</returns>
      <param name="str">The string to iterate through. </param>
      <param name="index">The zero-based index at which to start iterating. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for <paramref name="str" />. </exception>
    </member>
    <member name="P:System.Globalization.StringInfo.LengthInTextElements">
      <summary>Gets the number of text elements in the current <see cref="T:System.Globalization.StringInfo" /> object.</summary>
      <returns>The number of base characters, surrogate pairs, and combining character sequences in this <see cref="T:System.Globalization.StringInfo" /> object.</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
      <summary>Returns the index of each base character, high surrogate, or control character within the specified string.</summary>
      <returns>An array of integers that contains the zero-based index of each base character, high surrogate, or control character within the specified string.</returns>
      <param name="str">The string to search. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="P:System.Globalization.StringInfo.String">
      <summary>Gets or sets the value of the current <see cref="T:System.Globalization.StringInfo" /> object.</summary>
      <returns>The string that is the value of the current <see cref="T:System.Globalization.StringInfo" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null.</exception>
    </member>
    <member name="T:System.Globalization.TaiwanCalendar">
      <summary>Represents the Taiwan calendar.</summary>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.TaiwanCalendar" /> class.</summary>
      <exception cref="T:System.TypeInitializationException">Unable to initialize a zh-TW <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to this <see cref="T:System.Globalization.TaiwanCalendar" /> object.</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months. </param>
      <param name="months">The number of months to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.-or- <paramref name="months" /> is greater than 120000. </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years. </param>
      <param name="years">The number of years to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.TaiwanCalendar" />.</summary>
      <returns>An array that consists of a single element for which the value is always the current era.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <returns>The number of days in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)">
      <summary>Returns the era of a specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>An integer that represents the era of <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <returns>The return value is always 0 because the <see cref="T:System.Globalization.TaiwanCalendar" /> class does not support the notion of a leap month.</returns>
      <param name="year">A year.</param>
      <param name="era">An era.</param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <returns>The number of months in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A positive integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
      <param name="rule">One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week. </param>
      <param name="firstDayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.-or- <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <returns>true if the specified day is a leap day; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 31 that represents the day. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <returns>This method always returns false, unless overridden by a derived class.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <returns>true if the specified year is a leap year; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class, which is equivalent to the first moment of January 1, 1912 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 31 that represents the day. </param>
      <param name="hour">An integer from 0 to 23 that represents the hour. </param>
      <param name="minute">An integer from 0 to 59 that represents the minute. </param>
      <param name="second">An integer from 0 to 59 that represents the second. </param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="hour" /> is less than zero or greater than 23.-or- <paramref name="minute" /> is less than zero or greater than 59.-or- <paramref name="second" /> is less than zero or greater than 59.-or- <paramref name="millisecond" /> is less than zero or greater than 999.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <param name="year">A two-digit or four-digit integer that represents the year to convert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the value assigned is less than 99.-or-In a set operation, the value assigned is greater than 8088.</exception>
    </member>
    <member name="T:System.Globalization.TextElementEnumerator">
      <summary>Enumerates the text elements of a string. </summary>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.Current">
      <summary>Gets the current text element in the string.</summary>
      <returns>An object containing the current text element in the string.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first text element of the string or after the last text element. </exception>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.ElementIndex">
      <summary>Gets the index of the text element that the enumerator is currently positioned over.</summary>
      <returns>The index of the text element that the enumerator is currently positioned over.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first text element of the string or after the last text element. </exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.GetTextElement">
      <summary>Gets the current text element in the string.</summary>
      <returns>A new string containing the current text element in the string being read.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first text element of the string or after the last text element. </exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.MoveNext">
      <summary>Advances the enumerator to the next text element of the string.</summary>
      <returns>true if the enumerator was successfully advanced to the next text element; false if the enumerator has passed the end of the string.</returns>
      <exception cref="T:System.InvalidOperationException">The string was modified after the enumerator was created. </exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first text element in the string.</summary>
    </member>
    <member name="T:System.Globalization.TextInfo">
      <summary>Defines properties and behaviors, such as casing, that are specific to a writing system. </summary>
    </member>
    <member name="P:System.Globalization.TextInfo.CultureName">
      <summary>Gets the name of the culture associated with the current <see cref="T:System.Globalization.TextInfo" /> object.</summary>
      <returns>The name of a culture. </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Equals(System.Object)">
      <summary>Determines whether the specified object represents the same writing system as the current <see cref="T:System.Globalization.TextInfo" /> object.</summary>
      <returns>true if <paramref name="obj" /> represents the same writing system as the current <see cref="T:System.Globalization.TextInfo" />; otherwise, false.</returns>
      <param name="obj">The object to compare with the current <see cref="T:System.Globalization.TextInfo" />. </param>
    </member>
    <member name="M:System.Globalization.TextInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Globalization.TextInfo" /> object, suitable for hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Globalization.TextInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsReadOnly">
      <summary>Gets a value indicating whether the current <see cref="T:System.Globalization.TextInfo" /> object is read-only.</summary>
      <returns>true if the current <see cref="T:System.Globalization.TextInfo" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.ListSeparator">
      <summary>Gets or sets the string that separates items in a list.</summary>
      <returns>The string that separates items in a list.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current <see cref="T:System.Globalization.TextInfo" /> object is read-only.</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.Char)">
      <summary>Converts the specified character to lowercase.</summary>
      <returns>The specified character converted to lowercase.</returns>
      <param name="c">The character to convert to lowercase. </param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.String)">
      <summary>Converts the specified string to lowercase.</summary>
      <returns>The specified string converted to lowercase.</returns>
      <param name="str">The string to convert to lowercase. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Globalization.TextInfo" />.</summary>
      <returns>A string that represents the current <see cref="T:System.Globalization.TextInfo" />.</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.Char)">
      <summary>Converts the specified character to uppercase.</summary>
      <returns>The specified character converted to uppercase.</returns>
      <param name="c">The character to convert to uppercase. </param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.String)">
      <summary>Converts the specified string to uppercase.</summary>
      <returns>The specified string converted to uppercase.</returns>
      <param name="str">The string to convert to uppercase. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="T:System.Globalization.ThaiBuddhistCalendar">
      <summary>Represents the Thai Buddhist calendar.</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months. </param>
      <param name="months">The number of months to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.-or- <paramref name="months" /> is greater than 120000. </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years. </param>
      <param name="years">The number of years to add. </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range. </exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.</summary>
      <returns>An array that consists of a single element having a value that is always the current era.</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <returns>The number of days in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetEra(System.DateTime)">
      <summary>Returns the era of a specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>An integer that represents the era of <paramref name="time" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <returns>The return value is always 0 because the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class does not support the notion of a leap month.</returns>
      <param name="year">A year.</param>
      <param name="era">An era.</param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <returns>The number of months in the specified year in the specified era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>A 1-based positive integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
      <param name="rule">One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week. </param>
      <param name="firstDayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.-or- <paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value. </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
      <param name="time">The <see cref="T:System.DateTime" /> to read. </param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <returns>true if the specified day is a leap day; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 31 that represents the day. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <returns>This method always returns false, unless overridden by a derived class.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <returns>true if the specified year is a leap year; otherwise, false.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="F:System.Globalization.ThaiBuddhistCalendar.ThaiBuddhistEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <param name="year">An integer that represents the year. </param>
      <param name="month">An integer from 1 to 12 that represents the month. </param>
      <param name="day">An integer from 1 to 31 that represents the day. </param>
      <param name="hour">An integer from 0 to 23 that represents the hour. </param>
      <param name="minute">An integer from 0 to 59 that represents the minute. </param>
      <param name="second">An integer from 0 to 59 that represents the second. </param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond. </param>
      <param name="era">An integer that represents the era. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.-or- <paramref name="month" /> is outside the range supported by the calendar.-or- <paramref name="day" /> is outside the range supported by the calendar.-or- <paramref name="hour" /> is less than zero or greater than 23.-or- <paramref name="minute" /> is less than zero or greater than 59.-or- <paramref name="second" /> is less than zero or greater than 59.-or- <paramref name="millisecond" /> is less than zero or greater than 999.-or- <paramref name="era" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <param name="year">A two-digit or four-digit integer that represents the year to convert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar. </exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the value assigned is less than 99.-or-In a set operation, the value assigned is greater than 10542.</exception>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>Defines the formatting options that customize string parsing for the <see cref="Overload:System.TimeSpan.ParseExact" /> and <see cref="Overload:System.TimeSpan.TryParseExact" /> methods.</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>Indicates that input is interpreted as a negative time interval only if a negative sign is present.</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>Indicates that input is always interpreted as a negative time interval.</summary>
    </member>
    <member name="T:System.Globalization.UmAlQuraCalendar">
      <summary>Represents the Saudi Hijri (Um Al Qura) calendar.</summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. </summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Calculates a date that is a specified number of months away from a specified initial date.</summary>
      <returns>The date yielded by adding the number of months specified by the <paramref name="months" /> parameter to the date specified by the <paramref name="time" /> parameter.</returns>
      <param name="time">The date to which to add months. The <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 05/13/2029 23:59:59 (Gregorian date).</param>
      <param name="months">The positive or negative number of months to add. </param>
      <exception cref="T:System.ArgumentException">The resulting date is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120,000 or greater than 120,000. -or-<paramref name="time" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Calculates a date that is a specified number of years away from a specified initial date.</summary>
      <returns>The date yielded by adding the number of years specified by the <paramref name="years" /> parameter to the date specified by the <paramref name="time" /> parameter.</returns>
      <param name="time">The date to which to add years. </param>
      <param name="years">The positive or negative number of years to add. </param>
      <exception cref="T:System.ArgumentException">The resulting date is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> is less than -10,000 or greater than 10,000. -or-<paramref name="time" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.Eras">
      <summary>Gets a list of the eras that are supported by the current <see cref="T:System.Globalization.UmAlQuraCalendar" />.</summary>
      <returns>An array that consists of a single element that has the value <see cref="F:System.Globalization.Calendar.CurrentEra" />.</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Calculates on which day of the month a specified date occurs.</summary>
      <returns>An integer from 1 through 30 that represents the day of the month specified by the <paramref name="time" /> parameter. </returns>
      <param name="time">The date to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Calculates on which day of the week a specified date occurs.</summary>
      <returns>The day of the week specified by the <paramref name="time" /> parameter.</returns>
      <param name="time">The date to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfYear(System.DateTime)">
      <summary>Calculates on which day of the year a specified date occurs.</summary>
      <returns>An integer from 1 through 355 that represents the day of the year specified by the <paramref name="time" /> parameter.</returns>
      <param name="time">The date to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Calculates the number of days in the specified month of the specified year and era.</summary>
      <returns>The number of days in the specified month in the specified year and era. The return value is 29 in a common year and 30 in a leap year.</returns>
      <param name="year">A year. </param>
      <param name="month">An integer from 1 through 12 that represents a month. </param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Calculates the number of days in the specified year of the specified era.</summary>
      <returns>The number of days in the specified year and era. The number of days is 354 in a common year or 355 in a leap year.</returns>
      <param name="year">A year. </param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetEra(System.DateTime)">
      <summary>Returns the era of a specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>Always returns the <see cref="F:System.Globalization.Calendar.CurrentEra" /> value.</returns>
      <param name="time">The date to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <returns>Always 0, because the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class does not support the notion of a leap month.</returns>
      <param name="year">A year.</param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1318 or greater than 1450.-or-<paramref name="era" /> is not <see cref="F:System.Globalization.Calendar.CurrentEra" />.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonth(System.DateTime)">
      <summary>Calculates the month in which a specified date occurs.</summary>
      <returns>An integer from 1 through 12 that represents the month in the date specified by the <paramref name="time" /> parameter.</returns>
      <param name="time">The date to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Calculates the number of months in the specified year of the specified era.</summary>
      <returns>Always 12.</returns>
      <param name="year">A year. </param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by this calendar. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetYear(System.DateTime)">
      <summary>Calculates the year of a date represented by a specified <see cref="T:System.DateTime" />.</summary>
      <returns>An integer that represents the year specified by the <paramref name="time" /> parameter.</returns>
      <param name="time">The date to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date is a leap day.</summary>
      <returns>Always false, because the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class does not support the notion of a leap day.</returns>
      <param name="year">A year. </param>
      <param name="month">An integer from 1 through 12 that represents a month. </param>
      <param name="day">An integer from 1 through 30 that represents a day. </param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year and era is a leap month.</summary>
      <returns>Always false, because the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class does not support the notion of a leap month.</returns>
      <param name="year">A year. </param>
      <param name="month">An integer from 1 through 12 that represents a month. </param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <returns>true if the specified year is a leap year; otherwise, false. </returns>
      <param name="year">A year. </param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class. </exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by this calendar.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class, which is equivalent to the last moment of May 13, 2029 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by this calendar.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class, which is equivalent to the first moment of April 30, 1900 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date, time, and era.</summary>
      <returns>An object that is set to the specified date and time in the current era.</returns>
      <param name="year">A year. </param>
      <param name="month">An integer from 1 through 12 that represents a month. </param>
      <param name="day">An integer from 1 through 29 that represents a day. </param>
      <param name="hour">An integer from 0 through 23 that represents an hour. </param>
      <param name="minute">An integer from 0 through 59 that represents a minute. </param>
      <param name="second">An integer from 0 through 59 that represents a second. </param>
      <param name="millisecond">An integer from 0 through 999 that represents a millisecond. </param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.-or- <paramref name="hour" /> is less than zero or greater than 23.-or- <paramref name="minute" /> is less than zero or greater than 59.-or- <paramref name="second" /> is less than zero or greater than 59.-or- <paramref name="millisecond" /> is less than zero or greater than 999. </exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <returns>If the <paramref name="year" /> parameter is a 2-digit year, the return value is the corresponding 4-digit year. If the <paramref name="year" /> parameter is a 4-digit year, the return value is the unchanged <paramref name="year" /> parameter.</returns>
      <param name="year">A 2-digit year from 0 through 99, or a 4-digit Um Al Qura calendar year from 1318 through 1450.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by this calendar. </exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.InvalidOperationException">This calendar is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the Um Al Qura calendar year value is less than 1318 but not 99, or is greater than 1450.</exception>
    </member>
    <member name="T:System.Globalization.UnicodeCategory">
      <summary>Defines the Unicode category of a character.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.UppercaseLetter">
      <summary>Indicates that the character is an uppercase letter. Signified by the Unicode designation "Lu" (letter, uppercase).</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LowercaseLetter">
      <summary>Indicates that the character is a lowercase letter. Signified by the Unicode designation "Ll" (letter, lowercase). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.TitlecaseLetter">
      <summary>Indicates that the character is a titlecase letter. Signified by the Unicode designation "Lt" (letter, titlecase). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierLetter">
      <summary>Indicates that the character is a modifier letter, which is free-standing spacing character that indicates modifications of a preceding letter. Signified by the Unicode designation "Lm" (letter, modifier). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherLetter">
      <summary>Indicates that the character is a letter that is not an uppercase letter, a lowercase letter, a titlecase letter, or a modifier letter. Signified by the Unicode designation "Lo" (letter, other).</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.NonSpacingMark">
      <summary>Indicates that the character is a nonspacing character, which indicates modifications of a base character. Signified by the Unicode designation "Mn" (mark, nonspacing). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpacingCombiningMark">
      <summary>Indicates that the character is a spacing character, which indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc" (mark, spacing combining). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.EnclosingMark">
      <summary>Indicates that the character is an enclosing mark, which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode designation "Me" (mark, enclosing). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DecimalDigitNumber">
      <summary>Indicates that the character is a decimal digit, that is, in the range 0 through 9. Signified by the Unicode designation "Nd" (number, decimal digit). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LetterNumber">
      <summary>Indicates that the character is a number represented by a letter, instead of a decimal digit, for example, the Roman numeral for five, which is "V". The indicator is signified by the Unicode designation "Nl" (number, letter). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNumber">
      <summary>Indicates that the character is a number that is neither a decimal digit nor a letter number, for example, the fraction 1/2. The indicator is signified by the Unicode designation "No" (number, other). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpaceSeparator">
      <summary>Indicates that the character is a space character, which has no glyph but is not a control or format character. Signified by the Unicode designation "Zs" (separator, space). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LineSeparator">
      <summary>Indicates that the character is used to separate lines of text. Signified by the Unicode designation "Zl" (separator, line). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ParagraphSeparator">
      <summary>Indicates that the character is used to separate paragraphs. Signified by the Unicode designation "Zp" (separator, paragraph).</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Control">
      <summary>Indicates that the character is a control code, with a Unicode value of U+007F or in the range U+0000 through U+001F or U+0080 through U+009F. Signified by the Unicode designation "Cc" (other, control). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Format">
      <summary>Indicates that the character is a format character, which is not normally rendered but affects the layout of text or the operation of text processes. Signified by the Unicode designation "Cf" (other, format). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Surrogate">
      <summary>Indicates that the character is a high surrogate or a low surrogate. Surrogate code values are in the range U+D800 through U+DFFF. Signified by the Unicode designation "Cs" (other, surrogate). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.PrivateUse">
      <summary>Indicates that the character is a private-use character, with a Unicode value in the range U+E000 through U+F8FF. Signified by the Unicode designation "Co" (other, private use). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ConnectorPunctuation">
      <summary>Indicates that the character is a connector punctuation, which connects two characters. Signified by the Unicode designation "Pc" (punctuation, connector). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DashPunctuation">
      <summary>Indicates that the character is a dash or a hyphen. Signified by the Unicode designation "Pd" (punctuation, dash). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OpenPunctuation">
      <summary>Indicates that the character is the opening character of one of the paired punctuation marks, such as parentheses, square brackets, and braces. Signified by the Unicode designation "Ps" (punctuation, open). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ClosePunctuation">
      <summary>Indicates that the character is the closing character of one of the paired punctuation marks, such as parentheses, square brackets, and braces. Signified by the Unicode designation "Pe" (punctuation, close). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation">
      <summary>Indicates that the character is an opening or initial quotation mark. Signified by the Unicode designation "Pi" (punctuation, initial quote). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation">
      <summary>Indicates that the character is a closing or final quotation mark. Signified by the Unicode designation "Pf" (punctuation, final quote). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherPunctuation">
      <summary>Indicates that the character is a punctuation that is not a connector punctuation, a dash punctuation, an open punctuation, a close punctuation, an initial quote punctuation, or a final quote punctuation. Signified by the Unicode designation "Po" (punctuation, other). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.MathSymbol">
      <summary>Indicates that the character is a mathematical symbol, such as "+" or "= ". Signified by the Unicode designation "Sm" (symbol, math). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.CurrencySymbol">
      <summary>Indicates that the character is a currency symbol. Signified by the Unicode designation "Sc" (symbol, currency). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierSymbol">
      <summary>Indicates that the character is a modifier symbol, which indicates modifications of surrounding characters. For example, the fraction slash indicates that the number to the left is the numerator and the number to the right is the denominator. The indicator is signified by the Unicode designation "Sk" (symbol, modifier). </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherSymbol">
      <summary>Indicates that the character is a symbol that is not a mathematical symbol, a currency symbol or a modifier symbol. Signified by the Unicode designation "So" (symbol, other).</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNotAssigned">
      <summary>Indicates that the character is not assigned to any Unicode category. Signified by the Unicode designation "Cn" (other, not assigned).</summary>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>Reads primitive data types as binary values in a specific encoding.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryReader" /> class based on the supplied stream and using <see cref="T:System.Text.UTF8Encoding" />.</summary>
      <param name="input">A stream. </param>
      <exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryReader" /> class based on the supplied stream and a specific character encoding.</summary>
      <param name="input">The supplied stream. </param>
      <param name="encoding">The character encoding. </param>
      <exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> is null. </exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>Exposes access to the underlying stream of the <see cref="T:System.IO.BinaryReader" />.</summary>
      <returns>The underlying stream associated with the BinaryReader.</returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>Closes the current reader and the underlying stream.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.IO.BinaryReader" /> class.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>Called by the <see cref="M:System.IO.BinaryReader.Dispose" /> method and finalizer to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.IO.BinaryReader" /> class.</summary>
      <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>Fills the internal buffer with the specified number of bytes read from the stream.</summary>
      <param name="numBytes">The number of bytes to be read. </param>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached before <paramref name="numBytes" /> could be read. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Requested <paramref name="numBytes" /> is larger than the internal buffer size.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>Returns the next available character and does not advance the byte or character position.</summary>
      <returns>The next available character, or -1 if no more characters are available or the stream does not support seeking.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>Reads characters from the underlying stream and advances the current position of the stream in accordance with the Encoding used and the specific character being read from the stream.</summary>
      <returns>The next character from the input stream, or -1 if no characters are currently available.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads <paramref name="count" /> bytes from the stream with <paramref name="index" /> as the starting point in the byte array.</summary>
      <returns>The number of characters read into <paramref name="buffer" />. This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.</returns>
      <param name="buffer">The buffer to read data into. </param>
      <param name="index">The starting point in the buffer at which to begin reading into the buffer. </param>
      <param name="count">The number of characters to read. </param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads <paramref name="count" /> characters from the stream with <paramref name="index" /> as the starting point in the character array.</summary>
      <returns>The total number of characters read into the buffer. This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</returns>
      <param name="buffer">The buffer to read data into. </param>
      <param name="index">The starting point in the buffer at which to begin reading into the buffer. </param>
      <param name="count">The number of characters to read. </param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>Reads in a 32-bit integer in compressed format.</summary>
      <returns>A 32-bit integer in compressed format.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The stream is corrupted.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>Reads a Boolean value from the current stream and advances the current position of the stream by one byte.</summary>
      <returns>true if the byte is nonzero; otherwise, false.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>Reads the next byte from the current stream and advances the current position of the stream by one byte.</summary>
      <returns>The next byte read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>Reads <paramref name="count" /> bytes from the current stream into a byte array and advances the current position by <paramref name="count" /> bytes.</summary>
      <returns>A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached.</returns>
      <param name="count">The number of bytes to read. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>Reads the next character from the current stream and advances the current position of the stream in accordance with the Encoding used and the specific character being read from the stream.</summary>
      <returns>A character read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ArgumentException">A surrogate character was read. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>Reads <paramref name="count" /> characters from the current stream, returns the data in a character array, and advances the current position in accordance with the Encoding used and the specific character being read from the stream.</summary>
      <returns>A character array containing data read from the underlying stream. This might be less than the number of characters requested if the end of the stream is reached.</returns>
      <param name="count">The number of characters to read. </param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.</summary>
      <returns>An 8-byte floating point value read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.</summary>
      <returns>A 2-byte signed integer read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.</summary>
      <returns>A 4-byte signed integer read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.</summary>
      <returns>An 8-byte signed integer read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>Reads a signed byte from this stream and advances the current position of the stream by one byte.</summary>
      <returns>A signed byte read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.</summary>
      <returns>A 4-byte floating point value read from the current stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.</summary>
      <returns>The string being read.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.</summary>
      <returns>A 2-byte unsigned integer read from this stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.</summary>
      <returns>A 4-byte unsigned integer read from this stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.</summary>
      <returns>An 8-byte unsigned integer read from this stream.</returns>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>Writes primitive types in binary to a stream and supports writing strings in a specific encoding.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class that writes to a stream.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the supplied stream and using UTF-8 as the encoding for strings.</summary>
      <param name="output">The output stream. </param>
      <exception cref="T:System.ArgumentException">The stream does not support writing, or the stream is already closed. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> is null. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the supplied stream and a specific character encoding.</summary>
      <param name="output">The supplied stream. </param>
      <param name="encoding">The character encoding. </param>
      <exception cref="T:System.ArgumentException">The stream does not support writing, or the stream is already closed. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> or <paramref name="encoding" /> is null. </exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>Gets the underlying stream of the <see cref="T:System.IO.BinaryWriter" />.</summary>
      <returns>The underlying stream associated with the BinaryWriter.</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>Closes the current <see cref="T:System.IO.BinaryWriter" /> and the underlying stream.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.IO.BinaryWriter" /> class.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>Called by the <see cref="M:System.IO.BinaryWriter.Dispose" /> method and finalizer to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.IO.BinaryWriter" /> class.</summary>
      <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>Specifies a <see cref="T:System.IO.BinaryWriter" /> with no backing store.</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>Holds the underlying stream.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>Sets the position within the current stream.</summary>
      <returns>The position with the current stream.</returns>
      <param name="offset">A byte offset relative to <paramref name="origin" />. </param>
      <param name="origin">A field of <see cref="T:System.IO.SeekOrigin" /> indicating the reference point from which the new position is to be obtained. </param>
      <exception cref="T:System.IO.IOException">The file pointer was moved to an invalid location. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.IO.SeekOrigin" /> value is invalid. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>Writes a one-byte Boolean value to the current stream, with 0 representing false and 1 representing true.</summary>
      <param name="value">The Boolean value to write (0 or 1). </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>Writes an unsigned byte to the current stream and advances the stream position by one byte.</summary>
      <param name="value">The unsigned byte to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>Writes a byte array to the underlying stream.</summary>
      <param name="buffer">A byte array containing the data to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a region of a byte array to the current stream.</summary>
      <param name="buffer">A byte array containing the data to write. </param>
      <param name="index">The starting point in <paramref name="buffer" /> at which to begin writing. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the Encoding used and the specific characters being written to the stream.</summary>
      <param name="ch">The non-surrogate, Unicode character to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" /> is a single surrogate character.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>Writes a character array to the current stream and advances the current position of the stream in accordance with the Encoding used and the specific characters being written to the stream.</summary>
      <param name="chars">A character array containing the data to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the Encoding used and perhaps the specific characters being written to the stream.</summary>
      <param name="chars">A character array containing the data to write. </param>
      <param name="index">The starting point in <paramref name="buffer" /> from which to begin writing. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.</summary>
      <param name="value">The eight-byte floating-point value to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</summary>
      <param name="value">The two-byte signed integer to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</summary>
      <param name="value">The four-byte signed integer to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</summary>
      <param name="value">The eight-byte unsigned integer to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>Writes a signed byte to the current stream and advances the stream position by one byte.</summary>
      <param name="value">The signed byte to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.</summary>
      <param name="value">The four-byte floating-point value to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>Writes a length-prefixed string to this stream in the current encoding of the <see cref="T:System.IO.BinaryWriter" />, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.</summary>
      <param name="value">The value to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</summary>
      <param name="value">The two-byte unsigned integer to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</summary>
      <param name="value">The four-byte unsigned integer to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</summary>
      <param name="value">The eight-byte unsigned integer to write. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>Writes a 32-bit integer in a compressed format.</summary>
      <param name="value">The 32-bit integer to be written. </param>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed. </exception>
    </member>
    <member name="T:System.IO.Directory">
      <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IO.Directory.CreateDirectory(System.String)">
      <summary>When it is called by trusted applications, creates all directories and subdirectories as specified by <paramref name="path" />.</summary>
      <returns>A <see cref="T:System.IO.DirectoryInfo" /> as specified by <paramref name="path" />.</returns>
      <param name="path">The directory path to create. </param>
      <exception cref="T:System.IO.IOException">The directory specified by <paramref name="path" /> is read-only.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters.-or-<paramref name="path" /> is prefixed with, or contains only a colon character (:).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String)">
      <summary>When it is called by trusted applications, deletes an empty directory from a specified path.</summary>
      <param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param>
      <exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path" /> exists.-or-The directory is the application's current working directory.-or-The directory specified by <paramref name="path" /> is not empty.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path does not exist or could not be found.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String,System.Boolean)">
      <summary>When it is called by trusted applications, deletes the specified directory and, if indicated, any subdirectories and files in the directory.</summary>
      <param name="path">The name of the directory to remove. </param>
      <param name="recursive">true to remove directories, subdirectories, and files in <paramref name="path" />; otherwise, false. </param>
      <exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path" /> exists.-or-The directory specified by <paramref name="path" /> is read-only, or <paramref name="recursive" /> is false and <paramref name="path" /> is not an empty directory.-or-The directory is the application's current working directory. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path does not exist or could not be found.-or-The specified path is invalid (for example, it is on an unmapped drive). </exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateDirectories(System.String)">
      <summary>When it is called by trusted applications, returns an enumerable collection of directory names in a specified path.</summary>
      <returns>An enumerable collection of directory names in the directory specified by <paramref name="path" />.</returns>
      <param name="path">The directory to search.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)">
      <summary>When it is called by trusted applications, returns an enumerable collection of directory names that match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of directory names in the directory specified by <paramref name="path" /> and that match <paramref name="searchPattern" />.</returns>
      <param name="path">The directory to search.</param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
      <summary>When it is called by trusted applications, returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of directory names in the directory specified by <paramref name="path" /> and that match <paramref name="searchPattern " />and <paramref name="searchOption" />.</returns>
      <param name="path">The directory to search. </param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  </param>
      <param name="searchOption">One of the values of the <see cref="T:System.IO.SearchOption" /> enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFiles(System.String)">
      <summary>When it is called by trusted applications, returns an enumerable collection of file names in a specified path.</summary>
      <returns>An enumerable collection of file names in the directory specified by <paramref name="path" />.</returns>
      <param name="path">The directory to search. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFiles(System.String,System.String)">
      <summary>When it is called by trusted applications, returns an enumerable collection of file names that match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of file names in the directory specified by <paramref name="path" /> and that match <paramref name="searchPattern" />.</returns>
      <param name="path">The directory to search. </param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
      <summary>When it is called by trusted applications, returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of file names in the directory specified by <paramref name="path" /> and that match <paramref name="searchPattern " />and <paramref name="searchOption" />.</returns>
      <param name="path">The directory to search. </param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  </param>
      <param name="searchOption">One of the values of the <see cref="T:System.IO.SearchOption" /> enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)">
      <summary>When it is called by trusted applications, returns an enumerable collection of file-system entries in a specified path.</summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" />.</returns>
      <param name="path">The directory to search. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)">
      <summary>When it is called by trusted applications, returns an enumerable collection of file-system entries that match a search pattern in a specified path.</summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" /> and that match <paramref name="searchPattern" />.</returns>
      <param name="path">The directory to search. </param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
      <summary>When it is called by trusted applications, returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
      <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" /> and that match <paramref name="searchPattern " />and <paramref name="searchOption" />.</returns>
      <param name="path">The directory to search. </param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  </param>
      <param name="searchOption">One of the values of the <see cref="T:System.IO.SearchOption" /> enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.- or -<paramref name="searchPattern" /> does not contain a valid pattern.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.-or-<paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid, such as referring to an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> is a file name.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.Directory.Exists(System.String)">
      <summary>When it is called by trusted applications, determines whether the given path refers to an existing directory on disk.</summary>
      <returns>true if <paramref name="path" /> refers to an existing directory; otherwise, false.</returns>
      <param name="path">The path to test. </param>
    </member>
    <member name="M:System.IO.Directory.GetCreationTime(System.String)">
      <summary>When it is called by trusted applications, gets the creation date and time of a directory.</summary>
      <returns>A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
      <param name="path">The path of the directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.IO.Directory.GetCurrentDirectory">
      <summary>When it is called by an elevated-trust application, gets the current working directory of the application.</summary>
      <returns>A string containing the path of the current working directory.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception>
    </member>
    <member name="M:System.IO.Directory.GetDirectoryRoot(System.String)">
      <summary>When it is called by an elevated-trust application, returns the volume information, root information, or both for the specified path.</summary>
      <returns>A string containing the volume information, root information, or both for the specified path.</returns>
      <param name="path">The path of a file or directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.IO.Directory.GetLastAccessTime(System.String)">
      <summary>When it is called by trusted applications, returns the date and time the specified file or directory was last accessed.</summary>
      <returns>A <see cref="T:System.DateTime" /> structure set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="path" /> parameter is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.Directory.GetLastWriteTime(System.String)">
      <summary>When it is called by trusted applications, returns the date and time the specified file or directory was last written to.</summary>
      <returns>A <see cref="T:System.DateTime" /> structure set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain modification date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.IO.Directory.Move(System.String,System.String)">
      <summary>When it is called by trusted applications, moves a file or a directory and its contents to a new location.</summary>
      <param name="sourceDirName">The path of the file or directory to move. </param>
      <param name="destDirName">The path to the new location for <paramref name="sourceDirName" />. If <paramref name="sourceDirName" /> is a file, then <paramref name="destDirName" /> must also be a file name.</param>
      <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or- <paramref name="destDirName" /> already exists. -or- The <paramref name="sourceDirName" /> and <paramref name="destDirName" /> parameters refer to the same file or directory. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceDirName" /> or <paramref name="destDirName" /> is a zero-length string, contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirName" /> or <paramref name="destDirName" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceDirName" /> is invalid (for example, it is on an unmapped drive). </exception>
    </member>
    <member name="M:System.IO.Directory.SetCurrentDirectory(System.String)">
      <summary>[SECURITY CRITICAL] Sets the application's current working directory to the specified directory.</summary>
      <param name="path">The path to which the current working directory is set. </param>
    </member>
    <member name="T:System.IO.DirectoryInfo">
      <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IO.DirectoryInfo.#ctor(System.String)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.DirectoryInfo" /> class. .</summary>
      <param name="path">A string specifying the path on which to create the DirectoryInfo. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains invalid characters such as ", &lt;, &gt;, or |. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.Create">
      <summary>When it is called by trusted applications, creates a directory.</summary>
      <exception cref="T:System.IO.IOException">The directory cannot be created. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)">
      <summary>When it is called by trusted applications, creates a subdirectory or subdirectories on the specified path. </summary>
      <returns>The last directory specified in <paramref name="path" />.</returns>
      <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> does not specify a valid file path or contains invalid DirectoryInfo characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The subdirectory cannot be created.-or- A file or directory already has the name specified by <paramref name="path" />. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.-or-The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo" /> object.  This can occur when the <paramref name="path" /> parameter describes an existing directory.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.Delete">
      <summary>When it is called by trusted applications, deletes this <see cref="T:System.IO.DirectoryInfo" /> if it is empty.</summary>
      <exception cref="T:System.IO.IOException">The directory is not empty. -or-The directory is the application's current working directory.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory described by this <see cref="T:System.IO.DirectoryInfo" /> object does not exist or could not be found.</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.Delete(System.Boolean)">
      <summary>When it is called by trusted applications, deletes this instance of a <see cref="T:System.IO.DirectoryInfo" />, specifying whether to delete subdirectories and files.</summary>
      <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false. </param>
      <exception cref="T:System.IO.IOException">The directory is read-only.-or- The directory contains one or more files or subdirectories and <paramref name="recursive" /> is false.-or-The directory is the application's current working directory. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateDirectories">
      <summary>When it is called by trusted applications, returns an enumerable collection of directory information in the current directory.</summary>
      <returns>An enumerable collection of directories in the current directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String)">
      <summary>When it is called by trusted applications, returns an enumerable collection of directory information that matches a specified search pattern.</summary>
      <returns>An enumerable collection of directories that matches <paramref name="searchPattern" />.</returns>
      <param name="searchPattern">The search string. The default pattern is "*", which returns all directories. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)">
      <summary>When it is called by trusted applications, returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option. </summary>
      <returns>An enumerable collection of directories that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns>
      <param name="searchPattern">The search string. The default pattern is "*", which returns all directories.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFiles">
      <summary>When it is called by trusted applications, returns an enumerable collection of file information in the current directory.</summary>
      <returns>An enumerable collection of the files in the current directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.FileInfo" /> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFiles(System.String)">
      <summary>When it is called by trusted applications, returns an enumerable collection of file information that matches a search pattern.</summary>
      <returns>An enumerable collection of files that matches <paramref name="searchPattern" />.</returns>
      <param name="searchPattern">The search string. The default pattern is "*", which returns all files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.FileInfo" /> object is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
      <summary>When it is called by trusted applications, returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</summary>
      <returns>An enumerable collection of files that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns>
      <param name="searchPattern">The search string. The default pattern is "*", which returns all files.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.FileInfo" /> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos">
      <summary>When it is called by an elevated-trust application, returns an enumerable collection of file system information in the current directory.</summary>
      <returns>An enumerable collection of file system information in the current directory. </returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.FileSystemInfo" /> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)">
      <summary>When it is called by trusted applications, returns an enumerable collection of file system information that matches a specified search pattern.</summary>
      <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern" />.</returns>
      <param name="searchPattern">The search string. The default pattern is "*", which returns all files and directories.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.FileSystemInfo" /> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
      <summary>When it is called by trusted applications, returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</summary>
      <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns>
      <param name="searchPattern">The search string. The default pattern is "*", which returns all files or directories.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.FileSystemInfo" /> object is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:System.IO.DirectoryInfo.Exists">
      <summary>Gets a value indicating whether the directory exists.</summary>
      <returns>true if the directory exists; otherwise, false.</returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.MoveTo(System.String)">
      <summary>When it is called by trusted applications, moves a <see cref="T:System.IO.DirectoryInfo" /> instance and its contents to a new path.</summary>
      <param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destDirName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destDirName" /> is an empty string (''"). </exception>
      <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or-<paramref name="destDirName" /> already exists.-or-You are not authorized to access this path.-or- The directory being moved and the destination directory have the same name.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The destination directory cannot be found.</exception>
    </member>
    <member name="P:System.IO.DirectoryInfo.Name">
      <summary>Gets the name of this <see cref="T:System.IO.DirectoryInfo" /> instance.</summary>
      <returns>The directory name.</returns>
    </member>
    <member name="P:System.IO.DirectoryInfo.Parent">
      <summary>When it is called by an elevated-trust application, gets the parent directory of a specified subdirectory.</summary>
      <returns>The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:System.IO.DirectoryInfo.Root">
      <summary>When it is called by an elevated-trust application, gets the root portion of a path.</summary>
      <returns>A <see cref="T:System.IO.DirectoryInfo" /> object representing the root of a path.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.ToString">
      <summary>Returns the original path that was passed by the user.</summary>
      <returns>Returns the original path that was passed by the user.</returns>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>The exception that is thrown when part of a file or directory cannot be found.</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class.</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with its message string set to <paramref name="message" />.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>The exception that is thrown when reading is attempted past the end of a stream.</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException" /> class with its message string set to a system-supplied message.</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException" /> class with its message string set to <paramref name="message" /> and its HRESULT set to COR_E_ENDOFSTREAM.</summary>
      <param name="message">A string that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A string that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.IO.File">
      <summary>Provides static methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects.</summary>
    </member>
    <member name="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>When called by a trusted application, appends lines to a file, and then closes the file.</summary>
      <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
      <param name="contents">The lines to append to the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path " />or <paramref name="contents" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission to write to the file.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path" /> is a directory.-or-The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
      <summary>When it is called by a trusted application, appends lines to a file by using a specified encoding, and then closes the file.</summary>
      <param name="path">The file to append the lines to.</param>
      <param name="contents">The lines to append to the file.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path" />, <paramref name="contents" />, or <paramref name="encoding" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path" /> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.File.AppendAllText(System.String,System.String)">
      <summary>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</summary>
      <param name="path">The file to append the specified string to. </param>
      <param name="contents">The string to append to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)">
      <summary>Appends the specified string to the file, creating the file if it does not already exist.</summary>
      <param name="path">The file to append the specified string to. </param>
      <param name="contents">The string to append to the file. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.File.AppendText(System.String)">
      <summary>When it is called by trusted applications, creates a <see cref="T:System.IO.StreamWriter" /> that appends UTF-8 encoded text to an existing file.</summary>
      <returns>A StreamWriter that appends UTF-8 encoded text to an existing file.</returns>
      <param name="path">The path to the file to append to. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.Copy(System.String,System.String)">
      <summary>When it is called by trusted applications, copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary>
      <param name="sourceFileName">The file to copy. </param>
      <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.-or- <paramref name="sourceFileName" /> or <paramref name="destFileName" /> specifies a directory. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName" /> was not found. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="destFileName" /> exists.-or- An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.Copy(System.String,System.String,System.Boolean)">
      <summary>When it is called by trusted applications, copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary>
      <param name="sourceFileName">The file to copy. </param>
      <param name="destFileName">The name of the destination file. This cannot be a directory. </param>
      <param name="overwrite">true if the destination file can be overwritten; otherwise, false. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.-or- <paramref name="sourceFileName" /> or <paramref name="destFileName" /> specifies a directory. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName" /> was not found. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="destFileName" /> is read-only, or <paramref name="destFileName" /> exists and <paramref name="overwrite" /> is false.-or- An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.Create(System.String)">
      <summary>When it is called by trusted applications, creates or overwrites a file in the specified path.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> that provides read/write access to the file specified in <paramref name="path" />.</returns>
      <param name="path">The path and name of the file to create. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path" /> specified a file that is read-only. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.Create(System.String,System.Int32)">
      <summary>When it is called by a trusted application, creates or overwrites the specified file.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> with the specified buffer size that provides read/write access to the file specified in <paramref name="path" />.</returns>
      <param name="path">The name of the file. </param>
      <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path" /> specified a file that is read-only. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.CreateText(System.String)">
      <summary>When it is called by a trusted application, creates or opens a file for writing UTF-8 encoded text.</summary>
      <returns>A <see cref="T:System.IO.StreamWriter" /> that writes to the specified file using UTF-8 encoding.</returns>
      <param name="path">The file to be opened for writing. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.Delete(System.String)">
      <summary>Deletes the specified file. An exception is not thrown if the specified file does not exist.</summary>
      <param name="path">The name of the file to be deleted. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">The specified file is in use. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path" /> is a directory.-or- <paramref name="path" /> specified a read-only file. </exception>
    </member>
    <member name="M:System.IO.File.Exists(System.String)">
      <summary>Determines whether the specified file exists.</summary>
      <returns>true if the caller has the required permissions and <paramref name="path" /> contains the name of an existing file; otherwise, false. This method also returns false if <paramref name="path" /> is null, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of <paramref name="path" />.</returns>
      <param name="path">The file to check. </param>
    </member>
    <member name="M:System.IO.File.GetAttributes(System.String)">
      <summary>Gets the <see cref="T:System.IO.FileAttributes" /> of the file on the path.</summary>
      <returns>The <see cref="T:System.IO.FileAttributes" /> of the file on the path.</returns>
      <param name="path">The path to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="path" /> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</exception>
    </member>
    <member name="M:System.IO.File.GetCreationTime(System.String)">
      <summary>When it is called by a trusted application, returns the creation date and time of the specified file or directory.</summary>
      <returns>A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain creation date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.GetLastAccessTime(System.String)">
      <summary>When it is called by a trusted application, returns the date and time the specified file or directory was last accessed.</summary>
      <returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain access date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.GetLastWriteTime(System.String)">
      <summary>When it is called by a trusted application, returns the date and time the specified file or directory was last written to.</summary>
      <returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
      <param name="path">The file or directory for which to obtain write date and time information. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.Move(System.String,System.String)">
      <summary>When it is called by a trusted application, moves a specified file to a new location, providing the option to specify a new file name.</summary>
      <param name="sourceFileName">The name of the file to move. </param>
      <param name="destFileName">The new path for the file. </param>
      <exception cref="T:System.IO.IOException">The destination file already exists. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName" /> was not found. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode)">
      <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path with read/write access.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> opened in the specified mode and path, with read/write access and not shared.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>When it is called by a trusted application, opens a <see cref="T:System.IO.FileStream" /> on the specified path, with the specified mode and access.</summary>
      <returns>An unshared <see cref="T:System.IO.FileStream" /> that provides access to the specified file, with the specified mode and access.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.-or- <paramref name="access" /> specified Read and <paramref name="mode" /> specified Create, CreateNew, Truncate, or Append. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only and <paramref name="access" /> is not Read.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> or <paramref name="access" /> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>When it is called by a trusted application, opens a <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
      <param name="path">The file to open. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file. </param>
      <param name="share">A <see cref="T:System.IO.FileShare" /> value specifying the type of access other threads have to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.-or- <paramref name="access" /> specified Read and <paramref name="mode" /> specified Create, CreateNew, Truncate, or Append. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only and <paramref name="access" /> is not Read.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> specified an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.OpenRead(System.String)">
      <summary>When it is called by a trusted application, opens an existing file for reading.</summary>
      <returns>A read-only <see cref="T:System.IO.FileStream" /> on the specified path.</returns>
      <param name="path">The file to be opened for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.OpenText(System.String)">
      <summary>When it is called by a trusted application, opens an existing UTF-8 encoded text file for reading.</summary>
      <returns>A <see cref="T:System.IO.StreamReader" /> on the specified path.</returns>
      <param name="path">The file to be opened for reading. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.OpenWrite(System.String)">
      <summary>When it is called by a trusted application, opens an existing file for writing.</summary>
      <returns>An unshared <see cref="T:System.IO.FileStream" /> object on the specified path with <see cref="F:System.IO.FileAccess.Write" /> access.</returns>
      <param name="path">The file to be opened for writing. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.-or- <paramref name="path" /> specified a read-only file or directory. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.IO.File.ReadAllBytes(System.String)">
      <summary>When it is called by a trusted application, opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
      <returns>A byte array containing the contents of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.File.ReadAllText(System.String)">
      <summary>When it is called by a trusted application, opens a text file, reads all lines of the file, and then closes the file.</summary>
      <returns>A string containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)">
      <summary>When it is called by a trusted application, opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
      <returns>A string containing all lines of the file.</returns>
      <param name="path">The file to open for reading. </param>
      <param name="encoding">The encoding applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.File.ReadLines(System.String)">
      <summary>When it is called by a trusted application, reads the lines of a file.</summary>
      <returns>The lines of the file.</returns>
      <param name="path">The file to read.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path" /> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.File.ReadLines(System.String,System.Text.Encoding)">
      <summary>When it is called by a trusted application, read the lines of a file that has a specified encoding.</summary>
      <returns>The lines of the file.</returns>
      <param name="path">The file to read.</param>
      <param name="encoding">The encoding that is applied to the contents of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path" /> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)">
      <summary>[SECURITY CRITICAL] Sets the specified <see cref="T:System.IO.FileAttributes" /> of the file on the specified path.</summary>
      <param name="path">The path to the file. </param>
      <param name="fileAttributes">A bitwise combination of the enumeration values. </param>
    </member>
    <member name="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])">
      <summary>When it is called by a trusted application, creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
      <param name="path">The file to write to. </param>
      <param name="bytes">The bytes to write to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null or the byte array is empty. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>When it is called by a trusted application, creates a new file, writes a collection of strings to the file, and then closes the file.</summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The lines to write to the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path " />or <paramref name="contents" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path" /> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
      <summary>When it is called by a trusted application, creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
      <param name="path">The file to write to.</param>
      <param name="contents">The lines to write to the file.</param>
      <param name="encoding">The character encoding to use.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">Either<paramref name=" path" />,<paramref name=" contents" />, or <paramref name="encoding" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specifies a file that is read-only.-or-This operation is not supported on the current platform.-or-<paramref name="path" /> is a directory.-or-The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.File.WriteAllText(System.String,System.String)">
      <summary>When it is called by a trusted application, creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
      <param name="path">The file to write to. </param>
      <param name="contents">The string to write to the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)">
      <summary>When it is called by a trusted application, creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary>
      <param name="path">The file to write to. </param>
      <param name="contents">The string to write to the file. </param>
      <param name="encoding">An <see cref="T:System.Text.Encoding" /> object that represents the encoding to apply to the string.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null or contents string is empty. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="T:System.IO.FileAccess">
      <summary>Defines constants for read, write, or read/write access to a file.</summary>
    </member>
    <member name="F:System.IO.FileAccess.Read">
      <summary>Read access to the file. Data can be read from the file. Combine with Write for read/write access.</summary>
    </member>
    <member name="F:System.IO.FileAccess.Write">
      <summary>Write access to the file. Data can be written to the file. Combine with Read for read/write access.</summary>
    </member>
    <member name="F:System.IO.FileAccess.ReadWrite">
      <summary>Read and write access to the file. Data can be written to and read from the file.</summary>
    </member>
    <member name="T:System.IO.FileAttributes">
      <summary>Provides attributes for files and directories.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReadOnly">
      <summary>The file is read-only.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Hidden">
      <summary>The file is hidden, and thus is not included in an ordinary directory listing.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.System">
      <summary>The file is a system file. The file is part of the operating system or is used exclusively by the operating system.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Directory">
      <summary>The file is a directory.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Archive">
      <summary>The file's archive status. Applications use this attribute to mark files for backup or removal.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Device">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Normal">
      <summary>The file is normal and has no other attributes set. This attribute is valid only if used alone.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Temporary">
      <summary>The file is temporary. File systems attempt to keep all of the data in memory for quicker access rather than flushing the data back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.SparseFile">
      <summary>The file is a sparse file. Sparse files are typically large files whose data are mostly zeros.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReparsePoint">
      <summary>The file contains a reparse point, which is a block of user-defined data associated with a file or a directory.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Compressed">
      <summary>The file is compressed.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Offline">
      <summary>The file is offline. The data of the file is not immediately available.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.NotContentIndexed">
      <summary>The file will not be indexed by the operating system's content indexing service.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Encrypted">
      <summary>The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and directories.</summary>
    </member>
    <member name="T:System.IO.FileInfo">
      <summary>Provides instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IO.FileInfo.#ctor(System.String)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.FileInfo" /> class, which acts as a wrapper for a file path.</summary>
      <param name="fileName">The fully qualified name of the new file, or the relative file name. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to <paramref name="fileName" /> is denied. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="fileName" /> contains a colon (:) in the middle of the string. </exception>
    </member>
    <member name="M:System.IO.FileInfo.AppendText">
      <summary>When it is called by trusted applications, creates a <see cref="T:System.IO.StreamWriter" /> that appends text to the file represented by this instance of the <see cref="T:System.IO.FileInfo" />.</summary>
      <returns>A new StreamWriter.</returns>
    </member>
    <member name="M:System.IO.FileInfo.CopyTo(System.String)">
      <summary>When it is called by trusted applications, copies an existing file to a new file, disallowing the overwriting of an existing file.</summary>
      <returns>A new file with a fully qualified path.</returns>
      <param name="destFileName">The name of the new file to copy to. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName" /> is null. </exception>
      <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName" /> does not exist.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName" /> contains a colon (:) in the middle of the string. </exception>
    </member>
    <member name="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)">
      <summary>When it is called by trusted applications, copies an existing file to a new file, allowing the overwriting of an existing file.</summary>
      <returns>A new file, or an overwrite of an existing file if <paramref name="overwrite" /> is true. If the file exists and <paramref name="overwrite" /> is false, an <see cref="T:System.IO.IOException" /> is thrown.</returns>
      <param name="destFileName">The name of the new file to copy to. </param>
      <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists and <paramref name="overwrite" /> is false. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName" /> does not exist.</exception>
      <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName" /> contains a colon (:) in the middle of the string. </exception>
    </member>
    <member name="M:System.IO.FileInfo.Create">
      <summary>When it is called by trusted applications, creates a file.</summary>
      <returns>A new file.</returns>
    </member>
    <member name="M:System.IO.FileInfo.CreateText">
      <summary>When it is called by trusted applications, creates a <see cref="T:System.IO.StreamWriter" /> that writes a new text file.</summary>
      <returns>A new StreamWriter.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The file name is a directory. </exception>
      <exception cref="T:System.IO.IOException">The disk is read-only. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.FileInfo.Delete">
      <summary>When it is called by trusted applications, permanently deletes a file.</summary>
      <exception cref="T:System.IO.IOException">The target file is open or memory-mapped on a computer running Microsoft Windows NT. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The path is a directory. </exception>
    </member>
    <member name="P:System.IO.FileInfo.Directory">
      <summary>When it is called by trusted applications, gets an instance of the parent directory.</summary>
      <returns>A <see cref="T:System.IO.DirectoryInfo" /> object representing the parent directory of this file.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:System.IO.FileInfo.DirectoryName">
      <summary>When it is called by trusted applications, gets a string representing the directory's full path.</summary>
      <returns>A string representing the directory's full path.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentNullException">null was passed in for the directory name. </exception>
    </member>
    <member name="P:System.IO.FileInfo.Exists">
      <summary>When it is called by trusted applications, gets a value indicating whether a file exists.</summary>
      <returns>true if the file exists; false if the file does not exist or if the file is a directory.</returns>
    </member>
    <member name="P:System.IO.FileInfo.Length">
      <summary>When it is called by trusted applications, gets the size, in bytes, of the current file.</summary>
      <returns>The size of the current file in bytes.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot update the state of the file or directory. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.-or- The Length property is called for a directory. </exception>
    </member>
    <member name="M:System.IO.FileInfo.MoveTo(System.String)">
      <summary>When it is called by trusted applications, moves a specified file to a new location, providing the option to specify a new file name.</summary>
      <param name="destFileName">The path to move the file to, which can specify a different file name. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="destFileName" /> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName" /> contains a colon (:) in the middle of the string. </exception>
    </member>
    <member name="P:System.IO.FileInfo.Name">
      <summary>When it is called by trusted applications, gets the name of the file.</summary>
      <returns>The name of the file.</returns>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode)">
      <summary>When it is called by trusted applications, opens a file in the specified mode.</summary>
      <returns>A file opened in the specified mode, with read/write access and unshared.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The file is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
      <summary>When it is called by trusted applications, opens a file in the specified mode with read, write, or read/write access.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> object opened in the specified mode and access, and unshared.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty or contains only white spaces. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.ArgumentNullException">One or more arguments is null. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>When it is called by trusted applications, opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> object opened with the specified mode, access, and sharing options.</returns>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
      <param name="share">A <see cref="T:System.IO.FileShare" /> constant specifying the type of access other FileStream objects have to this file. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty or contains only white spaces. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.ArgumentNullException">One or more arguments is null. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenRead">
      <summary>When it is called by trusted applications, creates a read-only <see cref="T:System.IO.FileStream" />.</summary>
      <returns>A new read-only <see cref="T:System.IO.FileStream" /> object.</returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">The file is already open. </exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenText">
      <summary>When it is called by trusted applications, creates a <see cref="T:System.IO.StreamReader" /> with UTF8 encoding that reads from an existing text file.</summary>
      <returns>A new StreamReader with UTF8 encoding.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenWrite">
      <summary>When it is called by an elevated-trust application, creates a write-only <see cref="T:System.IO.FileStream" />.</summary>
      <returns>A new write-only unshared <see cref="T:System.IO.FileStream" /> object.</returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> is read-only or is a directory. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
    </member>
    <member name="M:System.IO.FileInfo.ToString">
      <summary>Returns the path as a string.</summary>
      <returns>A string representing the path.</returns>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>The exception that is thrown when a managed assembly is found but cannot be loaded.</summary>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>Gets the error message and the name of the file that caused this exception.</summary>
      <returns>A string containing the error message and the name of the file that caused this exception.</returns>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>Returns the fully qualified name of the current exception, and possibly the error message, the name of the inner exception, and the stack trace.</summary>
      <returns>A string containing the fully qualified name of this exception, and possibly the error message, the name of the inner exception, and the stack trace, depending on which <see cref="T:System.IO.FileLoadException" /> constructor is used.</returns>
    </member>
    <member name="T:System.IO.FileMode">
      <summary>Specifies how the operating system should open a file.</summary>
    </member>
    <member name="F:System.IO.FileMode.CreateNew">
      <summary>Specifies that the operating system should create a new file. </summary>
    </member>
    <member name="F:System.IO.FileMode.Create">
      <summary>Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. <see cref="F:System.IO.FileMode.Create" /> is equivalent to requesting that if the file does not exist, use <see cref="F:System.IO.FileMode.CreateNew" />; otherwise, use <see cref="F:System.IO.FileMode.Truncate" />.</summary>
    </member>
    <member name="F:System.IO.FileMode.Open">
      <summary>Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by <see cref="T:System.IO.FileAccess" />. A <see cref="T:System.IO.FileNotFoundException" /> is thrown if the file does not exist.</summary>
    </member>
    <member name="F:System.IO.FileMode.OpenOrCreate">
      <summary>Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. </summary>
    </member>
    <member name="F:System.IO.FileMode.Truncate">
      <summary>Specifies that the operating system should open an existing file. Once opened, the file should be truncated so that its size is zero bytes. </summary>
    </member>
    <member name="F:System.IO.FileMode.Append">
      <summary>Opens the file if it exists and seeks to the end of the file, or creates a new file. <see cref="F:System.IO.FileMode.Append" /> can only be used in conjunction with <see cref="F:System.IO.FileAccess.Write" />. Attempting to seek to a position before the end of the file will throw an <see cref="T:System.IO.IOException" /> and any attempt to read fails and throws an <see cref="T:System.NotSupportedException" />.</summary>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>The exception that is thrown when an attempt to access a file that does not exist fails.</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with its message string set to a system-supplied message.</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with its message string set to <paramref name="message" />.</summary>
      <param name="message">A description of the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A description of the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message"></member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>Returns the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</summary>
      <returns>A string containing the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</returns>
    </member>
    <member name="T:System.IO.FileShare">
      <summary>Contains constants for controlling the kind of access other <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> objects can have to the same file.</summary>
    </member>
    <member name="F:System.IO.FileShare.None">
      <summary>Declines sharing of the current file. Any request to open the file (by this process or another process) will fail until the file is closed.</summary>
    </member>
    <member name="F:System.IO.FileShare.Read">
      <summary>Allows subsequent opening of the file for reading. If this flag is not specified, any request to open the file for reading (by this process or another process) will fail until the file is closed. </summary>
    </member>
    <member name="F:System.IO.FileShare.Write">
      <summary>Allows subsequent opening of the file for writing. If this flag is not specified, any request to open the file for writing (by this process or another process) will fail until the file is closed. </summary>
    </member>
    <member name="F:System.IO.FileShare.ReadWrite">
      <summary>Allows subsequent opening of the file for reading or writing. If this flag is not specified, any request to open the file for reading or writing (by this process or another process) will fail until the file is closed. </summary>
    </member>
    <member name="F:System.IO.FileShare.Delete">
      <summary>Allows subsequent deleting of a file.</summary>
    </member>
    <member name="F:System.IO.FileShare.Inheritable">
      <summary>Makes the file handle inheritable by child processes. </summary>
    </member>
    <member name="T:System.IO.FileStream">
      <summary>When it is called by an elevated-trust application, exposes a <see cref="T:System.IO.Stream" /> around a file, supporting both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path and creation mode.</summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as specifying FileMode.CreateNew and the file specified by <paramref name="path" /> already exists.-or-The stream has been closed. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value. </exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, and read/write permission.</summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as specifying FileMode.CreateNew and the file specified by <paramref name="path" /> already exists. -or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is Write or ReadWrite and the file or directory is set for read-only access. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value. </exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write permission, and sharing permission.</summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file. </param>
      <param name="share">A <see cref="T:System.IO.FileShare" /> constant that determines how the file will be shared by processes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as specifying FileMode.CreateNew and the file specified by <paramref name="path" /> already exists. -or-The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to FileShare.Delete.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is Write or ReadWrite and the file or directory is set for read-only access. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value. </exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, and buffer size.</summary>
      <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate. </param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that determines how the file can be accessed by the FileStream object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the FileStream object. <see cref="P:System.IO.FileStream.CanSeek" /> is true if <paramref name="path" /> specifies a disk file. </param>
      <param name="share">A <see cref="T:System.IO.FileShare" /> constant that determines how the file will be shared by processes. </param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. For <paramref name="bufferSize" /> values between one and eight, the actual buffer size is set to eight bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. -or-<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative or zero.-or- <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is FileMode.Truncate or FileMode.Open, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as specifying FileMode.CreateNew and the file specified by <paramref name="path" /> already exists. -or-The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to FileShare.Delete.-or-The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is Write or ReadWrite and the file or directory is set for read-only access. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</returns>
      <param name="array">The buffer to read data into. </param>
      <param name="offset">The byte offset in <paramref name="array" /> at which to begin reading. </param>
      <param name="numBytes">The maximum number of bytes to read. </param>
      <param name="userCallback">The method to be called when the asynchronous read operation is completed. </param>
      <param name="stateObject">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param>
      <exception cref="T:System.ArgumentException">The array length minus <paramref name="offset" /> is less than <paramref name="numBytes" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="numBytes" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An asynchronous read was attempted past the end of the file. </exception>
    </member>
    <member name="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous write.</returns>
      <param name="array">The buffer containing data to write to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="array" /> at which to begin copying bytes to the current stream.</param>
      <param name="numBytes">The maximum number of bytes to write. </param>
      <param name="userCallback">The method to be called when the asynchronous write operation is completed. </param>
      <param name="stateObject">A user-provided object that distinguishes this particular asynchronous write request from other requests. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> length minus <paramref name="offset" /> is less than <paramref name="numBytes" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="numBytes" /> is negative. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="P:System.IO.FileStream.CanRead">
      <summary>Gets a value indicating whether the current stream supports reading.</summary>
      <returns>true if the stream supports reading; false if the stream is closed or was opened with write-only access.</returns>
    </member>
    <member name="P:System.IO.FileStream.CanSeek">
      <summary>Gets a value indicating whether the current stream supports seeking.</summary>
      <returns>true if the stream supports seeking; false if the stream is closed or if the FileStream was constructed from an operating-system handle such as a pipe or output to the console.</returns>
    </member>
    <member name="P:System.IO.FileStream.CanWrite">
      <summary>Gets a value indicating whether the current stream supports writing.</summary>
      <returns>true if the stream supports writing; false if the stream is closed or was opened with read-only access. </returns>
    </member>
    <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.FileStream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous read to complete.</summary>
      <returns>The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</returns>
      <param name="asyncResult">The reference to the pending asynchronous request to wait for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.ArgumentException">This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" /> is called multiple times. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write, blocking until the I/O operation has completed.</summary>
      <param name="asyncResult">The pending asynchronous I/O request. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.ArgumentException">This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" /> is called multiple times. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.FileStream.Finalize">
      <summary>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the FileStream.</summary>
    </member>
    <member name="M:System.IO.FileStream.Flush">
      <summary>Clears all buffers for this stream and causes any buffered data to be written to the file system.</summary>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.FileStream.Flush(System.Boolean)">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</summary>
      <param name="flushToDisk">true to flush all intermediate file buffers; otherwise, false. </param>
    </member>
    <member name="P:System.IO.FileStream.Length">
      <summary>When it is called by trusted applications, gets the length in bytes of the stream.</summary>
      <returns>A long value representing the length of the stream in bytes.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.FileStream.CanSeek" /> for this stream is false. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as the file being closed. </exception>
    </member>
    <member name="P:System.IO.FileStream.Name">
      <summary>When it is called by trusted applications, gets the name of the file stream that was passed to the constructor.</summary>
      <returns>A string that is the name of the file stream.</returns>
    </member>
    <member name="P:System.IO.FileStream.Position">
      <summary>When it is called by trusted applications, gets or sets the current position of this stream.</summary>
      <returns>The current position  of this stream.</returns>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. - or -The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the position to a negative value. </exception>
      <exception cref="T:System.IO.EndOfStreamException">Attempted seeking past the end of a stream that does not support this. </exception>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from the stream and writes the data in a given buffer.</summary>
      <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
      <param name="array">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1<paramref name=")" /> replaced by the bytes read from the current source. </param>
      <param name="offset">The byte offset in <paramref name="array" /> at which the read bytes will be placed. </param>
      <param name="count">The maximum number of bytes to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:System.IO.FileStream.ReadByte">
      <summary>Reads a byte from the file and advances the read position one byte.</summary>
      <returns>The byte, cast to an <see cref="T:System.Int32" />, or -1 if the end of the stream has been reached.</returns>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading. </exception>
      <exception cref="T:System.ObjectDisposedException">The current stream is closed. </exception>
    </member>
    <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of this stream to the given value.</summary>
      <returns>The new position in the stream.</returns>
      <param name="offset">The point relative to <paramref name="origin" /> from which to begin seeking. </param>
      <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="origin" />, using a value of type <see cref="T:System.IO.SeekOrigin" />. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the FileStream is constructed from a pipe or console output. </exception>
      <exception cref="T:System.ArgumentException">Attempted seeking before the beginning of the stream. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:System.IO.FileStream.SetLength(System.Int64)">
      <summary>Sets the length of this stream to the given value.</summary>
      <param name="value">The new length of the stream. </param>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the <paramref name="value" /> parameter to less than 0. </exception>
    </member>
    <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to this stream using data from a buffer.</summary>
      <param name="array">The buffer containing data to write to the stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="array" /> at which to begin copying bytes to the current stream. </param>
      <param name="count">The number of bytes to be written to the current stream. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. - or -Another thread may have caused an unexpected change in the position of the operating system's file handle. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.NotSupportedException">The current stream instance does not support writing. </exception>
    </member>
    <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the file stream.</summary>
      <param name="value">A byte to write to the stream. </param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
    </member>
    <member name="T:System.IO.FileSystemInfo">
      <summary>Provides the base class for both <see cref="T:System.IO.FileInfo" /> and <see cref="T:System.IO.DirectoryInfo" /> objects.</summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileSystemInfo" /> class.</summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.Attributes">
      <summary>Gets or sets the <see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.</summary>
      <returns>
        <see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute. </exception>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.CreationTime">
      <summary>Gets or sets the creation time of the current <see cref="T:System.IO.FileSystemInfo" /> object.</summary>
      <returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
    </member>
    <member name="M:System.IO.FileSystemInfo.Delete">
      <summary>Deletes a file or directory.</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.Exists">
      <summary>Gets a value indicating whether the file or directory exists.</summary>
      <returns>true if the file or directory exists; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.Extension">
      <summary>Gets the string representing the extension part of the file.</summary>
      <returns>A string containing the <see cref="T:System.IO.FileSystemInfo" /> extension.</returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.FullName">
      <summary>Gets the full path of the directory or file.</summary>
      <returns>A string containing the full path.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="F:System.IO.FileSystemInfo.FullPath">
      <summary>Represents the fully qualified path of the directory or file.</summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastAccessTime">
      <summary>Gets or sets the time the current file or directory was last accessed.</summary>
      <returns>The time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastWriteTime">
      <summary>Gets or sets the time when the current file or directory was last written to.</summary>
      <returns>The time the current file was last written.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.Name">
      <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.</summary>
      <returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
    </member>
    <member name="F:System.IO.FileSystemInfo.OriginalPath">
      <summary>The path originally specified by the user, whether relative or absolute.</summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.Refresh">
      <summary>Refreshes the state of the object.</summary>
      <exception cref="T:System.IO.IOException">A device such as a disk drive is not ready. </exception>
    </member>
    <member name="T:System.IO.IOException">
      <summary>The exception that is thrown when an I/O error occurs.</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to the empty string (""), its HRESULT set to COR_E_IO, and its inner exception set to a null reference.</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to <paramref name="message" />, its HRESULT set to COR_E_IO, and its inner exception set to null.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>Creates a stream whose backing store is memory.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class with an expandable capacity initialized to zero.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified byte array.</summary>
      <param name="buffer">The array of unsigned bytes from which to create the current stream. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified byte array with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set as specified.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified region (index) of a byte array.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
      <param name="index">The index into <paramref name="buffer" /> at which the stream begins. </param>
      <param name="count">The length of the stream in bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="index" /> and <paramref name="count" /> is greater than the length of <paramref name="buffer" />. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified region of a byte array, with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set as specified.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
      <param name="index">The index in <paramref name="buffer" /> at which the stream begins. </param>
      <param name="count">The length of the stream in bytes. </param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> are negative. </exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="index" /> and <paramref name="count" /> is greater than the length of <paramref name="buffer" />. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified region of a byte array, with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set as specified, and the ability to call <see cref="M:System.IO.MemoryStream.GetBuffer" /> set as specified.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
      <param name="index">The index into <paramref name="buffer" /> at which the stream begins. </param>
      <param name="count">The length of the stream in bytes. </param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing. </param>
      <param name="publiclyVisible">true to enable <see cref="M:System.IO.MemoryStream.GetBuffer" />, which returns the unsigned byte array from which the stream was created; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class with an expandable capacity initialized as specified.</summary>
      <param name="capacity">The initial size of the internal array in bytes. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is negative. </exception>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>Gets a value indicating whether the current stream supports reading.</summary>
      <returns>true if the stream is open.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>Gets a value indicating whether the current stream supports seeking.</summary>
      <returns>true if the stream is open.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>Gets a value indicating whether the current stream supports writing.</summary>
      <returns>true if the stream supports writing; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>Gets or sets the number of bytes allocated for this stream.</summary>
      <returns>The length of the usable portion of the buffer for the stream.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">A capacity is set that is negative or less than the current length of the stream. </exception>
      <exception cref="T:System.ObjectDisposedException">The current stream is closed. </exception>
      <exception cref="T:System.NotSupportedException">set is invoked on a stream whose capacity cannot be modified. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.MemoryStream" /> class and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>Overrides <see cref="M:System.IO.Stream.Flush" /> so that no action is performed.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>Returns the array of unsigned bytes from which this stream was created.</summary>
      <returns>The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <see cref="T:System.IO.MemoryStream" /> constructor during construction of the current instance.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The MemoryStream instance was not created with a publicly visible buffer. </exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>Gets the length of the stream in bytes.</summary>
      <returns>The length of the stream in bytes.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>Gets or sets the current position within the stream.</summary>
      <returns>The current position within the stream.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The position is set to a negative value or a value greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from the current stream and writes the data to <paramref name="buffer" />.</summary>
      <returns>The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.</returns>
      <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the characters read from the current stream. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin reading. </param>
      <param name="count">The maximum number of bytes to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> subtracted from the buffer length is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>Reads a byte from the current stream.</summary>
      <returns>The byte cast to a <see cref="T:System.Int32" />, or -1 if the end of the stream has been reached.</returns>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position within the current stream to the specified value.</summary>
      <returns>The new position within the stream, calculated by combining the initial reference point and the offset.</returns>
      <param name="offset">The new position within the stream. This is relative to the <paramref name="loc" /> parameter, and can be positive or negative. </param>
      <param name="loc">A value of type <see cref="T:System.IO.SeekOrigin" />, which acts as the seek reference point. </param>
      <exception cref="T:System.IO.IOException">Seeking is attempted before the beginning of the stream. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">There is an invalid SeekOrigin. </exception>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>Sets the length of the current stream to the specified value.</summary>
      <param name="value">The value at which to set the length. </param>
      <exception cref="T:System.NotSupportedException">The current stream is not resizable and <paramref name="value" /> is larger than the current capacity.-or- The current stream does not support writing. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or is greater than the maximum length of the <see cref="T:System.IO.MemoryStream" />, where the maximum length is(<see cref="F:System.Int32.MaxValue" /> - origin), and origin is the index into the underlying buffer at which the stream starts. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>Writes the stream contents to a byte array, regardless of the <see cref="P:System.IO.MemoryStream.Position" /> property.</summary>
      <returns>A new byte array.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the current stream using data read from buffer.</summary>
      <param name="buffer">The buffer to write data from. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing from. </param>
      <param name="count">The maximum number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. For additional information see <see cref="P:System.IO.Stream.CanWrite" />.-or- The current position is closer than <paramref name="count" /> bytes to the end of the stream, and the capacity cannot be modified. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> subtracted from the buffer length is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> are negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current stream at the current position.</summary>
      <param name="value">The byte to write. </param>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. For additional information see <see cref="P:System.IO.Stream.CanWrite" />.-or- The current position is at the end of the stream, and the capacity cannot be modified. </exception>
      <exception cref="T:System.ObjectDisposedException">The current stream is closed. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>Writes the entire contents of this memory stream to another stream.</summary>
      <param name="stream">The stream to write this memory stream to. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The current or target stream is closed. </exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information. These operations are performed in a cross-platform manner.</summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>When it is called by trusted applications, changes the extension of a path string.</summary>
      <returns>A string containing the modified path information.On Windows-based desktop platforms, if <paramref name="path" /> is null or an empty string (""), the path information is returned unmodified. If <paramref name="extension" /> is null, the returned string contains the specified path with its extension removed. If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not null, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.</returns>
      <param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </param>
      <param name="extension">The new extension (with a leading period). Specify null to remove an existing extension from <paramref name="path" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>When it is called by trusted applications, combines two path strings.</summary>
      <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.</returns>
      <param name="path1">The first path. </param>
      <param name="path2">The second path. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> or <paramref name="path2" /> contain one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> or <paramref name="path2" /> is null. </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
      <summary>When it is called by trusted applications, combines four strings into a path.</summary>
      <returns>A string that contains the combined paths.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <param name="path3">The third path to combine.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> is null. </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>When it is called by trusted applications, combines an array of strings into a path.</summary>
      <returns>A string that contains the combined paths.</returns>
      <param name="paths">An array of parts of the path.</param>
      <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">One of the strings in the array is null. </exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>When it is called by trusted applications, returns the directory information for the specified path string.</summary>
      <returns>A string that contains directory information for <paramref name="path" />, or null if <paramref name="path" /> denotes a root directory or is null. Returns <see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain directory information.</returns>
      <param name="path">The path of a file or directory. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces. </exception>
      <exception cref="T:System.IO.PathTooLongException">The <paramref name="path" /> parameter is longer than the system-defined maximum length.</exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>When it is called by trusted applications, returns the extension of the specified path string.</summary>
      <returns>A <see cref="T:System.String" /> containing the extension of the specified path (including the "."), null, or <see cref="F:System.String.Empty" />. If <paramref name="path" /> is null, GetExtension returns null. If <paramref name="path" /> does not have extension information, GetExtension returns Empty.</returns>
      <param name="path">The path string from which to get the extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.  </exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>When it is called by trusted applications, returns the file name and extension of the specified path string.</summary>
      <returns>A <see cref="T:System.String" /> consisting of the characters after the last directory character in <paramref name="path" />. If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty" />. If <paramref name="path" /> is null, this method returns null.</returns>
      <param name="path">The path string from which to obtain the file name and extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>When it is called by trusted applications, returns the file name of the specified path string without the extension.</summary>
      <returns>A <see cref="T:System.String" /> containing the string returned by <see cref="M:System.IO.Path.GetFileName(System.String)" />, minus the last period (.) and all characters following it.</returns>
      <param name="path">The path of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>When it is called by trusted applications, returns the absolute path for the specified path string.</summary>
      <returns>A string containing the fully qualified location of <paramref name="path" />, such as "rootdir\MyFile.txt".</returns>
      <param name="path">The file or directory for which to obtain absolute path information. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.-or- The system could not retrieve the absolute path. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>When it is called by trusted applications, gets an array containing the characters that are not allowed in path names.</summary>
      <returns>An array containing the characters that are not allowed in path names.</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>Gets the root directory information of the specified path.</summary>
      <returns>A string containing the root directory of <paramref name="path" />, such as "rootdir", or null if <paramref name="path" /> is null, or an empty string if <paramref name="path" /> does not contain root directory information.</returns>
      <param name="path">The path from which to obtain root directory information. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.-or- <see cref="F:System.String.Empty" /> was passed to <paramref name="path" />. </exception>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary>
      <returns>A <see cref="T:System.String" /> containing the full path of the temporary file.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.- or -This method was unable to create a temporary file.</exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>Returns the path of the current system's temporary folder.</summary>
      <returns>A <see cref="T:System.String" /> containing the path information of a temporary directory.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>When it is called by trusted applications, determines whether a path includes a file name extension.</summary>
      <returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
      <param name="path">The path to search for an extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>Gets a value indicating whether the specified path string contains absolute or relative path information.</summary>
      <returns>true if <paramref name="path" /> contains an absolute path; otherwise, false.</returns>
      <param name="path">The path to test. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>A platform-specific separator character used to separate path strings in environment variables.</summary>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>Provides a platform-specific volume separator character.</summary>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>The exception that is thrown when a pathname or filename is longer than the system-defined maximum length.</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class.</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with its message string set to <paramref name="message" /> and its HRESULT set to COR_E_PATHTOOLONG.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.IO.SearchOption">
      <summary>Specifies whether to search the current directory, or the current directory and all subdirectories. </summary>
    </member>
    <member name="F:System.IO.SearchOption.TopDirectoryOnly">
      <summary>Includes only the current directory in a search.</summary>
    </member>
    <member name="F:System.IO.SearchOption.AllDirectories">
      <summary>Includes the current directory and all the subdirectories in a search operation. This option includes reparse points like mounted drives and symbolic links in the search.</summary>
    </member>
    <member name="T:System.IO.SeekOrigin">
      <summary>Provides the fields that represent reference points in streams for seeking.</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Begin">
      <summary>Specifies the beginning of a stream.</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Current">
      <summary>Specifies the current position within a stream.</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.End">
      <summary>Specifies the end of a stream.</summary>
    </member>
    <member name="T:System.IO.Stream">
      <summary>Provides a generic view of a sequence of bytes.</summary>
    </member>
    <member name="M:System.IO.Stream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Stream" /> class. </summary>
    </member>
    <member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.</returns>
      <param name="buffer">The buffer to read the data into. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data read from the stream. </param>
      <param name="count">The maximum number of bytes to read. </param>
      <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param>
      <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception>
      <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception>
    </member>
    <member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation.</summary>
      <returns>An IAsyncResult that represents the asynchronous write, which could still be pending.</returns>
      <param name="buffer">The buffer to write data from. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> from which to begin writing. </param>
      <param name="count">The maximum number of bytes to write. </param>
      <param name="callback">An optional asynchronous callback, to be called when the write is complete. </param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests. </param>
      <exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, or a disk error occurs. </exception>
      <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the write operation. </exception>
    </member>
    <member name="P:System.IO.Stream.CanRead">
      <summary>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</summary>
      <returns>true if the stream supports reading; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Stream.CanSeek">
      <summary>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</summary>
      <returns>true if the stream supports seeking; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Stream.CanTimeout">
      <summary>Gets a value that determines whether the current stream can time out.</summary>
      <returns>A value that determines whether the current stream can time out.</returns>
    </member>
    <member name="P:System.IO.Stream.CanWrite">
      <summary>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</summary>
      <returns>true if the stream supports writing; otherwise, false.</returns>
    </member>
    <member name="M:System.IO.Stream.Close">
      <summary>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</summary>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream)">
      <summary>Reads all the bytes from the current stream and writes them to the destination stream.</summary>
      <param name="destination">The stream that will contain the contents of the current stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading.-or-<paramref name="destination" /> does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>Reads all the bytes from the current stream and writes them to a destination stream, using a specified buffer size.</summary>
      <param name="destination">The stream that will contain the contents of the current stream.</param>
      <param name="bufferSize">The size of the buffer. This value must be greater than zero. The default size is 4096.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative or zero.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading.-or-<paramref name="destination" /> does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Stream.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.Stream" />.</summary>
    </member>
    <member name="M:System.IO.Stream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous read to complete.</summary>
      <returns>The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</returns>
      <param name="asyncResult">The reference to the pending asynchronous request to finish. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write operation.</summary>
      <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.Stream.Flush">
      <summary>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="P:System.IO.Stream.Length">
      <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
      <returns>A long value representing the length of the stream in bytes.</returns>
      <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="F:System.IO.Stream.Null">
      <summary>A Stream with no backing store.</summary>
    </member>
    <member name="P:System.IO.Stream.Position">
      <summary>When overridden in a derived class, gets or sets the position within the current stream.</summary>
      <returns>The current position within the stream.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. </param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
      <param name="count">The maximum number of bytes to be read from the current stream. </param>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:System.IO.Stream.ReadByte">
      <summary>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
      <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
      <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="P:System.IO.Stream.ReadTimeout">
      <summary>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out. </summary>
      <returns>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.ReadTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />. </exception>
    </member>
    <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>When overridden in a derived class, sets the position within the current stream.</summary>
      <returns>The new position within the current stream.</returns>
      <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter. </param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:System.IO.Stream.SetLength(System.Int64)">
      <summary>When overridden in a derived class, sets the length of the current stream.</summary>
      <param name="value">The desired length of the current stream in bytes. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
      <param name="count">The number of bytes to be written to the current stream. </param>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="M:System.IO.Stream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</summary>
      <param name="value">The byte to write to the stream. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
    </member>
    <member name="P:System.IO.Stream.WriteTimeout">
      <summary>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out. </summary>
      <returns>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.WriteTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />. </exception>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>Implements a <see cref="T:System.IO.TextReader" /> that reads characters from a byte stream in a particular encoding.</summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream.</summary>
      <param name="stream">The stream to be read. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified byte order mark detection option.</summary>
      <param name="stream">The stream to be read. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding.</summary>
      <param name="stream">The stream to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding and byte order mark detection option.</summary>
      <param name="stream">The stream to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding, byte order mark detection option, and buffer size.</summary>
      <param name="stream">The stream to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <param name="bufferSize">The minimum buffer size. </param>
      <exception cref="T:System.ArgumentException">The stream does not support reading. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than or equal to zero. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name.</summary>
      <param name="path">The complete file path to be read. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified byte order mark detection option.</summary>
      <param name="path">The complete file path to be read. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding.</summary>
      <param name="path">The complete file path to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding and byte order mark detection option.</summary>
      <param name="path">The complete file path to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding, byte order mark detection option, and buffer size.</summary>
      <param name="path">The complete file path to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <param name="bufferSize">The minimum buffer size, in number of 16-bit characters. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> is less than or equal to zero. </exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>When it is called by trusted applications, returns the underlying stream.</summary>
      <returns>The underlying stream.</returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>When it is called by trusted applications, closes the <see cref="T:System.IO.StreamReader" /> object and the underlying stream, and releases any system resources associated with the reader.</summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>When it is called by trusted applications, gets the current character encoding that the current <see cref="T:System.IO.StreamReader" /> object is using.</summary>
      <returns>The current character encoding used by the current reader. The value can be different after the first call to any <see cref="Overload:System.IO.StreamReader.Read" /> method of <see cref="T:System.IO.StreamReader" />, since encoding autodetection is not done until the first call to a <see cref="Overload:System.IO.StreamReader.Read" /> method.</returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>Allows a <see cref="T:System.IO.StreamReader" /> object to discard its current data.</summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>Closes the underlying stream, releases the unmanaged resources used by the <see cref="T:System.IO.StreamReader" />, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>When it is called by trusted applications, gets a value that indicates whether the current stream position is at the end of the stream.</summary>
      <returns>true if the current stream position is at the end of the stream; otherwise false.</returns>
      <exception cref="T:System.ObjectDisposedException">The underlying stream has been disposed.</exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>A <see cref="T:System.IO.StreamReader" /> object around an empty stream.</summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>When it is called by trusted application, returns the next available character but does not consume it.</summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>When it is called by trusted applications, reads the next character from the input stream and advances the character position by one character.</summary>
      <returns>The next character from the input stream represented as an <see cref="T:System.Int32" /> object, or -1 if no more characters are available.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>When it is called by trusted applications, reads a maximum of <paramref name="count" /> characters from the current stream into <paramref name="buffer" />, beginning at <paramref name="index" />.</summary>
      <returns>The number of characters that have been read, or 0 if at the end of the stream and no data was read. The number will be less than or equal to the <paramref name="count" /> parameter, depending on whether the data is available within the stream.</returns>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index " />+ <paramref name="count" /> - 1) replaced by the characters read from the current source. </param>
      <param name="index">The index of <paramref name="buffer" /> at which to begin writing. </param>
      <param name="count">The maximum number of characters to read. </param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as the stream is closed. </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>When it is called by trusted applications, reads a line of characters from the current stream and returns the data as a string.</summary>
      <returns>The next line from the input stream, or null if the end of the input stream is reached.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>When it is called by trusted applications, reads the stream from the current position to the end of the stream.</summary>
      <returns>The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns the empty string("").</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>Implements a <see cref="T:System.IO.TextWriter" /> for writing characters to a stream in a particular encoding.</summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream, using UTF-8 encoding and the default buffer size.</summary>
      <param name="stream">The stream to write to. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream, using the specified encoding and the default buffer size.</summary>
      <param name="stream">The stream to write to. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream, using the specified encoding and buffer size.</summary>
      <param name="stream">The stream to write to. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="bufferSize">Sets the buffer size. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the default encoding and buffer size.</summary>
      <param name="path">The complete file path to write to. <paramref name="path" /> can be a file name. </param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string(""). -or-<paramref name="path" /> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the default encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.</summary>
      <param name="path">The complete file path to write to. </param>
      <param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append" /> is false, the file is overwritten. If the file exists and <paramref name="append" /> is true, the data is appended to the file. Otherwise, a new file is created. </param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty. -or-<paramref name="path" /> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the specified encoding and default buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.</summary>
      <param name="path">The complete file path to write to. </param>
      <param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append" /> is false, the file is overwritten. If the file exists and <paramref name="append" /> is true, the data is appended to the file. Otherwise, a new file is created. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty. -or-<paramref name="path" /> contains the name of a system device (com1, com2, etc).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>When it is called by trusted applications, initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the specified encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.</summary>
      <param name="path">The complete file path to write to. </param>
      <param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append" /> is false, the file is overwritten. If the file exists and <paramref name="append" /> is true, the data is appended to the file. Otherwise, a new file is created. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="bufferSize">Sets the buffer size. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). -or-<paramref name="path" /> contains the name of a system device (com1, com2, etc).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.IO.StreamWriter" /> will flush its buffer to the underlying stream after every call to <see cref="M:System.IO.StreamWriter.Write(System.Char)" />.</summary>
      <returns>true to force <see cref="T:System.IO.StreamWriter" /> to flush its buffer; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>When it is called by trusted applications, gets the underlying stream that interfaces with a backing store.</summary>
      <returns>The stream this StreamWriter is writing to.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>When it is called by trusted applications, closes the current StreamWriter object and the underlying stream.</summary>
      <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.StreamWriter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
      <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair.</exception>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>When it is called by trusted applications, gets the <see cref="T:System.Text.Encoding" /> in which the output is written.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> specified in the constructor for the current instance, or <see cref="T:System.Text.UTF8Encoding" /> if an encoding was not specified.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.</summary>
      <exception cref="T:System.ObjectDisposedException">The current writer is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair. </exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>Provides a StreamWriter with no backing store that can be written to, but not read from.</summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>When it is called by trusted applications, writes a character to the stream.</summary>
      <param name="value">The character to write to the text stream. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>When it is called by trusted applications, writes a character array to the stream.</summary>
      <param name="buffer">A character array containing the data to write. If <paramref name="buffer" /> is null, nothing is written. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>When it is called by trusted applications, writes a subarray of characters to the stream.</summary>
      <param name="buffer">A character array containing the data to write. </param>
      <param name="index">The index into <paramref name="buffer" /> at which to begin writing. </param>
      <param name="count">The number of characters to read from <paramref name="buffer" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>When it is called by trusted applications, writes a string to the stream.</summary>
      <param name="value">The string to write to the stream. If <paramref name="value" /> is null, nothing is written. </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>Implements a <see cref="T:System.IO.TextReader" /> that reads from a string.</summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringReader" /> class that reads from the specified string.</summary>
      <param name="s">The string to which the <see cref="T:System.IO.StringReader" /> should be initialized. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>Closes the <see cref="T:System.IO.StringReader" />.</summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.StringReader" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>Returns the next available character but does not consume it.</summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed. </exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>Reads the next character from the input string and advances the character position by one character.</summary>
      <returns>The next character from the underlying string, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed. </exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a block of characters from the input string and advances the character position by <paramref name="count" />.</summary>
      <returns>The total number of characters read into the buffer. This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.</returns>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> - 1) replaced by the characters read from the current source. </param>
      <param name="index">The starting index in the buffer. </param>
      <param name="count">The number of characters to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed. </exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>Reads a line from the underlying string.</summary>
      <returns>The next line from the underlying string, or null if the end of the underlying string is reached.</returns>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed. </exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>Reads the stream as a string, either in its entirety or from the current position to the end of the stream.</summary>
      <returns>The content from the current position to the end of the underlying string.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed. </exception>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>Implements a <see cref="T:System.IO.TextWriter" /> for writing information to a string. The information is stored in an underlying <see cref="T:System.Text.StringBuilder" />.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class with the specified format control.</summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting. </param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class that writes to the specified <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="sb">The StringBuilder to write to. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> is null. </exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class that writes to the specified <see cref="T:System.Text.StringBuilder" /> and has the specified format provider.</summary>
      <param name="sb">The StringBuilder to write to. </param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> is null. </exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>Closes the current <see cref="T:System.IO.StringWriter" /> and the underlying stream.</summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.StringWriter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>Gets the <see cref="T:System.Text.Encoding" /> in which the output is written.</summary>
      <returns>The Encoding in which the output is written.</returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>Returns the underlying <see cref="T:System.Text.StringBuilder" />.</summary>
      <returns>The underlying StringBuilder.</returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>Returns a string containing the characters written to the current StringWriter so far.</summary>
      <returns>The string containing the characters written to the current StringWriter.</returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>Writes a character to this instance of the StringWriter.</summary>
      <param name="value">The character to write. </param>
      <exception cref="T:System.ObjectDisposedException">The writer is closed. </exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes the specified region of a character array to this instance of the StringWriter.</summary>
      <param name="buffer">The character array to read data from. </param>
      <param name="index">The index at which to begin reading from <paramref name="buffer" />. </param>
      <param name="count">The maximum number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />. Length. </exception>
      <exception cref="T:System.ObjectDisposedException">The writer is closed. </exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>Writes a string to this instance of the StringWriter.</summary>
      <param name="value">The string to write. </param>
      <exception cref="T:System.ObjectDisposedException">The writer is closed. </exception>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>Represents a reader that can read a sequential series of characters.</summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.TextReader" /> class.</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>Closes the <see cref="T:System.IO.TextReader" /> and releases any system resources associated with the TextReader.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.TextReader" /> object.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.TextReader" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>Provides a TextReader with no data to read from.</summary>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the input stream.</summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>Reads the next character from the input stream and advances the character position by one character.</summary>
      <returns>The next character from the input stream, or -1 if no more characters are available. The default implementation returns -1.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a maximum of <paramref name="count" /> characters from the current stream and writes the data to <paramref name="buffer" />, beginning at <paramref name="index" />.</summary>
      <returns>The number of characters that have been read. The number will be less than or equal to <paramref name="count" />, depending on whether the data is available within the stream. This method returns zero if called when no more characters are left to read.</returns>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> - 1) replaced by the characters read from the current source. </param>
      <param name="index">The place in <paramref name="buffer" /> at which to begin writing. </param>
      <param name="count">The maximum number of characters to read. If the end of the stream is reached before <paramref name="count" /> of characters is read into <paramref name="buffer" />, the current method returns. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a maximum of <paramref name="count" /> characters from the current stream, and writes the data to <paramref name="buffer" />, beginning at <paramref name="index" />.</summary>
      <returns>The position of the underlying stream is advanced by the number of characters that were read into <paramref name="buffer" />.The number of characters that have been read. The number will be less than or equal to <paramref name="count" />, depending on whether all input characters have been read.</returns>
      <param name="buffer">When this method returns, this parameter contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> -1) replaced by the characters read from the current source. </param>
      <param name="index">The place in <paramref name="buffer" /> at which to begin writing. </param>
      <param name="count">The maximum number of characters to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>Reads a line of characters from the current stream and returns the data as a string.</summary>
      <returns>The next line from the input stream, or null if all characters have been read.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>Reads all characters from the current position to the end of the TextReader and returns them as one string.</summary>
      <returns>A string containing all characters from the current position to the end of the TextReader.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>Represents a writer that can write a sequential series of characters. This class is abstract.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.TextWriter" /> class.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.TextWriter" /> class with the specified format provider.</summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting. </param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>Closes the current writer and releases any system resources associated with the writer.</summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>Stores the new line characters used for this TextWriter.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.TextWriter" /> object.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Text.Encoding" /> in which the output is written.</summary>
      <returns>The Encoding in which the output is written.</returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</summary>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>Gets an object that controls formatting.</summary>
      <returns>An <see cref="T:System.IFormatProvider" /> object for a specific culture, or the formatting of the current culture if no other culture is specified.</returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>Gets or sets the line terminator string used by the current TextWriter.</summary>
      <returns>The line terminator string for the current TextWriter.</returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>Provides a TextWriter with no backing store that can be written to, but not read from.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>Writes the text representation of a Boolean value to the text stream.</summary>
      <param name="value">The Boolean to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>Writes a character to the text stream.</summary>
      <param name="value">The character to write to the text stream. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>Writes a character array to the text stream.</summary>
      <param name="buffer">The character array to write to the text stream. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the text stream.</summary>
      <param name="buffer">The character array to write data from. </param>
      <param name="index">Starting index in the buffer. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>Writes the text representation of a decimal value to the text stream.</summary>
      <param name="value">The decimal value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>Writes the text representation of an 8-byte floating-point value to the text stream.</summary>
      <param name="value">The 8-byte floating-point value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>Writes the text representation of a 4-byte signed integer to the text stream.</summary>
      <param name="value">The 4-byte signed integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>Writes the text representation of an 8-byte signed integer to the text stream.</summary>
      <param name="value">The 8-byte signed integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>Writes the text representation of an object to the text stream by calling ToString on that object.</summary>
      <param name="value">The object to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>Writes the text representation of a 4-byte floating-point value to the text stream.</summary>
      <param name="value">The 4-byte floating-point value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>Writes a string to the text stream.</summary>
      <param name="value">The string to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg0">An object to write into the formatted string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg0">An object to write into the formatted string. </param>
      <param name="arg1">An object to write into the formatted string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg">The object array to write into the formatted string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="arg" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to <paramref name="arg" />. Length. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>Writes the text representation of a 4-byte unsigned integer to the text stream.</summary>
      <param name="value">The 4-byte unsigned integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>Writes the text representation of an 8-byte unsigned integer to the text stream.</summary>
      <param name="value">The 8-byte unsigned integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>Writes a line terminator to the text stream.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>Writes the text representation of a Boolean followed by a line terminator to the text stream.</summary>
      <param name="value">The Boolean to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>Writes a character followed by a line terminator to the text stream.</summary>
      <param name="value">The character to write to the text stream. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>Writes an array of characters followed by a line terminator to the text stream.</summary>
      <param name="buffer">The character array from which data is read. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters followed by a line terminator to the text stream.</summary>
      <param name="buffer">The character array from which data is read. </param>
      <param name="index">The index into <paramref name="buffer" /> at which to begin reading. </param>
      <param name="count">The maximum number of characters to write. </param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>Writes the text representation of a decimal value followed by a line terminator to the text stream.</summary>
      <param name="value">The decimal value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text stream.</summary>
      <param name="value">The 8-byte floating-point value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>Writes the text representation of a 4-byte signed integer followed by a line terminator to the text stream.</summary>
      <param name="value">The 4-byte signed integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>Writes the text representation of an 8-byte signed integer followed by a line terminator to the text stream.</summary>
      <param name="value">The 8-byte signed integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>Writes the text representation of an object by calling ToString on this object, followed by a line terminator to the text stream.</summary>
      <param name="value">The object to write. If <paramref name="value" /> is null, only the line termination characters are written. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text stream.</summary>
      <param name="value">The 4-byte floating-point value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>Writes a string followed by a line terminator to the text stream.</summary>
      <param name="value">The string to write. If <paramref name="value" /> is null, only the line termination characters are written. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatted string. </param>
      <param name="arg0">The object to write into the formatted string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg0">The object to write into the format string. </param>
      <param name="arg1">The object to write into the format string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg">The object array to write into format string. </param>
      <exception cref="T:System.ArgumentNullException">A string or object is passed in as null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to arg.Length. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text stream.</summary>
      <param name="value">The 4-byte unsigned integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text stream.</summary>
      <param name="value">The 8-byte unsigned integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>Provides access to unmanaged blocks of memory from managed code.</summary>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>Gets a value indicating whether a stream supports reading.</summary>
      <returns>false if the object was created by a constructor with an <paramref name="access" /> parameter that did not include reading the stream and if the stream is closed; otherwise, true.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>Gets a value indicating whether a stream supports seeking.</summary>
      <returns>false if the stream is closed; otherwise, true.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>Gets a value indicating whether a stream supports writing.</summary>
      <returns>false if the object was created by a constructor with an <paramref name="access" /> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, true.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).</summary>
      <returns>The size or capacity of the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.UnmanagedMemoryStream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>Overrides the <see cref="M:System.IO.Stream.Flush" /> method so that no action is performed.</summary>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>Gets the length of the data in a stream.</summary>
      <returns>The length of the data in the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>Gets or sets the current position in a stream.</summary>
      <returns>The current position in the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The position is set to a value that is less than zero, or the position is larger than <see cref="F:System.Int32.MaxValue" /> or results in overflow when added to the current pointer.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>[SECURITY CRITICAL] Gets or sets a byte pointer to a stream based on the current position in the stream.</summary>
      <returns>A byte pointer.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the specified number of bytes into the specified array.</summary>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
      <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. This parameter is passed uninitialized.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of bytes to read from the current stream.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support reading.- or - The <see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> property is set to false. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is set to null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset" /> parameter is less than zero. - or - The <paramref name="count" /> parameter is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The length of the buffer array minus the <paramref name="offset" /> parameter is less than the <paramref name="count" /> parameter.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
      <returns>The unsigned byte cast to an <see cref="T:System.Int32" /> object, or -1 if at the end of the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support reading.- or -The current position is at the end of the stream.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of the current stream to the given value.</summary>
      <returns>The new position in the stream.</returns>
      <param name="offset">The point relative to <paramref name="origin" /> to begin seeking from. </param>
      <param name="loc">Specifies the beginning, the end, or the current position as a reference point for <paramref name="origin" />, using a value of type <see cref="T:System.IO.SeekOrigin" />. </param>
      <exception cref="T:System.IO.IOException">An attempt was made to seek before the beginning of the stream.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset" /> value is larger than the maximum size of the stream.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>Sets the length of a stream to a specified value.</summary>
      <param name="value">The length of the stream.</param>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support writing.- or -An attempt is made to write to the stream and the <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> property is false.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="value" /> exceeds the capacity of the stream.- or -The specified <paramref name="value" /> is negative.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the current stream using data from a buffer.</summary>
      <param name="buffer">The byte array from which to copy bytes to the current stream.</param>
      <param name="offset">The offset in the buffer at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to write to the current stream.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support writing. - or -An attempt is made to write to the stream and the <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> property is false.- or -The <paramref name="count" /> value is greater than the capacity of the stream.- or -The position is at the end of the stream capacity.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the specified parameters is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="offset" /> parameter minus the length of the <paramref name="buffer" /> parameter is less than the <paramref name="count" /> parameter.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the file stream.</summary>
      <param name="value">A byte value written to the stream.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support writing.- or -An attempt is made to write to the stream and the <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> property is false.- or - The current position is at the end of the capacity of the stream.</exception>
      <exception cref="T:System.IO.IOException">The supplied <paramref name="value" /> causes the stream exceed its maximum capacity.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.BinaryWriter" />.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.System#IDisposable#Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryWriter" /> and optionally releases the managed resources.</summary>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String)">
      <summary>[SECURITY CRITICAL] Gets the names of subdirectories in the specified directory.</summary>
      <returns>An array of type String containing the names of subdirectories in <paramref name="path" />.</returns>
      <param name="path">The path for which an array of subdirectory names is returned. </param>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String,System.String)">
      <summary>[SECURITY CRITICAL] Gets an array of directories matching the specified search pattern from the current directory.</summary>
      <returns>A String array of directories matching the search pattern.</returns>
      <param name="path">The path to search. </param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />. </param>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String)">
      <summary>[SECURITY CRITICAL] Returns the names of files in the specified directory.</summary>
      <returns>A String array of file names in the specified directory.</returns>
      <param name="path">The directory from which to retrieve the files. </param>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String,System.String)">
      <summary>[SECURITY CRITICAL] Returns the names of files in the specified directory that match the specified search pattern.</summary>
      <returns>A String array containing the names of files in the specified directory that match the specified search pattern.</returns>
      <param name="path">The directory to search. </param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />, nor can it contain any of the characters. </param>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String)">
      <summary>[SECURITY CRITICAL] Returns the names of all files and subdirectories in the specified directory.</summary>
      <returns>A String array containing the names of file system entries in the specified directory.</returns>
      <param name="path">The directory for which file and subdirectory names are returned. </param>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)">
      <summary>[SECURITY CRITICAL] Returns an array of file system entries matching the specified search criteria.</summary>
      <returns>A String array of file system entries matching the search criteria.</returns>
      <param name="path">The path to be searched. </param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />. The <paramref name="searchPattern" /> parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />. </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetDirectories">
      <summary>[SECURITY CRITICAL] Returns the subdirectories of the current directory.</summary>
      <returns>An array of <see cref="T:System.IO.DirectoryInfo" /> objects.</returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetDirectories(System.String)">
      <summary>[SECURITY CRITICAL] Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" /> matching the given search criteria.</summary>
      <returns>An array of type DirectoryInfo matching <paramref name="searchPattern" />.</returns>
      <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System". </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFiles">
      <summary>[SECURITY CRITICAL] Returns a file list from the current directory.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFiles(System.String)">
      <summary>[SECURITY CRITICAL] Returns a file list from the current directory matching the given <paramref name="searchPattern" />.</summary>
      <returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns>
      <param name="searchPattern">The search string, such as "*.txt". </param>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFileSystemInfos">
      <summary>[SECURITY CRITICAL] Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries representing all the files and subdirectories in a directory.</summary>
      <returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries.</returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)">
      <summary>[SECURITY CRITICAL] Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> objects representing the files and subdirectories matching the specified search criteria.</summary>
      <returns>An array of strongly typed FileSystemInfo objects matching the search criteria.</returns>
      <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System". </param>
    </member>
    <member name="P:System.IO.FileLoadException.Data">
      <summary>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.</returns>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageException">
      <summary>The exception that is thrown when an operation in isolated storage fails.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> class with default properties.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageFile">
      <summary>Represents an isolated storage area containing files and directories.</summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.AvailableFreeSpace">
      <summary>Gets a value that represents the amount of free space available for isolated storage.</summary>
      <returns>The available free isolated storage space, in bytes.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CopyFile(System.String,System.String)">
      <summary>Copies an existing file to a new file.  </summary>
      <param name="sourceFileName">The name of the file to copy.</param>
      <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName " />was not found.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.-or-<paramref name="destinationFileName" /> exists.-or-An I/O error has occurred.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CopyFile(System.String,System.String,System.Boolean)">
      <summary>Copies an existing file to a new file, and optionally overwrites an existing file.</summary>
      <param name="sourceFileName">The name of the file to copy.</param>
      <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
      <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName " />was not found.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.-or-An I/O error has occurred.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory(System.String)">
      <summary>Creates a directory in the isolated storage scope.</summary>
      <param name="dir">The relative path of the directory to create within the isolated storage. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The store has been removed.-or-Unable to create directory.-or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dir" /> is badly formed.</exception>
      <exception cref="T:System.ArgumentNullException">The directory path is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CreateFile(System.String)">
      <summary>Creates a file in the isolated store.</summary>
      <returns>A new isolated storage file.</returns>
      <param name="path">The relative path of the file to be created in the isolated store.</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is malformed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory in <paramref name="path" /> does not exist.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DeleteDirectory(System.String)">
      <summary>Deletes a directory in the isolated storage scope.</summary>
      <param name="dir">The relative path of the directory to delete within the isolated storage scope. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The store has been removed.-or-Unable to delete directory. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dir" /> is badly formed.</exception>
      <exception cref="T:System.ArgumentNullException">The directory path is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DeleteFile(System.String)">
      <summary>Deletes a file in the isolated store.</summary>
      <param name="file">The relative path of the file to delete within the isolated store. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The store has been removed.-or-Unable to delete the file. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="file" /> is badly formed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DirectoryExists(System.String)">
      <summary>Determines whether the specified path refers to an existing directory in the isolated store.</summary>
      <returns>true if <paramref name="path" /> refers to an existing directory in the isolated store and is not null; otherwise, false.</returns>
      <param name="path">The path to test.</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />. </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.FileExists(System.String)">
      <summary>Determines whether the specified path refers to an existing file in the isolated store.</summary>
      <returns>true if <paramref name="path" /> refers to an existing file in the isolated store and is not null; otherwise, false.</returns>
      <param name="path">The path and file name to test.</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetCreationTime(System.String)">
      <summary>Returns the creation date and time of a specified file or directory.</summary>
      <returns>The creation date and time for the specified file or directory. This value is expressed in local time.</returns>
      <param name="path">The path to the file or directory for which to obtain creation date and time information.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames">
      <summary>Enumerates the directories in the root of an isolated store.</summary>
      <returns>An array of relative paths of directories in the root of the isolated store. A zero-length array specifies that there are no directories in the root.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames(System.String)">
      <summary>Enumerates directories in an isolated storage scope that match a given pattern.</summary>
      <returns>An <see cref="T:System.Array" /> of the relative paths of directories in the isolated storage scope that match <paramref name="searchPattern" />. A zero-length array specifies that there are no directories that match.</returns>
      <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern" /> is badly formed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Cannot find a part of the <paramref name="searchPattern" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames">
      <summary>Obtains the names of files in the root of an isolated store.</summary>
      <returns>An array of relative paths of files in the root of the isolated store.  A zero-length array specifies that there are no files in the root.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames(System.String)">
      <summary>Enumerates files in isolated storage scope that match a given pattern.</summary>
      <returns>An <see cref="T:System.Array" /> of relative paths of files in the isolated storage scope that match <paramref name="searchPattern" />. A zero-length array specifies that there are no files that match.</returns>
      <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern" /> is badly formed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Cannot find a part of the <paramref name="searchPattern" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetLastAccessTime(System.String)">
      <summary>Returns the date and time a specified file or directory was last accessed.</summary>
      <returns>The date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
      <param name="path">The path to the file or directory for which to obtain last access date and time information.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetLastWriteTime(System.String)">
      <summary>Returns the date and time a specified file or directory was last written to.</summary>
      <returns>The date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
      <param name="path">The path to the file or directory for which to obtain last write date and time information.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication">
      <summary>Obtains user-scoped isolated storage for use by an application that calls from the virtual host domain.</summary>
      <returns>The isolated storage file that corresponds to the isolated storage scope based on the identity of an application in a virtual host domain.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The group quota for the store is set to zero.-or-The store has been removed but cannot be recreated because a directory or file is being used by another process. -or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForSite">
      <summary>Obtains a user-scoped isolated store for use by all applications in a virtual host domain.</summary>
      <returns>The isolated storage file that corresponds to the isolated storage scope based on the calling code's application identity.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The group quota for the store is set to zero.-or-The store has been removed but cannot be recreated because a directory or file is being used by another process. -or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo(System.Int64)">
      <summary>Enables an application to explicitly request a larger quota size, in bytes.</summary>
      <returns>true if the new quota is accepted by the user, otherwise, false.</returns>
      <param name="newQuotaSize">The requested size, in bytes.</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newQuotaSize" /> is less than zero-or-<paramref name="newQuotaSize" /> is less than or equal to the value of the <see cref="P:System.IO.IsolatedStorage.IsolatedStorageFile.Quota" /> property.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newQuotaSize" /> is invalid.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.IsEnabled">
      <summary>Gets a value that indicates whether isolated storage is enabled.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.MoveDirectory(System.String,System.String)">
      <summary>Moves a specified directory and its contents to a new location.</summary>
      <param name="sourceDirectoryName">The name of the directory to move.</param>
      <param name="destinationDirectoryName">The path to the new location for <paramref name="sourceDirectoryName" />. This cannot be the path to an existing directory.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="sourceDirectoryName" /> does not exist.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.-or-<paramref name="destinationDirectoryName" /> already exists.-or-<paramref name="sourceDirectoryName" /> and <paramref name="destinationDirectoryName" /> refer to the same directory.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.MoveFile(System.String,System.String)">
      <summary>Moves a specified file to a new location, and optionally lets you specify a new file name.</summary>
      <param name="sourceFileName">The name of the file to move.</param>
      <param name="destinationFileName">The path to the new location for the file. If a file name is included, the moved file will have that name.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName" /> was not found.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode)">
      <summary>Opens a file in the specified mode.</summary>
      <returns>A file that is opened in the specified mode, with read/write access, and is unshared.</returns>
      <param name="path">The relative path of the file within the isolated store.</param>
      <param name="mode">The mode in which to open the file.</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is malformed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory in <paramref name="path" /> does not exist.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="M:System.IO.FileInfo.Open(System.IO.FileMode)" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a file in the specified mode with the specified file access.</summary>
      <returns>A file that is opened in the specified mode and access, and is unshared.</returns>
      <param name="path">The relative path of the file within the isolated store.</param>
      <param name="mode">The mode in which to open the file.</param>
      <param name="access">The type of access to open the file with.</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is malformed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory in <paramref name="path" /> does not exist.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="M:System.IO.FileInfo.Open(System.IO.FileMode)" /> .</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary>
      <returns>A file that is opened in the specified mode and access, and with the specified sharing options.</returns>
      <param name="path">The relative path of the file within the isolated store.</param>
      <param name="mode">The mode in which to open the file.</param>
      <param name="access">The type of access to open the file with.</param>
      <param name="share">The type of access other <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />   objects have to this file.</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is malformed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory in <paramref name="path" /> does not exist.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="M:System.IO.FileInfo.Open(System.IO.FileMode)" /> .</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.Quota">
      <summary>Gets a value that represents the maximum amount of space available for isolated storage.</summary>
      <returns>The limit of isolated storage space, in bytes.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Remove">
      <summary>Removes the isolated storage scope and all its contents.</summary>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store cannot be deleted. </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.UsedSize">
      <summary>Gets a value that represents the amount of the space used for isolated storage.</summary>
      <returns>The used isolated storage space, in bytes.</returns>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageFileStream">
      <summary>Exposes a file within isolated storage.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> class giving access to the file designated by <paramref name="path" />, in the specified <paramref name="mode" />, with the specified file <paramref name="access" />, using the file sharing mode specified by <paramref name="share" />, and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by <paramref name="isf" />.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </param>
      <param name="share">A bitwise combination of the <see cref="T:System.IO.FileShare" /> values. </param>
      <param name="isf">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
        <paramref name="isf" /> has been disposed. -or-<paramref name="path" /> is badly formed.-or-<paramref name="path" /> is null. -or-<paramref name="isf" /> is null.-orThe directory in <paramref name="path" /> does not exist.-or-No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> class giving access to the file designated by <paramref name="path" /> in the specified <paramref name="mode" />, with the specified file <paramref name="access" />, and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by <paramref name="isf" />.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </param>
      <param name="isf">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
        <paramref name="isf" /> has been disposed. -or-<paramref name="path" /> is badly formed.-or-<paramref name="path" /> is null. -or-<paramref name="isf" /> is null.-orThe directory in <paramref name="path" /> does not exist.-or-No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> class giving access to the file designated by <paramref name="path" />, in the specified <paramref name="mode" />, and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by <paramref name="isf" />.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <param name="isf">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
        <paramref name="isf" /> has been disposed. -or-<paramref name="path" /> is badly formed.-or-<paramref name="path" /> is null. -or-<paramref name="isf" /> is null.-orThe directory in <paramref name="path" /> does not exist.-or-No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the asynchronous read, which is possibly still pending. This <see cref="T:System.IAsyncResult" /> must be passed to this stream's <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)" /> method to determine how many bytes were read. This can be done either by the same code that called <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> or in a callback passed to <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</returns>
      <param name="buffer">The buffer to read data into. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin reading. </param>
      <param name="numBytes">The maximum number of bytes to read. </param>
      <param name="userCallback">The method to call when the asynchronous read operation is completed. This parameter is optional. </param>
      <param name="stateObject">The status of the asynchronous read. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="buffer" /> length minus offset is less than <paramref name="numBytes" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="numBytes" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">An asynchronous read was attempted past the end of the file. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous write, which is possibly still pending. This <see cref="T:System.IAsyncResult" /> must be passed to this stream's <see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" /> method to ensure that the write is complete, then frees resources appropriately. This can be done either by the same code that called <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> or in a callback passed to <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</returns>
      <param name="buffer">The buffer to write data to. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing. </param>
      <param name="numBytes">The maximum number of bytes to write. </param>
      <param name="userCallback">The method to call when the asynchronous write operation is completed. This parameter is optional. </param>
      <param name="stateObject">The status of the asynchronous write. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="buffer" /> length minus offset is less than <paramref name="numBytes" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="numBytes" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">An asynchronous read was attempted past the end of the file. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead">
      <summary>Gets a Boolean value indicating whether the file can be read.</summary>
      <returns>true if an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object can be read; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek">
      <summary>Gets a Boolean value indicating whether seek operations are supported.</summary>
      <returns>true if an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object supports seek operations; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite">
      <summary>Gets a Boolean value indicating whether you can write to the file.</summary>
      <returns>true if an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object can be written; otherwise, false.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)">
      <summary>Ends a pending asynchronous read request.</summary>
      <returns>The number of bytes read from the stream, between zero and the number of requested bytes. Streams will only return zero at the end of the stream. Otherwise, they will block until at least one byte is available.</returns>
      <param name="asyncResult">The stream is closed or an internal error has occurred</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> was not created by calling <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)" /> is called multiple times.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write.</summary>
      <param name="asyncResult">The pending asynchronous I/O request to end. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> was not created by calling <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)" /> is called multiple times.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush">
      <summary>Updates the file with the current state of the buffer then clears the buffer.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</summary>
      <param name="flushToDisk">true to flush all intermediate file buffers; otherwise, false.</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length">
      <summary>Gets the length of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object.</summary>
      <returns>The length of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object in bytes.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Position">
      <summary>Gets or sets the current position of the current <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object.</summary>
      <returns>The current position of this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The position cannot be set to a negative number.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Copies bytes from the current buffered <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object to an array.</summary>
      <returns>The total number of bytes read into the <paramref name="buffer" />. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream is reached.</returns>
      <param name="buffer">The buffer to read. </param>
      <param name="offset">The offset in the buffer at which to begin writing. </param>
      <param name="count">The maximum number of bytes to read. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in buffer. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte">
      <summary>Reads a single byte from the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object in isolated storage.</summary>
      <returns>The 8-bit unsigned integer value read from the isolated storage file.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object to the specified value.</summary>
      <returns>The new position in the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object.</returns>
      <param name="offset">The new position of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object. </param>
      <param name="origin">One of the <see cref="T:System.IO.SeekOrigin" /> values. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="origin " />must be one of the SeekOrigin values.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)">
      <summary>Sets the length of this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object to the specified <paramref name="value" />.</summary>
      <param name="value">The new length of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the value parameter to less than 0.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object using data read from a byte array.</summary>
      <param name="buffer">The buffer to write. </param>
      <param name="offset">The byte offset in buffer from which to begin. </param>
      <param name="count">The maximum number of bytes to write. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-The write attempt exceeds the quota for the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred. -or-Another thread may have caused an unexpected change in the position of the operating system’s file handle.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)">
      <summary>Writes a single byte to the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object.</summary>
      <param name="value">The byte value to write to the isolated storage file. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-The write attempt exceeds the quota for the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="T:System.Reflection.AmbiguousMatchException">
      <summary>The exception that is thrown when binding to a member results in more than one member matching the binding criteria. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class with an empty message string and the root cause exception set to null.</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class with its message string set to the given message and the root cause exception set to null.</summary>
      <param name="message">A string that indicates the reason this exception was thrown. </param>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Reflection.Assembly">
      <summary>Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.</summary>
    </member>
    <member name="P:System.Reflection.Assembly.CodeBase">
      <summary>[SECURITY CRITICAL] Gets the location of the assembly as specified originally, for example, in an <see cref="T:System.Reflection.AssemblyName" /> object.</summary>
      <returns>The location of the assembly as specified originally.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
      <summary>Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.</summary>
      <returns>An instance of <see cref="T:System.Object" /> representing the type, with culture, arguments, binder, and activation attributes set to null, and <see cref="T:System.Reflection.BindingFlags" /> set to Public or Instance, or null if <paramref name="typeName" /> is not found.</returns>
      <param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="typeName" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
      <exception cref="T:System.MemberAccessException">The method is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.Assembly.EntryPoint">
      <summary>Gets the entry point of this assembly.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), null is returned.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.FullName">
      <summary>Gets the display name of the assembly.</summary>
      <returns>The display name of the assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCallingAssembly">
      <summary>Returns the <see cref="T:System.Reflection.Assembly" /> of the method that invoked the currently executing method.</summary>
      <returns>The Assembly object of the method that invoked the currently executing method.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
      <summary>Gets all the custom attributes for this assembly.</summary>
      <returns>An array of type Object containing the custom attributes for this assembly.</returns>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />. </param>
      <exception cref="T:System.MemberAccessException">The method is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gets the custom attributes for this assembly as specified by type.</summary>
      <returns>An array of type Object containing the custom attributes for this assembly as specified by <paramref name="attributeType" />.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> for which the custom attributes are to be returned. </param>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a runtime type. </exception>
      <exception cref="T:System.MemberAccessException">The method is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
      <summary>Gets the assembly that contains the code that is currently executing.</summary>
      <returns>A <see cref="T:System.Reflection.Assembly" /> representing the assembly that contains the code that is currently executing. </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExportedTypes">
      <summary>Gets the types defined in this assembly that are visible outside the assembly.</summary>
      <returns>An array of Type objects that represent the types defined in this assembly that are visible outside the assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetFile(System.String)">
      <summary>[SECURITY CRITICAL] Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> for the specified file, or null if the file is not found.</returns>
      <param name="name">The name of the specified file. Do not include the path to the file.</param>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles(System.Boolean)">
      <summary>[SECURITY CRITICAL] Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</summary>
      <returns>An array of <see cref="T:System.IO.FileStream" /> objects.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
      <summary>Returns the names of all the resources in this assembly.</summary>
      <returns>An array of type String containing the names of all the resources.</returns>
      <exception cref="T:System.MemberAccessException">The method is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
      <summary>Loads the specified manifest resource from this assembly.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> representing the manifest resource; null if no resources were specified during compilation, or if the resource is not visible to the caller.</returns>
      <param name="name">The case-sensitive name of the manifest resource being requested. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly. </exception>
      <exception cref="T:System.MemberAccessException">The method is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> representing the manifest resource; null if no resources were specified during compilation or if the resource is not visible to the caller.</returns>
      <param name="type">The type whose namespace is used to scope the manifest resource name. </param>
      <param name="name">The case-sensitive name of the manifest resource being requested. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly. </exception>
      <exception cref="T:System.MemberAccessException">The method is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules">
      <summary>Gets all the modules that are part of this assembly.</summary>
      <returns>An array of modules.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The module to be loaded does not specify a file name extension. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetName">
      <summary>[SECURITY CRITICAL] Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
      <summary>[SECURITY CRITICAL] Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly, setting the codebase as specified by <paramref name="copiedName" />.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</returns>
      <param name="copiedName">true to set the <see cref="P:System.Reflection.Assembly.CodeBase" /> to the location of the assembly after it was shadow copied; false to set <see cref="P:System.Reflection.Assembly.CodeBase" /> to the original location. </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>Gets the satellite assembly for the specified culture.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly cannot be found. </exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the CultureInfo did not match the one specified. </exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>Gets the specified version of the satellite assembly for the specified culture.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <param name="version">The version of the satellite assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the CultureInfo or the version did not match the one specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly cannot be found. </exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String)">
      <summary>Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the specified class, or null if the class is not found.</returns>
      <param name="name">The full name of the type. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is invalid. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
      <exception cref="T:System.MemberAccessException">The method is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the specified class.</returns>
      <param name="name">The full name of the type. </param>
      <param name="throwOnError">true to throw an exception if the type is not found; false to return null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is invalid.-or- The length of <paramref name="name" /> exceeds 1024 characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true, and the type cannot be found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> requires a dependent assembly that was found but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
      <exception cref="T:System.MemberAccessException">The method is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetTypes">
      <summary>Gets the types defined in this assembly.</summary>
      <returns>An array of type <see cref="T:System.Type" /> containing objects for all the types defined in this assembly.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">The assembly contains one or more types that cannot be loaded. The array returned by the <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> property of this exception contains a <see cref="T:System.Type" /> object for each type that was loaded and null for each type that could not be loaded, while the <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> property contains an exception for each type that could not be loaded.</exception>
      <exception cref="T:System.MemberAccessException">The method is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.Assembly.ImageRuntimeVersion">
      <summary>Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.</summary>
      <returns>A string representing the CLR version folder name. This is not a full path.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether or not a specified attribute has been applied to the assembly.</summary>
      <returns>true if the attribute has been applied to the assembly; otherwise, false.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> of the attribute to be checked for this assembly. </param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> uses an invalid type.</exception>
    </member>
    <member name="P:System.Reflection.Assembly.IsDynamic">
      <summary>Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.</summary>
      <returns>true if the current assembly was generated dynamically in the current process; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[])">
      <summary>[SECURITY CRITICAL] Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the domain of the caller.</summary>
      <returns>The loaded assembly.</returns>
      <param name="rawAssembly">An array of type byte that is a COFF-based image containing an emitted assembly. </param>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])">
      <summary>[SECURITY CRITICAL] Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly.</summary>
      <returns>The loaded assembly.</returns>
      <param name="rawAssembly">An array of type byte that is a COFF-based image containing an emitted assembly. </param>
      <param name="rawSymbolStore">An array of type byte containing the raw bytes representing the symbols for the assembly. </param>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)">
      <summary>[SECURITY CRITICAL] Loads an assembly given its <see cref="T:System.Reflection.AssemblyName" />.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyRef">The <see cref="T:System.Reflection.AssemblyName" /> object that describes the assembly to be loaded. </param>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String)">
      <summary>Loads an assembly given the long form of its name.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyString">The long form of the assembly name. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> is a zero-length string. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> is not found. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> is not a valid assembly. -or-<paramref name="assemblyString" /> was compiled for a later version of the common language runtime than the currently executing version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String)">
      <summary>[SECURITY CRITICAL] Loads an assembly given its file name or path.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly. </param>
    </member>
    <member name="P:System.Reflection.Assembly.Location">
      <summary>[SECURITY CRITICAL] Gets the path or UNC location of the loaded file that contains the manifest.</summary>
      <returns>The location of the loaded file that contains the manifest. </returns>
    </member>
    <member name="P:System.Reflection.Assembly.ManifestModule">
      <summary>Gets the module that contains the manifest for the current assembly. </summary>
      <returns>A <see cref="T:System.Reflection.Module" /> object representing the module that contains the manifest for the assembly. </returns>
    </member>
    <member name="M:System.Reflection.Assembly.ToString">
      <summary>Returns the full name of the assembly, also known as the display name.</summary>
      <returns>The full name of the assembly, or the class name if the full name of the assembly cannot be determined.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyAlgorithmIdAttribute">
      <summary>Specifies an algorithm to hash all files in an assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> class with the specified hash algorithm, using one of the members of <see cref="T:System.Configuration.Assemblies.AssemblyHashAlgorithm" /> to represent the hash algorithm.</summary>
      <param name="algorithmId">A member of AssemblyHashAlgorithm that represents the hash algorithm. </param>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> class with the specified hash algorithm, using an unsigned integer to represent the hash algorithm.</summary>
      <param name="algorithmId">An unsigned integer representing the hash algorithm. </param>
    </member>
    <member name="P:System.Reflection.AssemblyAlgorithmIdAttribute.AlgorithmId">
      <summary>Gets the hash algorithm of an assembly manifest's contents.</summary>
      <returns>An unsigned integer representing the assembly hash algorithm.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>Defines a company name custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> class.</summary>
      <param name="company">The company name information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>Gets company name information.</summary>
      <returns>A string containing the company name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>Specifies the build configuration, such as retail or debug, for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> class.</summary>
      <param name="configuration">The assembly configuration. </param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>Gets assembly configuration information.</summary>
      <returns>A string containing the assembly configuration information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>Defines a copyright custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> class.</summary>
      <param name="copyright">The copyright information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>Gets copyright information.</summary>
      <returns>A string containing the copyright information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>Specifies which culture the assembly supports.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCultureAttribute" /> class with the culture supported by the assembly being attributed.</summary>
      <param name="culture">The culture supported by the attributed assembly. </param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>Gets the supported culture of the attributed assembly.</summary>
      <returns>A string containing the name of the supported culture.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>Defines a friendly default alias for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> class.</summary>
      <param name="defaultAlias">The assembly default alias information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>Gets default alias information.</summary>
      <returns>A string containing the default alias information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>Specifies that the assembly is not fully signed when created.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> class.</summary>
      <param name="delaySign">true if the feature this attribute represents is activated; otherwise, false. </param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>Gets a value indicating the state of the attribute.</summary>
      <returns>true if this assembly has been built as delay-signed; otherwise, false.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>Provides a text description for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> class.</summary>
      <param name="description">The assembly description. </param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>Gets assembly description information.</summary>
      <returns>A string containing the assembly description.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>Instructs a compiler to use a specific version number for the Win32 file version resource. The Win32 file version is not required to be the same as the assembly's version number.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> class, specifying the file version.</summary>
      <param name="version">The file version. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. </exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>Gets the Win32 file version resource name.</summary>
      <returns>A string containing the file version resource name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>Specifies a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</summary>
      <param name="assemblyFlags">A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>Gets an integer value representing the combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags specified when this attribute instance was created.</summary>
      <returns>An integer value representing a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>Defines additional version information for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> class.</summary>
      <param name="informationalVersion">The assembly version information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>Gets version information.</summary>
      <returns>A string containing the version information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>Specifies the name of a file containing the key pair used to generate a strong name.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the AssemblyKeyFileAttribute class with the name of the file containing the key pair to generate a strong name for the assembly being attributed.</summary>
      <param name="keyFile">The name of the file containing the key pair. </param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.</summary>
      <returns>A string containing the name of the file that contains the key pair.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>Specifies the name of a key container within the CSP containing the key pair used to generate a strong name.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> class with the name of the container holding the key pair used to generate a strong name for the assembly being attributed.</summary>
      <param name="keyName">The name of the container containing the key pair. </param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>Gets the name of the container having the key pair that is used to generate a strong name for the attributed assembly.</summary>
      <returns>A string containing the name of the container that has the relevant key pair.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyName">
      <summary>Describes an assembly's unique identity in full.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName" /> class.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName" /> class with the specified display name.</summary>
      <param name="assemblyName">The display name of the assembly, as returned by the <see cref="P:System.Reflection.AssemblyName.FullName" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> is a zero-length string.</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.Clone">
      <summary>Makes a copy of this AssemblyName object.</summary>
      <returns>An object that is a copy of this AssemblyName object.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CodeBase">
      <summary>[SECURITY CRITICAL] Gets or sets the location of the assembly as a URL.</summary>
      <returns>A string that is the URL location of the assembly. </returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureInfo">
      <summary>Gets or sets the culture that is supported by the assembly.</summary>
      <returns>The culture that is supported by the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Flags">
      <summary>Gets or sets the attributes of the assembly.</summary>
      <returns>The attributes of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.FullName">
      <summary>Gets the full name of the assembly, also known as the display name.</summary>
      <returns>A string that is the full name (display name) of the assembly.</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKey">
      <summary>Gets the public key that identifies the assembly. </summary>
      <returns>The public key of the assembly.</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKeyToken">
      <summary>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</summary>
      <returns>The public key token.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.HashAlgorithm">
      <summary>Gets or sets the hash algorithm used by the assembly manifest.</summary>
      <returns>The hash algorithm used by the assembly manifest.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Name">
      <summary>Gets or sets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</summary>
      <returns>The simple name of the assembly.</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
      <summary>Returns a value that indicates whether the loader resolves two assembly names to the same assembly.</summary>
      <returns>true if the loader resolves <paramref name="definition" /> to the same assembly as <paramref name="reference" />; otherwise, false.</returns>
      <param name="reference">The reference assembly name.</param>
      <param name="definition">The assembly name that is compared to the reference assembly.</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
      <summary>Sets the public key that identifies the assembly.</summary>
      <param name="publicKey">A byte array that contains the public key of the assembly. </param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
      <summary>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</summary>
      <param name="publicKeyToken">A byte array that contains the public key token of the assembly. </param>
    </member>
    <member name="M:System.Reflection.AssemblyName.ToString">
      <summary>Returns the full name of the assembly, also known as the display name.</summary>
      <returns>The full name of the assembly, or the class name if the full name of the assembly cannot be determined.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Version">
      <summary>Gets or sets the major, minor, build, and revision numbers of the assembly.</summary>
      <returns>The major, minor, build, and revision numbers of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.VersionCompatibility">
      <summary>Gets or sets information related to the assembly's compatibility with other assemblies.</summary>
      <returns>Information about the assembly's compatibility with other assemblies.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>Provides information about an <see cref="T:System.Reflection.Assembly" /> reference.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>Specifies that no flags are in effect.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>Specifies that a public key is formed from the full public key rather than the public key token.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileOptimizer">
      <summary>Specifies that just-in-time (JIT) compiler optimization is disabled for the assembly. This is the exact opposite of the meaning that is suggested by the member name..</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileTracking">
      <summary>Specifies that just-in-time (JIT) compiler tracking is enabled for the assembly.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>Specifies that the assembly can be retargeted at runtime to an assembly from a different publisher.</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>Defines a product name custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyProductAttribute" /> class.</summary>
      <param name="product">The product name information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>Gets product name information.</summary>
      <returns>A string containing the product name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>Specifies a description for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTitleAttribute" /> class.</summary>
      <param name="title">The assembly title. </param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>Gets assembly title information.</summary>
      <returns>A string containing the assembly title.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>Defines a trademark custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> class.</summary>
      <param name="trademark">The trademark information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>Gets trademark information.</summary>
      <returns>A String containing trademark information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>Specifies the version of the assembly being attributed.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the AssemblyVersionAttribute class with the version number of the assembly being attributed.</summary>
      <param name="version">The version number of the attributed assembly. </param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>Gets the version number of the attributed assembly.</summary>
      <returns>A string containing the assembly version number.</returns>
    </member>
    <member name="T:System.Reflection.Binder">
      <summary>Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type. </summary>
    </member>
    <member name="M:System.Reflection.Binder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Binder" /> class.</summary>
    </member>
    <member name="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
      <summary>Selects a field from the given set of fields, based on the specified criteria.</summary>
      <returns>The matching field. </returns>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values. </param>
      <param name="match">The set of fields that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="value">The field value used to locate a matching field. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types, in binder implementations that coerce types. If <paramref name="culture" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.Note:For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a String that represents 1000 to a Double value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> contains multiple fields that are equally good matches for <paramref name="value" />. For example, <paramref name="value" /> contains a MyClass object that implements the IMyClass interface, and <paramref name="match" /> contains a field of type MyClass and a field of type IMyClass. </exception>
      <exception cref="T:System.MissingFieldException">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> contains no fields that can accept <paramref name="value" />.</exception>
      <exception cref="T:System.NullReferenceException">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> is null or an empty array.-or-<paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
      <summary>Selects a method to invoke from the given set of methods, based on the supplied arguments.</summary>
      <returns>The matching method.</returns>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values. </param>
      <param name="match">The set of methods that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="args">The arguments that are passed in. The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <paramref name="names" /> parameter is used to specify an order other than positional order. If a binder implementation coerces argument types, the types and values of the arguments can be changed as well. </param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter.</param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types, in binder implementations that coerce types. If <paramref name="culture" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. Note:For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a String that represents 1000 to a Double value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.</param>
      <param name="names">The parameter names, if parameter names are to be considered when matching, or null if arguments are to be treated as purely positional. For example, parameter names must be used if arguments are not supplied in positional order. </param>
      <param name="state">After the method returns, <paramref name="state" /> contains a binder-provided object that keeps track of argument reordering. The binder creates this object, and the binder is the sole consumer of this object. If <paramref name="state" /> is not null when BindToMethod returns, you must pass <paramref name="state" /> to the <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> method if you want to restore <paramref name="args" /> to its original order, for example, so that you can retrieve the values of ref parameters (ByRef parameters in Visual Basic). </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="match" /> contains multiple methods that are equally good matches for <paramref name="args" />. For example, <paramref name="args" /> contains a MyClass object that implements the IMyClass interface, and <paramref name="match" /> contains a method that takes MyClass and a method that takes IMyClass. </exception>
      <exception cref="T:System.MissingMethodException">For the default binder, <paramref name="match" /> contains no methods that can accept the arguments supplied in <paramref name="args" />.</exception>
      <exception cref="T:System.ArgumentException">For the default binder, <paramref name="match" /> is null or an empty array.</exception>
    </member>
    <member name="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
      <summary>Changes the type of the given Object to the given Type.</summary>
      <returns>An object that contains the given value as the new type. </returns>
      <param name="value">The object to change into a new Type. </param>
      <param name="type">The new Type that <paramref name="value" /> will become. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types. If <paramref name="culture" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.Note:For example, this parameter is necessary to convert a String that represents 1000 to a Double value, because 1000 is represented differently by different cultures. </param>
    </member>
    <member name="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
      <summary>Upon returning from <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />, restores the <paramref name="args" /> argument to what it was when it came from BindToMethod.</summary>
      <param name="args">The actual arguments that are passed in. Both the types and values of the arguments can be changed. </param>
      <param name="state">A binder-provided object that keeps track of argument reordering. </param>
    </member>
    <member name="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Selects a method from the given set of methods, based on the argument type.</summary>
      <returns>The matching method, if found; otherwise, null.</returns>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values. </param>
      <param name="match">The set of methods that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="types">The parameter types used to locate a matching method. </param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="match" /> contains multiple methods that are equally good matches for the parameter types described by <paramref name="types" />. For example, the array in <paramref name="types" /> contains a <see cref="T:System.Type" /> object for MyClass and the array in <paramref name="match" /> contains a method that takes a base class of MyClass and a method that takes an interface that MyClass implements. </exception>
      <exception cref="T:System.ArgumentException">For the default binder, <paramref name="match" /> is null or an empty array.-or-An element of <paramref name="types" /> derives from <see cref="T:System.Type" />, but is not of type RuntimeType.</exception>
    </member>
    <member name="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Selects a property from the given set of properties, based on the specified criteria.</summary>
      <returns>The matching property.</returns>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values. </param>
      <param name="match">The set of properties that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="returnType">The return value the matching property must have. </param>
      <param name="indexes">The index types of the property being searched for. Used for index properties such as the indexer for a class. </param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="match" /> contains multiple properties that are equally good matches for <paramref name="returnType" /> and <paramref name="indexes" />. </exception>
      <exception cref="T:System.ArgumentException">For the default binder, <paramref name="match" /> is null or an empty array. </exception>
    </member>
    <member name="T:System.Reflection.BindingFlags">
      <summary>Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Default">
      <summary>No binding flag.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
      <summary>The case of the member name should not be considered when binding.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
      <summary>Only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
      <summary>Instance members should be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
      <summary>Static members should be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
      <summary>Public members should be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
      <summary>Non-public members should be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
      <summary>Public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.InvokeMethod">
      <summary>A method is to be invoked. This must not be a constructor or a type initializer.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.CreateInstance">
      <summary>Reflection should create an instance of the specified type. This flag calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetField">
      <summary>The value of the specified field should be returned.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetField">
      <summary>The value of the specified field should be set.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetProperty">
      <summary>The value of the specified property should be returned.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetProperty">
      <summary>The value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying PutDispProperty and PutRefDispProperty.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutDispProperty">
      <summary>The PROPPUT member on a COM object should be invoked. PROPPUT specifies a property-setting function that uses a value. Use PutDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutRefDispProperty">
      <summary>The PROPPUTREF member on a COM object should be invoked. PROPPUTREF specifies a property-setting function that uses a reference instead of a value. Use PutRefDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.ExactBinding">
      <summary>Types of the supplied arguments must exactly match the types of the corresponding formal parameters. Reflection throws an exception if the caller supplies a non-null Binder object, because that implies that the caller is supplying BindToXXX implementations that will pick the appropriate method. The default binder ignores this flag, whereas custom binders can implement the semantics of this flag.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SuppressChangeType">
      <summary>Not implemented.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.OptionalParamBinding">
      <summary>The set of members whose parameter count matches the number of supplied arguments should be returned. This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs). This flag should only be used with the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> method. Parameters with default values are used only in calls where trailing arguments are omitted. They must be the last arguments.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreReturn">
      <summary>Used in COM interop to specify that the return value of the member can be ignored.</summary>
    </member>
    <member name="T:System.Reflection.CallingConventions">
      <summary>Defines the valid calling conventions for a method.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Standard">
      <summary>Specifies the default calling convention as determined by the common language runtime. Use this calling convention for static methods. For instance or virtual methods use HasThis.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.VarArgs">
      <summary>Specifies the calling convention for methods with variable arguments.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Any">
      <summary>Specifies that either the Standard or the VarArgs calling convention may be used.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.HasThis">
      <summary>Specifies an instance or virtual method (not a static method). At run-time, the called method is passed a pointer to the target object as its first argument (the this pointer). The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.ExplicitThis">
      <summary>Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method). If ExplicitThis is set, HasThis must also be set. The first argument passed to the called method is still a this pointer, but the type of the first argument is now unknown. Therefore, a token that describes the type (or class) of the this pointer is explicitly stored into its metadata signature.</summary>
    </member>
    <member name="T:System.Reflection.ConstructorInfo">
      <summary>Discovers the attributes of a class constructor and provides access to constructor metadata. </summary>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.ConstructorName">
      <summary>Represents the name of the class constructor method as it is stored in metadata. This name is always ".ctor". This field is read-only.</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
      <summary>Invokes the current constructor with the specified arguments. </summary>
      <returns>An instance of the class that is associated with the constructor.</returns>
      <param name="parameters">An array of values that matches the number, order, and type (under the constraints of the default binder) of the parameters for this constructor. If this constructor takes no parameters, pass null or an array with zero elements; for example, new Object[] {} (New Object() {} in Visual Basic). Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
      <exception cref="T:System.MemberAccessException">The class is abstract.-or- The constructor is a class initializer. </exception>
      <exception cref="T:System.MethodAccessException">The constructor is private or protected.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> array does not contain values that match the types accepted by this constructor. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked constructor throws an exception. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">An incorrect number of parameters was passed. </exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" /> and <see cref="T:System.RuntimeArgumentHandle" /> types is not supported.</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When implemented in a derived class, invokes the current constructor with the specified arguments, using the specified binder and culture to validate the argument types.</summary>
      <returns>An instance of the class that is associated with the constructor.</returns>
      <param name="invokeAttr">One of the enumeration values that specifies the type of binding. </param>
      <param name="binder">An object that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder" /> is null, <see cref="P:System.Type.DefaultBinder" /> is used. </param>
      <param name="parameters">An array of type Object used to match the number, order, and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass null or an array with zero elements; for example, new Object[] {} (New Object() {} in Visual Basic). Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
      <param name="culture">An object that is used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> array does not contain values that match the types accepted by this constructor, under the constraints of the <paramref name="binder" />. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked constructor throws an exception. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">An incorrect number of parameters was passed. </exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" /> and <see cref="T:System.RuntimeArgumentHandle" /> types is not supported.</exception>
      <exception cref="T:System.MemberAccessException">The class is abstract.-or- The constructor is a class initializer. </exception>
      <exception cref="T:System.MethodAccessException">The constructor is private or protected. </exception>
    </member>
    <member name="P:System.Reflection.ConstructorInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a constructor.</summary>
      <returns>A value that indicates that this member is a constructor.</returns>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.TypeConstructorName">
      <summary>Represents the name of the type constructor method as it is stored in metadata. This name is always ".cctor". This property is read-only.</summary>
    </member>
    <member name="T:System.Reflection.CustomAttributeFormatException">
      <summary>The exception that is thrown when the binary format of a custom attribute is invalid.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with the default properties.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with the specified message.</summary>
      <param name="message">The message that indicates the reason this exception was thrown. </param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>Defines the member of a type that is the default member used by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. </summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.DefaultMemberAttribute" /> class.</summary>
      <param name="memberName">A String containing the name of the member to invoke. This may be a constructor, method, property, or field. A suitable invocation attribute must be specified when the member is invoked. The default member of a class can be specified by passing an empty String as the name of the member.The default member of a type is marked with the DefaultMemberAttribute custom attribute or marked in COM in the usual way. </param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>Gets the name from the attribute.</summary>
      <returns>A string representing the member name.</returns>
    </member>
    <member name="T:System.Reflection.EventAttributes">
      <summary>Specifies the attributes of an event.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.None">
      <summary>Specifies that the event has no attributes.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.SpecialName">
      <summary>Specifies that the event is special in a way described by the name.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.ReservedMask">
      <summary>Specifies a reserved flag for common language runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.RTSpecialName">
      <summary>Specifies that the common language runtime should check name encoding.</summary>
    </member>
    <member name="T:System.Reflection.EventInfo">
      <summary>Discovers the attributes of an event and provides access to event metadata.</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Adds an event handler to an event source.</summary>
      <param name="target">The event source. </param>
      <param name="handler">Encapsulation of a method or methods to be invoked when the event is raised by the target. </param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public add accessor.</exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used. </exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="target" /> parameter is null and the event is not static.-or- The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target. </exception>
      <exception cref="T:System.MemberAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.Attributes">
      <summary>Gets the attributes for this event.</summary>
      <returns>The attributes for this event.</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.EventHandlerType">
      <summary>Gets the Type object of the underlying event-handler delegate associated with this event.</summary>
      <returns>The delegate event handler.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod">
      <summary>Returns the method that is used to add an event-handler delegate to the event source.</summary>
      <returns>The method that is used to add an event-handler delegate to the event source, or null if the method is not public.</returns>
      <exception cref="T:System.MemberAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the method that is used to add an event-handler delegate to the event source, specifying whether to return the method if the current event is non-public.</summary>
      <returns>The method that is used to add an event-handler delegate to the event source, or null if <paramref name="nonPublic" /> is false and the method is not public.</returns>
      <param name="nonPublic">true to return the method if it is non-public; otherwise, false. </param>
      <exception cref="T:System.MemberAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod">
      <summary>Returns the method that is called when the event is raised.</summary>
      <returns>The method that is called when the event is raised.</returns>
      <exception cref="T:System.MemberAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</summary>
      <returns>The method that is called when the event is raised.</returns>
      <param name="nonPublic">true if non-public methods can be returned; otherwise, false. </param>
      <exception cref="T:System.MemberAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
      <summary>Returns the method that is used to remove an event-handler delegate from the event source.</summary>
      <returns>The method that is used to remove an event-handler delegate from the event source, or null if the method is not public.</returns>
      <exception cref="T:System.MemberAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
      <summary>When overridden in a derived class, retrieves the <see cref="T:System.Reflection.MethodInfo" /> object for removing a method of the event, specifying whether to return non-public methods.</summary>
      <returns>The method that is used to remove an event-handler delegate from the event source, or null if <paramref name="nonPublic" /> is false and the method is not public.</returns>
      <param name="nonPublic">true to return the method if the current event is non-public; otherwise, false. </param>
      <exception cref="T:System.MemberAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsMulticast">
      <summary>Gets a value that indicates whether the event is multicast.</summary>
      <returns>true if the delegate is an instance of a multicast delegate; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.IsSpecialName">
      <summary>Gets a value that indicates whether the <see cref="T:System.Reflection.EventInfo" /> has a name with a special meaning.</summary>
      <returns>true if this event has a special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</summary>
      <returns>A value indicating that this member is an event.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Removes an event handler from an event source.</summary>
      <param name="target">The event source. </param>
      <param name="handler">The delegate to be unhooked from the event source. </param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public remove accessor. </exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used. </exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="target" /> parameter is null and the event is not static.-or- The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target. </exception>
      <exception cref="T:System.MemberAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="T:System.Reflection.FieldAttributes">
      <summary>Specifies the attributes of a field.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FieldAccessMask">
      <summary>Specifies the access level of a given field.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PrivateScope">
      <summary>The field cannot be referenced.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Private">
      <summary>The field is accessible only by the parent type.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamANDAssem">
      <summary>The field is accessible only by subtypes in this assembly.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Assembly">
      <summary>The field is accessible throughout the assembly.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Family">
      <summary>The field is accessible only by type and subtypes.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamORAssem">
      <summary>The field is accessible by subtypes anywhere, as well as throughout this assembly.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Public">
      <summary>The field is accessible by any member for whom this scope is visible.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Static">
      <summary>The field represents the defined type, or else it is per-instance.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.InitOnly">
      <summary>The field is initialized only, and cannot be written after initialization.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Literal">
      <summary>The field's value is a compile-time (static or early bound) constant. The field can be set only from a constructor; any other attempt to set it throws <see cref="T:System.FieldAccessException" />.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.NotSerialized">
      <summary>The field does not have to be serialized when the type is remoted.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.SpecialName">
      <summary>Specifies a special field, with the name describing how the field is special.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PinvokeImpl">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.ReservedMask">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.RTSpecialName">
      <summary>The common language runtime (internal metadata APIs) should check the name encoding.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldMarshal">
      <summary>The field has marshaling information.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasDefault">
      <summary>The field has a default value.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldRVA">
      <summary>The field has a relative virtual address (RVA). The RVA is the location of the method body in the current image, as an address relative to the start of the image file in which it is located.</summary>
    </member>
    <member name="T:System.Reflection.FieldInfo">
      <summary>Discovers the attributes of a field and provides access to field metadata. </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.Attributes">
      <summary>Gets the attributes that are associated with this field.</summary>
      <returns>The attributes for this field.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldHandle">
      <summary>Gets a handle to the internal metadata representation of a field.</summary>
      <returns>A handle to the internal metadata representation of a field.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldType">
      <summary>Gets the type of this field object.</summary>
      <returns>The type of this field object.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
      <summary>Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle.</summary>
      <returns>The field that is specified by <paramref name="handle" />.</returns>
      <param name="handle">A structure that contains the handle to the internal metadata representation of a field. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.</exception>
      <exception cref="T:System.MethodAccessException">The member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle, for the specified generic type.</summary>
      <returns>The field specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</returns>
      <param name="handle">A structure that contains the handle to the internal metadata representation of a field.</param>
      <param name="declaringType">A structure that contains the handle to the generic type that defines the field.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid. -or-<paramref name="declaringType" /> is not compatible with <paramref name="handle" />. For example, <paramref name="declaringType" /> is the runtime type handle of the generic type definition, and <paramref name="handle" /> comes from a constructed type. See Remarks.</exception>
      <exception cref="T:System.MethodAccessException">The member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRawConstantValue">
      <summary>Returns a literal value associated with the field by a compiler. </summary>
      <returns>The literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is null.</returns>
      <exception cref="T:System.InvalidOperationException">The Constant table in unmanaged metadata does not contain a constant value for the current property.</exception>
      <exception cref="T:System.FormatException">The type of the value is not one of the types permitted by the Common Language Specification (CLS). (See the ECMA Partition II specification.) </exception>
      <exception cref="T:System.MethodAccessException">The member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
      <summary>When overridden in a derived class, returns the value of a field supported by a given object.</summary>
      <returns>An object that contains the value of the field reflected by this instance.</returns>
      <param name="obj">The object whose field value will be returned. </param>
      <exception cref="T:System.Reflection.TargetException">The field is nonstatic and <paramref name="obj" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">A field is marked literal, but the field does not have one of the accepted literal types. </exception>
      <exception cref="T:System.FieldAccessException">The field is not accessible. </exception>
      <exception cref="T:System.ArgumentException">The method is neither declared nor inherited by the class of <paramref name="obj" />. </exception>
      <exception cref="T:System.MethodAccessException">The member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsAssembly">
      <summary>Gets a value that indicates whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</summary>
      <returns>true if the visibility of this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamily">
      <summary>Gets a value that indicates whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Family" />; that is, the field is visible only within its class and derived classes.</summary>
      <returns>true if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Family" />; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
      <summary>Gets a value that indicates whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</summary>
      <returns>true if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
      <summary>Gets a value that indicates whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</summary>
      <returns>true if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsInitOnly">
      <summary>Gets a value that indicates whether the field can be set only in the body of the constructor.</summary>
      <returns>true if the field has the InitOnly attribute set; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsLiteral">
      <summary>Gets a value that indicates whether the value is written at compile time and cannot be changed.</summary>
      <returns>true if the field has the Literal attribute set; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsNotSerialized">
      <summary>Gets a value that indicates whether this field has the NotSerialized attribute. </summary>
      <returns>true if the field has the <see cref="F:System.Reflection.FieldAttributes.NotSerialized" /> attribute set; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPinvokeImpl">
      <summary>Gets a value that indicates whether the corresponding PinvokeImpl attribute is set in <see cref="T:System.Reflection.FieldAttributes" />. </summary>
      <returns>true if the field has the <see cref="F:System.Reflection.FieldAttributes.PinvokeImpl" /> attribute set; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPrivate">
      <summary>Gets a value that indicates whether the field is private.</summary>
      <returns>true if the field is private; otherwise; false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPublic">
      <summary>Gets a value that indicates whether the field is public.</summary>
      <returns>true if this field is public; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSpecialName">
      <summary>Gets a value that indicates whether the field has a name that has special significance.</summary>
      <returns>true if the field has the <see cref="F:System.Reflection.FieldAttributes.SpecialName" /> attribute set; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsStatic">
      <summary>Gets a value that indicates whether the field is static (Shared in Visual Basic).</summary>
      <returns>true if this field is static; otherwise, false.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.MemberType">
      <summary>Gets a value that indicates that this member is a field.</summary>
      <returns>A value that indicates that this member is a field.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
      <summary>Sets the value of the field that is supported by the given object.</summary>
      <param name="obj">The object whose field value will be set. </param>
      <param name="value">The value to assign to the field. </param>
      <exception cref="T:System.FieldAccessException">The field is not accessible. </exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="obj" /> parameter is null and the field is an instance field. </exception>
      <exception cref="T:System.ArgumentException">The field does not exist on the object.-or- The <paramref name="value" /> parameter cannot be converted and stored in the field. </exception>
      <exception cref="T:System.MethodAccessException">The member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, sets the value of the field with the specified constraints on type conversion.</summary>
      <param name="obj">The object whose field value will be set. </param>
      <param name="value">The value to assign to the field. </param>
      <param name="invokeAttr">The type of binding that is desired. </param>
      <param name="binder">An object that enables the binding of this field to <paramref name="obj" /> and the coercion of <paramref name="value" /> to <see cref="P:System.Reflection.FieldInfo.FieldType" />. If <paramref name="binder" /> is null, then <see cref="P:System.Type.DefaultBinder" /> is used. </param>
      <param name="culture">The culture that controls the coercion of <paramref name="obj" /> to <see cref="P:System.Reflection.FieldInfo.FieldType" />. </param>
      <exception cref="T:System.FieldAccessException">The field is not accessible. </exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="obj" /> parameter is null and the field is an instance field. </exception>
      <exception cref="T:System.ArgumentException">The field does not exist on the object.-or- The <paramref name="value" /> parameter cannot be converted and stored in the field. </exception>
      <exception cref="T:System.MethodAccessException">The member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="T:System.Reflection.GenericParameterAttributes">
      <summary>Describes the constraints on a generic type parameter of a generic type or method.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.None">
      <summary>There are no special flags.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.VarianceMask">
      <summary>Selects the combination of all variance flags. This value is the result of using logical OR to combine the following flags: <see cref="F:System.Reflection.GenericParameterAttributes.Contravariant" /> and <see cref="F:System.Reflection.GenericParameterAttributes.Covariant" />.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Covariant">
      <summary>The generic type parameter is covariant. A covariant type parameter can appear as the result type of a method, the type of a read-only field, a declared base type, or an implemented interface.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Contravariant">
      <summary>The generic type parameter is contravariant. A contravariant type parameter can appear as a parameter type in method signatures. </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
      <summary>Selects the combination of all special constraint flags. This value is the result of using logical OR to combine the following flags: <see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint" />, <see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint" />, and <see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint" />.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint">
      <summary>A type can be substituted for the generic type parameter only if it is a reference type.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint">
      <summary>A type can be substituted for the generic type parameter only if it is a value type and is not nullable.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint">
      <summary>A type can be substituted for the generic type parameter only if it has a parameterless constructor.</summary>
    </member>
    <member name="T:System.Reflection.ICustomAttributeProvider">
      <summary>Provides custom attributes for reflection objects that support them.</summary>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of all of the custom attributes defined on this member, excluding named attributes, or an empty array if there are no custom attributes.</summary>
      <returns>An array of Objects representing custom attributes, or an empty array.</returns>
      <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined on this member. </exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes defined on this member, identified by type, or an empty array if there are no custom attributes of that type.</summary>
      <returns>An array of Objects representing custom attributes, or an empty array.</returns>
      <param name="attributeType">The type of the custom attributes. </param>
      <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined on this member. </exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instance of <paramref name="attributeType" /> is defined on this member.</summary>
      <returns>true if the <paramref name="attributeType" /> is defined on this member; false otherwise.</returns>
      <param name="attributeType">The type of the custom attributes. </param>
      <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param>
    </member>
    <member name="T:System.Reflection.InterfaceMapping">
      <summary>Retrieves the mapping of an interface into the actual methods on a class that implements that interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceMethods">
      <summary>Shows the methods that are defined on the interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceType">
      <summary>Shows the type that represents the interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetMethods">
      <summary>Shows the methods that implement the interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetType">
      <summary>Represents the type that was used to create the interface mapping.</summary>
    </member>
    <member name="T:System.Reflection.IReflect">
      <summary>Interoperates with the IDispatch interface.</summary>
    </member>
    <member name="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the <see cref="T:System.Reflection.FieldInfo" /> object that corresponds to the specified field and binding flag.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object containing the field information for the named object that meets the search constraints specified in <paramref name="bindingAttr" />.</returns>
      <param name="name">The name of the field to find. </param>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple fields with the same name. </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the current class.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects containing all the field information for this reflection object that meets the search constraints specified in <paramref name="bindingAttr" />.</returns>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects corresponding to all public members or to all members that match a specified name.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects matching the <paramref name="name" /> parameter.</returns>
      <param name="name">The name of the member to find. </param>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond either to all public members or to all members of the current class.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects containing all the member information for this reflection object.</returns>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves a <see cref="T:System.Reflection.MethodInfo" /> object that corresponds to a specified method under specified search constraints.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object containing the method information, with the match being based on the method name and search constraints specified in <paramref name="bindingAttr" />.</returns>
      <param name="name">The name of the member to find. </param>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple methods with the same name. </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Retrieves a <see cref="T:System.Reflection.MethodInfo" /> object corresponding to a specified method, using a <see cref="T:System.Type" /> array to choose from among overloaded methods.</summary>
      <returns>The requested method that matches all the specified parameters.</returns>
      <param name="name">The name of the member to find. </param>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
      <param name="binder">An object that implements <see cref="T:System.Reflection.Binder" />, containing properties related to this method. </param>
      <param name="types">An array used to choose among overloaded methods. </param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple methods with the same name. </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MethodInfo" /> objects with all public methods or all methods of the current class.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects containing all the methods defined for this reflection object that meet the search constraints specified in <paramref name="bindingAttr" />.</returns>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.PropertyInfo" /> objects corresponding to all public properties or to all properties of the current class.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects for all the properties defined on the reflection object.</returns>
      <param name="bindingAttr">The binding attribute used to control the search. </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves a <see cref="T:System.Reflection.PropertyInfo" /> object corresponding to a specified property under specified search constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object for the located property that meets the search constraints specified in <paramref name="bindingAttr" />, or null if the property was not located.</returns>
      <param name="name">The name of the property to find. </param>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple fields with the same name. </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Retrieves a <see cref="T:System.Reflection.PropertyInfo" /> object that corresponds to a specified property with specified search constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object for the located property, if a property with the specified name was located in this reflection object, or null if the property was not located.</returns>
      <param name="name">The name of the member to find. </param>
      <param name="bindingAttr">The binding attribute used to control the search. </param>
      <param name="binder">An object that implements <see cref="T:System.Reflection.Binder" />, containing properties related to this method. </param>
      <param name="returnType">The type of the property. </param>
      <param name="types">An array used to choose among overloaded methods with the same name. </param>
      <param name="modifiers">An array used to choose the parameter modifiers. </param>
    </member>
    <member name="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes a specified member.</summary>
      <returns>The specified member.</returns>
      <param name="name">The name of the member to find. </param>
      <param name="invokeAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> invocation attributes. The <paramref name="invokeAttr" /> parameter may be a constructor, method, property, or field. A suitable invocation attribute must be specified. Invoke the default member of a class by passing the empty string ("") as the name of the member. </param>
      <param name="binder">One of the <see cref="T:System.Reflection.BindingFlags" /> bit flags. Implements <see cref="T:System.Reflection.Binder" />, containing properties related to this method. </param>
      <param name="target">The object on which to invoke the specified member. This parameter is ignored for static members. </param>
      <param name="args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects. This array has the same length as the <paramref name="args" /> parameter, representing the invoked member's argument attributes in the metadata. A parameter can have the following attributes: pdIn, pdOut, pdRetval, pdOptional, and pdHasDefault. These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. For example, <paramref name="culture" /> converts a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures. If this parameter is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name="namedParameters">A String array of parameters. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is <see cref="F:System.Reflection.BindingFlags.CreateInstance" /> and another bit flag is also set. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is not <see cref="F:System.Reflection.BindingFlags.CreateInstance" /> and <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is not an invocation attribute from <see cref="T:System.Reflection.BindingFlags" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> specifies both get and set for a property or field. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> specifies both a field set and an Invoke method. <paramref name="args" /> are provided for a field get. </exception>
      <exception cref="T:System.ArgumentException">More than one argument is specified for a field set. </exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception>
      <exception cref="T:System.MissingMethodException">The method cannot be found. </exception>
      <exception cref="T:System.MethodAccessException">The member that is being invoked is not accessible to the caller.-or-The member that is being invoked, or the type that contains that member, has the <see cref="T:System.Security.SecurityCriticalAttribute" /> attribute. </exception>
    </member>
    <member name="P:System.Reflection.IReflect.UnderlyingSystemType">
      <summary>Gets the underlying type that represents the <see cref="T:System.Reflection.IReflect" /> object.</summary>
      <returns>The underlying type that represents the <see cref="T:System.Reflection.IReflect" /> object.</returns>
    </member>
    <member name="T:System.Reflection.LocalVariableInfo">
      <summary>Discovers the attributes of a local variable and provides access to local variable metadata.</summary>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.IsPinned">
      <summary>Gets a <see cref="T:System.Boolean" /> value indicating whether the object referred to by the local variable is pinned in memory.</summary>
      <returns>true if the object referred to by the variable is pinned in memory; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalIndex">
      <summary>Gets the index of the local variable within the method body.</summary>
      <returns>An integer value that represents the order of declaration of the local variable within the method body.</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalType">
      <summary>Gets the type of the local variable.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of the local variable.</returns>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.ToString">
      <summary>Returns a user-readable string that describes the local variable.</summary>
      <returns>A string that displays information about the local variable, including the type name, index, and pinned status.</returns>
    </member>
    <member name="T:System.Reflection.MemberFilter">
      <summary>Represents a delegate that is used to filter a list of members represented in an array of <see cref="T:System.Reflection.MemberInfo" /> objects.</summary>
      <returns>true to include the member in the filtered list; otherwise false.</returns>
      <param name="m">The <see cref="T:System.Reflection.MemberInfo" /> object to which the filter is applied. </param>
      <param name="filterCriteria">An arbitrary object used to filter the list. </param>
    </member>
    <member name="T:System.Reflection.MemberInfo">
      <summary>Obtains information about the attributes of a member and provides access to member metadata.</summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>When overridden in a derived class, returns an array of all custom attributes applied to this member. </summary>
      <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks</param>
      <exception cref="T:System.TypeLoadException">A custom attribute type could not be loaded. </exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type" />.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <paramref name="attributeType" /> have been applied.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. </param>
      <exception cref="T:System.TypeLoadException">A custom attribute type could not be loaded. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" /> or any of its derived types is applied to this member; otherwise, false.</returns>
      <param name="attributeType">The type of custom attribute to search for. The search includes derived types. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</param>
    </member>
    <member name="P:System.Reflection.MemberInfo.MemberType">
      <summary>When overridden in a derived class, gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of the member — method, constructor, event, and so on.</summary>
      <returns>The type of member.</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MetadataToken">
      <summary>Gets a value that identifies a metadata element.</summary>
      <returns>A value which, in combination with <see cref="P:System.Reflection.MemberInfo.Module" />, uniquely identifies a metadata element.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Reflection.MemberInfo" /> represents an array method, such as Address, on an array type whose element type is a dynamic type that has not been completed. To get a metadata token in this case, pass the <see cref="T:System.Reflection.MemberInfo" /> object to the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> method; or use the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" />  method to get the token directly, instead of using the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> method to get a <see cref="T:System.Reflection.MethodInfo" /> first.</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Module">
      <summary>Gets the module in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</summary>
      <returns>The <see cref="T:System.Reflection.Module" /> in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</returns>
      <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
      <summary>Gets the name of the current member.</summary>
      <returns>The name of this member.</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance of MemberInfo.</summary>
      <returns>The type object through which this MemberInfo object was obtained.</returns>
    </member>
    <member name="T:System.Reflection.MemberTypes">
      <summary>Marks each type of member that is defined as a derived class of MemberInfo.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Constructor">
      <summary>Specifies that the member is a constructor, representing a <see cref="T:System.Reflection.ConstructorInfo" /> member. Hexadecimal value of 0x01.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Event">
      <summary>Specifies that the member is an event, representing an <see cref="T:System.Reflection.EventInfo" /> member. Hexadecimal value of 0x02.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Field">
      <summary>Specifies that the member is a field, representing a <see cref="T:System.Reflection.FieldInfo" /> member. Hexadecimal value of 0x04.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Method">
      <summary>Specifies that the member is a method, representing a <see cref="T:System.Reflection.MethodInfo" /> member. Hexadecimal value of 0x08.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Property">
      <summary>Specifies that the member is a property, representing a <see cref="T:System.Reflection.PropertyInfo" /> member. Hexadecimal value of 0x10.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.TypeInfo">
      <summary>Specifies that the member is a type, representing a <see cref="F:System.Reflection.MemberTypes.TypeInfo" /> member. Hexadecimal value of 0x20.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Custom">
      <summary>Specifies that the member is a custom member type. Hexadecimal value of 0x40.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.NestedType">
      <summary>Specifies that the member is a nested type, extending <see cref="T:System.Reflection.MemberInfo" />.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.All">
      <summary>Specifies all member types.</summary>
    </member>
    <member name="T:System.Reflection.MethodAttributes">
      <summary>Specifies flags for method attributes. These flags are defined in the corhdr.h file.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.MemberAccessMask">
      <summary>Retrieves accessibility information.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PrivateScope">
      <summary>Indicates that the member cannot be referenced.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Private">
      <summary>Indicates that the method is accessible only to the current class.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamANDAssem">
      <summary>Indicates that the method is accessible to members of this type and its derived types that are in this assembly only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Assembly">
      <summary>Indicates that the method is accessible to any class of this assembly.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Family">
      <summary>Indicates that the method is accessible only to members of this class and its derived classes.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamORAssem">
      <summary>Indicates that the method is accessible to derived classes anywhere, as well as to any class in the assembly.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Public">
      <summary>Indicates that the method is accessible to any object for which this object is in scope.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Static">
      <summary>Indicates that the method is defined on the type; otherwise, it is defined per instance.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Final">
      <summary>Indicates that the method cannot be overridden.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Virtual">
      <summary>Indicates that the method is virtual.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HideBySig">
      <summary>Indicates that the method hides by name and signature; otherwise, by name only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.CheckAccessOnOverride">
      <summary>Indicates that the method can only be overridden when it is also accessible.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.VtableLayoutMask">
      <summary>Retrieves vtable attributes.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReuseSlot">
      <summary>Indicates that the method will reuse an existing slot in the vtable. This is the default behavior.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.NewSlot">
      <summary>Indicates that the method always gets a new slot in the vtable.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Abstract">
      <summary>Indicates that the class does not provide an implementation of this method.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.SpecialName">
      <summary>Indicates that the method is special. The name describes how this method is special.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PinvokeImpl">
      <summary>Indicates that the method implementation is forwarded through PInvoke (Platform Invocation Services).</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.UnmanagedExport">
      <summary>Indicates that the managed method is exported by thunk to unmanaged code.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RTSpecialName">
      <summary>Indicates that the common language runtime checks the name encoding.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReservedMask">
      <summary>Indicates a reserved flag for runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HasSecurity">
      <summary>Indicates that the method has security associated with it. Reserved flag for runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RequireSecObject">
      <summary>Indicates that the method calls another method containing security code. Reserved flag for runtime use only.</summary>
    </member>
    <member name="T:System.Reflection.MethodBase">
      <summary>Provides information about methods and constructors. </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.Attributes">
      <summary>Gets the attributes associated with this method.</summary>
      <returns>The attributes of the method.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.CallingConvention">
      <summary>Gets a value that indicates the calling conventions for this method.</summary>
      <returns>The calling conventions for this method.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.ContainsGenericParameters">
      <summary>Gets a value that indicates whether the generic method contains unassigned generic type parameters.</summary>
      <returns>true if the current <see cref="T:System.Reflection.MethodBase" /> object represents a generic method that contains unassigned generic type parameters; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetCurrentMethod">
      <summary>Returns a <see cref="T:System.Reflection.MethodBase" /> object that represents the currently executing method.</summary>
      <returns>The currently executing method.</returns>
      <exception cref="T:System.Reflection.TargetException">This member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</summary>
      <returns>An array that contains the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</returns>
      <exception cref="T:System.NotSupportedException">The current object is a <see cref="T:System.Reflection.ConstructorInfo" />. Generic constructors are not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
      <summary>Gets method information for the method that is represented by the specified handle.</summary>
      <returns>The method that is represented by <paramref name="handle" />.</returns>
      <param name="handle">The method's handle. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.</exception>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>Gets the constructor or method represented by the specified handle, for the specified generic type.</summary>
      <returns>The method or constructor specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</returns>
      <param name="handle">A handle to the internal metadata representation of a constructor or method.</param>
      <param name="declaringType">A handle to the generic type that defines the constructor or method.</param>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodImplementationFlags">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Reflection.MethodImplAttributes" /> flags.</summary>
      <returns>The method implementation flags.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetParameters">
      <summary>When overridden in a derived class, gets the parameters of this method or constructor.</summary>
      <returns>An array that contains the parameters of this method or constructor.</returns>
      <exception cref="T:System.MethodAccessException">This member is invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
      <summary>Invokes the method or constructor represented by the current instance, using the specified parameters.</summary>
      <returns>The return value of the invoked method, or null in the case of a constructor.</returns>
      <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor. </param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <paramref name="parameters" /> should be null.If the method or constructor represented by this instance takes a ref parameter (ByRef in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="obj" /> parameter is null and the method is not static.-or- The method is not declared or inherited by the class of <paramref name="obj" />. -or-A static constructor is invoked, and <paramref name="obj" /> is neither null nor an instance of the class that declared the constructor.</exception>
      <exception cref="T:System.ArgumentException">The elements of the <paramref name="parameters" /> array do not match the signature of the method or constructor reflected by this instance. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked method or constructor throws an exception. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The <paramref name="parameters" /> array does not have the correct number of arguments. </exception>
      <exception cref="T:System.MethodAccessException">The method or constructor is not accessible. </exception>
      <exception cref="T:System.InvalidOperationException">The type that declares the method is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true for the declaring type.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, invokes the reflected method or constructor with the given parameters.</summary>
      <returns>The return value of the invoked method, or null in the case of a constructor, or null if the method's return type is void. </returns>
      <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor.</param>
      <param name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. If <paramref name="binder" /> is null, this parameter is assigned the value <see cref="F:System.Reflection.BindingFlags.Default" />; thus, whatever you pass in is ignored. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects via reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be null.If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
      <param name="culture">Culture information that governs the coercion of types. If this is null, the CultureInfo for the current thread is used. (This is necessary, for example, to convert a String that represents 1000 to a Double value, because 1000 is represented differently by different cultures.) </param>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="obj" /> parameter is null and the method is not static.-or- The method is not declared or inherited by the class of <paramref name="obj" />. -or-A static constructor is invoked, and <paramref name="obj" /> is neither null nor an instance of the class that declared the constructor.</exception>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="parameters" /> parameter does not match the signature of the method or constructor reflected by this instance. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The <paramref name="parameters" /> array does not have the correct number of arguments. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked method or constructor throws an exception. </exception>
      <exception cref="T:System.MethodAccessException">The method or constructor is not accessible. </exception>
      <exception cref="T:System.InvalidOperationException">The type that declares the method is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true for the declaring type.</exception>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAbstract">
      <summary>Gets a value that indicates whether the method is abstract (MustInherit in Visual Basic).</summary>
      <returns>true if the method is abstract; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAssembly">
      <summary>Gets a value that indicates whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Assembly" />; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</summary>
      <returns>true if the visibility of this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Assembly" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsConstructor">
      <summary>Gets a value that indicates whether the method is a constructor.</summary>
      <returns>true if this method is a constructor represented by a <see cref="T:System.Reflection.ConstructorInfo" /> object (see note in Remarks about <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> objects); otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamily">
      <summary>Gets a value that indicates whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Family" />; that is, the method or constructor is visible only within its class and derived classes.</summary>
      <returns>true if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Family" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyAndAssembly">
      <summary>Gets a value that indicates whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" />; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.</summary>
      <returns>true if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyOrAssembly">
      <summary>Gets a value that indicates whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem" />; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.</summary>
      <returns>true if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFinal">
      <summary>Gets a value that indicates whether this method is final (NotOverridable in Visual Basic).</summary>
      <returns>true if this method is final; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethod">
      <summary>Gets a value that indicates whether the method is generic.</summary>
      <returns>true if the current <see cref="T:System.Reflection.MethodBase" /> represents a generic method; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethodDefinition">
      <summary>Gets a value that indicates whether the method is a generic method definition.</summary>
      <returns>true if the current <see cref="T:System.Reflection.MethodBase" /> object represents the definition of a generic method; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsHideBySig">
      <summary>Gets a value that indicates whether only a member of the same kind with exactly the same signature is hidden in the derived class.</summary>
      <returns>true if the member is hidden by signature; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPrivate">
      <summary>Gets a value that indicates whether this member is private.</summary>
      <returns>true if access to this method is restricted to other members of the class; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPublic">
      <summary>Gets a value that indicates whether this is a public method.</summary>
      <returns>true if this method is public; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSpecialName">
      <summary>Gets a value that indicates whether this method has a special name.</summary>
      <returns>true if this method has a special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsStatic">
      <summary>Gets a value that indicates whether the method is static (Shared in Visual Basic).</summary>
      <returns>true if this method is static; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsVirtual">
      <summary>Gets a value that indicates whether the method is virtual (Overridable in Visual Basic).</summary>
      <returns>true if this method is virtual; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodHandle">
      <summary>Gets a handle to the internal metadata representation of a method.</summary>
      <returns>A runtime handle for the method.</returns>
    </member>
    <member name="T:System.Reflection.MethodImplAttributes">
      <summary>Specifies flags for the attributes of a method implementation.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.CodeTypeMask">
      <summary>Specifies flags about code type.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.IL">
      <summary>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Native">
      <summary>Specifies that the method implementation is native.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.OPTIL">
      <summary>Specifies that the method implementation is in Optimized Intermediate Language (OPTIL).</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Runtime">
      <summary>Specifies that the method implementation is provided by the runtime.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ManagedMask">
      <summary>Specifies whether the code is managed or unmanaged.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Unmanaged">
      <summary>Specifies that the method implementation is unmanaged.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Managed">
      <summary>Specifies that the method implementation is managed.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ForwardRef">
      <summary>Specifies that the method is not defined.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.PreserveSig">
      <summary>Specifies that the method signature is exported exactly as declared.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.InternalCall">
      <summary>Specifies an internal call.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Synchronized">
      <summary>Specifies that the method is single-threaded through the body. Static methods (Shared methods in Visual Basic) lock on the type, whereas instance methods lock on the instance. You can also use the C# lock statement or the Visual Basic Lock function for this purpose. </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoInlining">
      <summary>Specifies that the method cannot be inlined.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoOptimization">
      <summary>Specifies that the method is not optimized by the just-in-time (JIT) compiler when debugging possible code generation problems. </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.MaxMethodImplVal">
      <summary>Specifies a range check value.</summary>
    </member>
    <member name="T:System.Reflection.MethodInfo">
      <summary>Discovers the attributes of a method and provides access to method metadata.</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetBaseDefinition">
      <summary>When overridden in a derived class, returns the MethodInfo object for the method on the direct or indirect base class in which the method represented by this instance was first declared.</summary>
      <returns>A MethodInfo object for the first implementation of this method.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
      <summary>Returns a <see cref="T:System.Reflection.MethodInfo" /> object that represents a generic method definition from which the current method can be constructed.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing a generic method definition from which the current method can be constructed.</returns>
      <exception cref="T:System.InvalidOperationException">The current method is not a generic method. That is, <see cref="P:System.Reflection.MethodInfo.IsGenericMethod" /> returns false. </exception>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
      <summary>Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <see cref="T:System.Reflection.MethodInfo" /> object representing the resulting constructed method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the constructed method formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic method definition.</returns>
      <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic method definition.</param>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Reflection.MethodInfo" /> does not represent a generic method definition. That is, <see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition" /> returns false.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is null.-or- Any element of <paramref name="typeArguments" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters of the current generic method definition.-or- An element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition. </exception>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a method.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a method.</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnParameter">
      <summary>Gets a <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type of the method, such as whether the return type has custom modifiers. </summary>
      <returns>A <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type.</returns>
      <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnType">
      <summary>Gets the return type of this method.</summary>
      <returns>The return type of this method.</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes for the return type.</summary>
      <returns>An ICustomAttributeProvider object representing the custom attributes for the return type.</returns>
    </member>
    <member name="T:System.Reflection.Missing">
      <summary>Represents a missing <see cref="T:System.Object" />. This class cannot be inherited.</summary>
    </member>
    <member name="F:System.Reflection.Missing.Value">
      <summary>Represents the sole instance of the <see cref="T:System.Reflection.Missing" /> class.</summary>
    </member>
    <member name="T:System.Reflection.Module">
      <summary>Performs reflection on a module.</summary>
    </member>
    <member name="P:System.Reflection.Module.Assembly">
      <summary>Gets the appropriate <see cref="T:System.Reflection.Assembly" /> for this instance of <see cref="T:System.Reflection.Module" />.</summary>
      <returns>An Assembly object.</returns>
    </member>
    <member name="P:System.Reflection.Module.FullyQualifiedName">
      <summary>[SECURITY CRITICAL] Gets a string representing the fully qualified name and path to this module.</summary>
      <returns>The fully qualified module name.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Boolean)">
      <summary>Returns all custom attributes.</summary>
      <returns>An array that contains all the custom attributes.</returns>
      <param name="inherit">This argument is ignored for objects of this type. </param>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns custom attributes of the specified type.</summary>
      <returns>An array that contains all custom attributes of the specified type.</returns>
      <param name="attributeType">The type of attribute to get. </param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String)">
      <summary>Returns the global field that has the specified name.</summary>
      <returns>The global field that has the specified name, or null if the field does not exist.</returns>
      <param name="name">The name of the global field. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the global field that has the specified name and binding attributes.</summary>
      <returns>The global field that has the specified name and binding attributes, or null if the field does not exist.</returns>
      <param name="name">The name of the global field. </param>
      <param name="bindingAttr">The flags used to control the search. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.Module.GetFields">
      <summary>Returns the global fields defined on the module.</summary>
      <returns>An array that contains the global fields defined on the module; if there are no global fields, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns the global fields that are defined on the module and that match the specified binding flags.</summary>
      <returns>An array that contains the global fields defined on the module that match the specified binding flags; if no global fields match the binding flags, an empty array is returned.</returns>
      <param name="bindingFlags">A bitwise combination of enumeration values that limit the search.</param>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String)">
      <summary>Returns the global method that has the specified name.</summary>
      <returns>The global method that has the specified name, or null if the method does not exist.</returns>
      <param name="name">The method name. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one global method matches <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Returns the global method that has the specified name, binding information, calling convention, and parameter types and modifiers.</summary>
      <returns>The global method that matches the specified criteria, or null if such a method does not exist.</returns>
      <param name="name">The method name. </param>
      <param name="bindingAttr">The flags used to control the search. </param>
      <param name="binder">An object that performs overload resolution and type coercion, or null to use <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="callConvention">The calling convention for the method. </param>
      <param name="types">The parameter types to search for. </param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null, <paramref name="types" /> is null, or an element of <paramref name="types" /> is null. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one global method matches the specified criteria.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Type[])">
      <summary>Returns the global method that matches the specified name and parameter types.</summary>
      <returns>The global method that matches the specified criteria, or null if the method does not exist.</returns>
      <param name="name">The method name. </param>
      <param name="types">The parameter types to search for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null, <paramref name="types" /> is null, or an element of <paramref name="types" /> is null. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one global method matches the specified criteria.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>In a derived class, provides the implementation for the <see cref="M:System.Reflection.Module.GetMethod(System.String)" /> method overloads.</summary>
      <returns>The global method that matches the specified criteria, or null if no such method exists.</returns>
      <param name="name">The method name. </param>
      <param name="bindingAttr">The flags used to control the search. </param>
      <param name="binder">An object that performs overload resolution and type coercion, or null to use <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The calling convention for the method. </param>
      <param name="types">The parameter types to search for. </param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one global method matches the specified criteria.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null, <paramref name="types" /> is null, or an element of <paramref name="types" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethods">
      <summary>Returns the global methods defined on the module.</summary>
      <returns>An array that contains the global methods defined on the module; if there are no global methods, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns the global methods that are defined on the module and that match the specified binding flags.</summary>
      <returns>An array that contains the global methods defined on the module that match the specified binding flags; if no global methods match the binding flags, an empty array is returned.</returns>
      <param name="bindingFlags">A bitwise combination of enumeration values that limit the search.</param>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String)">
      <summary>Returns the specified type, performing a case-sensitive search.</summary>
      <returns>The given type, if the type is in this module; otherwise, null.</returns>
      <param name="className">The name of the type to locate. The name must be fully qualified with the namespace. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> is a zero-length string. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="className" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="className" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean)">
      <summary>Returns the specified type, searching the module with the specified case sensitivity.</summary>
      <returns>The given type, if the type is in this module; otherwise, null.</returns>
      <param name="className">The name of the type to locate. The name must be fully qualified with the namespace. </param>
      <param name="ignoreCase">true to perform a case-insensitive search; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> is a zero-length string. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="className" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="className" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.</summary>
      <returns>The specified type, if the type is declared in this module; otherwise, null.</returns>
      <param name="className">The name of the type to locate. The name must be fully qualified with the namespace. </param>
      <param name="throwOnError">true to throw an exception if the type cannot be found; false to return null. </param>
      <param name="ignoreCase">true to perform a case-insensitive search; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> is a zero-length string. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true, and the type cannot be found. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="className" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="className" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetTypes">
      <summary>Returns all the types defined within this module.</summary>
      <returns>An array that contains types defined within the module that is reflected by this instance.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)">
      <summary>Determines if the specified attribute type is applied to this module.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" /> are applied to this module; otherwise, false.</returns>
      <param name="attributeType">The type of custom attribute to search for. </param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="P:System.Reflection.Module.MetadataToken">
      <summary>Gets a token that identifies the module in metadata.</summary>
      <returns>An integer token that identifies the current module in metadata.</returns>
    </member>
    <member name="P:System.Reflection.Module.Name">
      <summary>Gets the name of the module with the path removed.</summary>
      <returns>The module name with no path.</returns>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32)">
      <summary>Returns the method or constructor that is identified by the specified metadata token.</summary>
      <returns>The method or constructor that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a method or constructor in the module.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a method or constructor in the scope of the current module.-or-<paramref name="metadataToken" /> is a MethodSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the method or constructor that is identified by the specified metadata token, in the context defined by the specified generic type parameters. </summary>
      <returns>The method that is identified by the specified metadata token and generic arguments.</returns>
      <param name="metadataToken">A metadata token that identifies a method or constructor in the module.</param>
      <param name="genericTypeArguments">An array that contains the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array that contains the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a method or constructor in the scope of the current module.-or-<paramref name="metadataToken" /> is a MethodSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveString(System.Int32)">
      <summary>Returns the string that is identified by the specified metadata token.</summary>
      <returns>A string value from the metadata string heap.</returns>
      <param name="metadataToken">A metadata token that identifies a string in the string heap of the module. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a string in the scope of the current module. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32)">
      <summary>Returns the type that is identified by the specified metadata token.</summary>
      <returns>The type that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a type in the module.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type in the scope of the current module.-or-<paramref name="metadataToken" /> is a TypeSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the type that is identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <returns>The type that is identified by the specified metadata token and generic arguments.</returns>
      <param name="metadataToken">A metadata token that identifies a type in the module.</param>
      <param name="genericTypeArguments">An array that contains the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array that contains the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type in the scope of the current module.-or-<paramref name="metadataToken" /> is a TypeSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ToString">
      <summary>Returns the name of the module.</summary>
      <returns>The name of this module.</returns>
    </member>
    <member name="T:System.Reflection.ParameterAttributes">
      <summary>Defines the attributes that can be associated with a parameter. These are defined in CorHdr.h.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.None">
      <summary>Specifies that there is no parameter attribute.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.In">
      <summary>Specifies that the parameter is an input parameter.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Out">
      <summary>Specifies that the parameter is an output parameter.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Retval">
      <summary>Specifies that the parameter is a return value.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Optional">
      <summary>Specifies that the parameter is optional.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.ReservedMask">
      <summary>Specifies that the parameter is reserved.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasDefault">
      <summary>Specifies that the parameter has a default value.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasFieldMarshal">
      <summary>Specifies that the parameter has field marshaling information.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved3">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved4">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Lcid">
      <summary>Specifies that the parameter is a locale identifier. Not supported. Present in Silverlight for Windows Phone.</summary>
    </member>
    <member name="T:System.Reflection.ParameterInfo">
      <summary>Discovers the attributes of a parameter and provides access to parameter metadata.</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.#ctor">
      <summary>Initializes a new instance of the ParameterInfo class.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Attributes">
      <summary>Gets the attributes for this parameter.</summary>
      <returns>The attributes for this parameter.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.DefaultValue">
      <summary>Gets the default value, if the parameter has a default value.</summary>
      <returns>The default value of the parameter, or <see cref="F:System.DBNull.Value" /> if the parameter has no default value.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
      <summary>Gets all the custom attributes defined on this parameter.</summary>
      <returns>An array that contains all the custom attributes applied to this parameter.</returns>
      <param name="inherit">This parameter is ignored for objects of this type. See Remarks.</param>
      <exception cref="T:System.TypeLoadException">A custom attribute type could not be loaded. </exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</summary>
      <returns>An array that contains all the custom attributes that are defined on this parameter and that are of the specified type or any of its subtypes.</returns>
      <param name="attributeType">The custom attributes identified by type. </param>
      <param name="inherit">This parameter is ignored for objects of this type. See Remarks.</param>
      <exception cref="T:System.ArgumentException">The type must be a type provided by the underlying runtime system.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type could not be loaded. </exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" /> or its derived types are applied to this parameter; otherwise, false.</returns>
      <param name="attributeType">The type to search for. </param>
      <param name="inherit">This parameter is ignored for objects of this type. See Remarks.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the common language runtime.</exception>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOptional">
      <summary>Gets a value indicating whether this parameter is optional.</summary>
      <returns>true if the parameter is optional; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOut">
      <summary>Gets a value indicating whether this is an output parameter.</summary>
      <returns>true if the parameter is an output parameter; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Member">
      <summary>Gets the member in which the parameter is defined.</summary>
      <returns>The member in which the parameter is defined.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.MetadataToken">
      <summary>Gets a value that identifies this parameter in metadata.</summary>
      <returns>A token which, in combination with the module, uniquely identifies this parameter in metadata.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Name">
      <summary>Gets the name of the parameter.</summary>
      <returns>The simple name of this parameter.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.ParameterType">
      <summary>Gets the type of this parameter.</summary>
      <returns>The type of this parameter.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Position">
      <summary>Gets the zero-based position of the parameter in the formal parameter list.</summary>
      <returns>The position this parameter occupies in the parameter list.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.RawDefaultValue">
      <summary>Gets a value indicating the default value if the parameter has a default value.</summary>
      <returns>The default value of the parameter, or <see cref="F:System.DBNull.Value" /> if the parameter has no default value.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.ToString">
      <summary>Gets the parameter type and name represented as a string.</summary>
      <returns>The type and the name of the parameter.</returns>
    </member>
    <member name="T:System.Reflection.ParameterModifier">
      <summary>Attaches a modifier to parameters so that binding can work with parameter signatures in which the types have been modified.</summary>
    </member>
    <member name="M:System.Reflection.ParameterModifier.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ParameterModifier" /> structure that represents the specified number of parameters.</summary>
      <param name="parameterCount">The number of parameters. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterCount" /> is negative. </exception>
    </member>
    <member name="P:System.Reflection.ParameterModifier.Item(System.Int32)">
      <summary>Gets or sets a value that indicates whether the parameter at the specified index position should be modified by the current <see cref="T:System.Reflection.ParameterModifier" />.</summary>
      <returns>true if the parameter at this index position should be modified by this <see cref="T:System.Reflection.ParameterModifier" />; otherwise, false.</returns>
      <param name="index">The index position of the parameter whose modification status is being examined or set. </param>
    </member>
    <member name="T:System.Reflection.PropertyAttributes">
      <summary>Defines the attributes that can be associated with a property. </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.None">
      <summary>Specifies that no attributes are associated with a property.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.SpecialName">
      <summary>Specifies that the property is special, with the name describing how the property is special.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.ReservedMask">
      <summary>Specifies a flag reserved for runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.RTSpecialName">
      <summary>Specifies that the metadata internal APIs check the name encoding.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.HasDefault">
      <summary>Specifies that the property has a default value.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved2">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved3">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved4">
      <summary>Reserved.</summary>
    </member>
    <member name="T:System.Reflection.PropertyInfo">
      <summary>Discovers the attributes of a property and provides access to property metadata.</summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.Attributes">
      <summary>Gets the attributes for this property.</summary>
      <returns>Attributes of this property.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanRead">
      <summary>Gets a value indicating whether the property can be read.</summary>
      <returns>true if this property can be read; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanWrite">
      <summary>Gets a value indicating whether the property can be written to.</summary>
      <returns>true if this property can be written to; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors">
      <summary>Returns an array whose elements reflect the public get, set, and other accessors of the property reflected by the current instance.</summary>
      <returns>An array that contains the public get, set, and other accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with 0 (zero) elements.</returns>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
      <summary>Returns an array whose elements reflect the public (and, if specified, non-public) get, set, and other accessors of the property reflected by the current instance.</summary>
      <returns>An array that contains the get, set, and other accessors of the property reflected by the current instance. If <paramref name="nonPublic" /> is true, this array contains public and non-public accessors. If <paramref name="nonPublic" /> is false, this array contains only public accessors. If no accessors with the specified visibility are found, this method returns an array with 0 (zero) elements.</returns>
      <param name="nonPublic">true to include non-public accessors; otherwise, false. </param>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetConstantValue">
      <summary>Returns a literal value associated with the property by a compiler. </summary>
      <returns>The literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is null.</returns>
      <exception cref="T:System.InvalidOperationException">The Constant table in unmanaged metadata does not contain a constant value for the current property.</exception>
      <exception cref="T:System.FormatException">The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the Standard ECMA-335 - Common Language Infrastructure (CLI) specification, Partition II. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod">
      <summary>Returns the public get accessor for this property.</summary>
      <returns>The public get accessor for this property, if the get accessor exists and is public; otherwise, null.</returns>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the public or non-public get accessor for this property.</summary>
      <returns>The get accessor for this property, if <paramref name="nonPublic" /> is true. Returns null if <paramref name="nonPublic" /> is false and the get accessor is non-public, or if <paramref name="nonPublic" /> is true but no get accessor exists.</returns>
      <param name="nonPublic">true to return a non-public accessor; otherwise, false. </param>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
      <summary>When overridden in a derived class, returns an array of all the index parameters for the property.</summary>
      <returns>An array that contains the parameters for the indexes.</returns>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRawConstantValue">
      <summary>Returns a literal value associated with the property by a compiler. </summary>
      <returns>The literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is null.</returns>
      <exception cref="T:System.InvalidOperationException">The Constant table in unmanaged metadata does not contain a constant value for the current property.</exception>
      <exception cref="T:System.FormatException">The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the Standard ECMA-335 - Common Language Infrastructure (CLI) specification, Partition II.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod">
      <summary>Returns the public set accessor for this property.</summary>
      <returns>The set accessor for this property, if the set accessor exists and is public; otherwise, null.</returns>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the set accessor for this property.</summary>
      <returns>Value Condition The set accessor for this property. The set accessor is public.-or- <paramref name="nonPublic" /> is true and a set accessor exists. null<paramref name="nonPublic" /> is false and the set accessor is non-public.-or- There is no set accessor because the property is read-only. </returns>
      <param name="nonPublic">true to return a non-public accessor; otherwise, false. </param>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
      <summary>Returns the value of the property with optional index values for indexed properties.</summary>
      <returns>The property value for the object specified by the <paramref name="obj" /> parameter.</returns>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.-or- The property's get accessor is not found. </exception>
      <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes. </exception>
      <exception cref="T:System.MethodAccessException">The property is not accessible to the caller. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, returns the value of a property that has the specified binding, index, and <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>The property value for the object specified by the <paramref name="obj" /> parameter.</returns>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags: InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <param name="culture">The culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.-or- The property's get accessor is not found. </exception>
      <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes. </exception>
      <exception cref="T:System.MethodAccessException">The property is not accessible to the caller. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="P:System.Reflection.PropertyInfo.IsSpecialName">
      <summary>Gets a value indicating whether the name of the property is recognized as a special name by compilers.</summary>
      <returns>true if this property has a special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</summary>
      <returns>A value indicating that this member is a property.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.PropertyType">
      <summary>Gets the type of this property.</summary>
      <returns>The type of this property.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
      <summary>Sets the value of the property on the specified object, with optional index values for indexed properties.</summary>
      <param name="obj">The object whose property value will be set. </param>
      <param name="value">The new value for this property. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.-or- The property's set accessor is not found. </exception>
      <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes. </exception>
      <exception cref="T:System.MethodAccessException">The property is not accessible to the caller. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, sets the property value for the given object to the given value, subject to the specified binding constraints, binder, and culture.</summary>
      <param name="obj">The object whose property value will be set. </param>
      <param name="value">The new value for this property. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />: InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <param name="culture">The culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.-or- The property's set accessor is not found. </exception>
      <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes. </exception>
      <exception cref="T:System.MethodAccessException">The property is not accessible to the caller. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="T:System.Reflection.ReflectionTypeLoadException">
      <summary>The exception that is thrown by the <see cref="M:System.Reflection.Module.GetTypes" /> method if any of the classes in a module cannot be loaded. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions">
      <summary>Gets the array of exceptions thrown by the class loader.</summary>
      <returns>An array of type Exception containing the exceptions thrown by the class loader. The null values in the <paramref name="classes" /> array of this instance line up with the exceptions in this array.</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Types">
      <summary>Gets the array of classes that were defined in the module and loaded.</summary>
      <returns>An array of type Type containing the classes that were defined in the module and loaded. This array can contain some null values.</returns>
    </member>
    <member name="T:System.Reflection.ResourceAttributes">
      <summary>Specifies the attributes for a manifest resource.</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Public">
      <summary>A mask used to retrieve public manifest resources.</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Private">
      <summary>A mask used to retrieve private manifest resources.</summary>
    </member>
    <member name="T:System.Reflection.TargetException">
      <summary>Represents the exception that is thrown when an attempt is made to invoke an invalid target.</summary>
    </member>
    <member name="T:System.Reflection.TargetInvocationException">
      <summary>The exception that is thrown by methods invoked through reflection. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" /> class with a reference to the inner exception that is the cause of this exception.</summary>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Reflection.TargetParameterCountException">
      <summary>The exception that is thrown when the number of parameters for an invocation does not match the number expected. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" /> class with an empty message string and the root cause of the exception.</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" /> class with its message string set to the given message and the root cause exception.</summary>
      <param name="message">A String describing the reason this exception was thrown. </param>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Reflection.TypeAttributes">
      <summary>Specifies type attributes.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.VisibilityMask">
      <summary>Specifies type visibility information.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NotPublic">
      <summary>Specifies that the class is not public.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Public">
      <summary>Specifies that the class is public.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPublic">
      <summary>Specifies that the class is nested with public visibility.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPrivate">
      <summary>Specifies that the class is nested with private visibility.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamily">
      <summary>Specifies that the class is nested with family visibility, and is thus accessible only by methods within its own type and any subtypes.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedAssembly">
      <summary>Specifies that the class is nested with assembly visibility, and is thus accessible only by methods within its assembly.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamANDAssem">
      <summary>Specifies that the class is nested with assembly and family visibility, and is thus accessible only by methods lying in the intersection of its family and assembly.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamORAssem">
      <summary>Specifies that the class is nested with family or assembly visibility, and is thus accessible only by methods lying in the union of its family and assembly.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.LayoutMask">
      <summary>Specifies class layout information.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoLayout">
      <summary>Specifies that class fields are automatically laid out by the common language runtime.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SequentialLayout">
      <summary>Specifies that class fields are laid out sequentially, in the order that the fields were emitted to the metadata.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ExplicitLayout">
      <summary>Specifies that class fields are laid out at the specified offsets.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ClassSemanticsMask">
      <summary>Specifies class semantics information; the current class is contextful (else agile).</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Class">
      <summary>Specifies that the type is a class.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Interface">
      <summary>Specifies that the type is an interface.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Abstract">
      <summary>Specifies that the type is abstract.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Sealed">
      <summary>Specifies that the class is concrete and cannot be extended.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SpecialName">
      <summary>Specifies that the class is special in a way denoted by the name.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Import">
      <summary>Specifies that the class or interface is imported from another module.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Serializable">
      <summary>Specifies that the class can be serialized.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.StringFormatMask">
      <summary>Used to retrieve string information for native interoperability.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AnsiClass">
      <summary>LPTSTR is interpreted as ANSI.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.UnicodeClass">
      <summary>LPTSTR is interpreted as UNICODE.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoClass">
      <summary>LPTSTR is interpreted automatically.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatClass">
      <summary>LPSTR is interpreted by some implementation-specific means, which includes the possibility of throwing a <see cref="T:System.NotSupportedException" />. Not used in the Microsoft implementation of the .NET Framework.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatMask">
      <summary>Used to retrieve non-standard encoding information for native interop. The meaning of the values of these 2 bits is unspecified. Not used in the Microsoft implementation of the .NET Framework.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.BeforeFieldInit">
      <summary>Specifies that calling static methods of the type does not force the system to initialize the type.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ReservedMask">
      <summary>Attributes reserved for runtime use.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.RTSpecialName">
      <summary>Runtime should check name encoding.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.HasSecurity">
      <summary>Type has security associate with it.</summary>
    </member>
    <member name="T:System.Reflection.TypeDelegator">
      <summary>Wraps a Type object and delegates all methods to that Type.</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class with default properties.</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class specifying the encapsulating instance.</summary>
      <param name="delegatingType">The instance of the class <see cref="T:System.Type" /> that encapsulates the call to the method of an object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegatingType" /> is null. </exception>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Assembly">
      <summary>Gets the assembly of the implemented type.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object representing the assembly of the implemented type.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
      <summary>Gets the assembly's fully qualified name.</summary>
      <returns>A String containing the assembly's fully qualified name.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.BaseType">
      <summary>Gets the base type for the current type.</summary>
      <returns>The base type for a type.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.FullName">
      <summary>Gets the fully qualified name of the implemented type.</summary>
      <returns>A String containing the type's fully qualified name.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
      <summary>Gets the attributes assigned to the TypeDelegator.</summary>
      <returns>A TypeAttributes object representing the implementation attribute flags.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets the constructor that implemented the TypeDelegator.</summary>
      <returns>A ConstructorInfo object for the method that matches the specified criteria, or null if a match cannot be found.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="callConvention">The calling conventions. </param>
      <param name="types">An array of type Type containing a list of the parameter number, order, and types. Types cannot be null; use an appropriate GetMethod method or an empty array to search for a method without parameters. </param>
      <param name="modifiers">An array of type ParameterModifier having the same length as the <paramref name="types" /> array, whose elements represent the attributes associated with the parameters of the method to get. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing constructors defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>An array of type ConstructorInfo containing the specified constructors defined for this class. If no constructors are defined, an empty array is returned. Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</summary>
      <returns>An array of objects containing all the custom attributes defined for this type.</returns>
      <param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes. </param>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes identified by type.</summary>
      <returns>An array of objects containing the custom attributes defined in this type that match the <paramref name="attributeType" /> parameter, specifying whether to search the type's inheritance chain, or null if no custom attributes are defined on this type.</returns>
      <param name="attributeType">An array of custom attributes identified by type.</param>
      <param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetElementType">
      <summary>Returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or ByRef.</summary>
      <returns>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or ByRef, or null if the current <see cref="T:System.Type" /> is not an array, a pointer or a ByRef.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the specified event.</summary>
      <returns>An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name. This method returns null if no such event is found.</returns>
      <param name="name">The name of the event to get. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents">
      <summary>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events declared or inherited by the current TypeDelegator.</summary>
      <returns>Returns an array of type EventInfo containing all the events declared or inherited by the current type. If there are no events, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns the events specified in <paramref name="bindingAttr" /> that are declared or inherited by the current TypeDelegator.</summary>
      <returns>An array of type EventInfo containing the events specified in <paramref name="bindingAttr" />. If there are no events, an empty array is returned.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns a <see cref="T:System.Reflection.FieldInfo" /> object representing the field with the specified name.</summary>
      <returns>A FieldInfo object representing the field declared or inherited by this TypeDelegator with the specified name. Returns null if no such field is found.</returns>
      <param name="name">The name of the field to find. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the data fields defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>An array of type FieldInfo containing the fields declared or inherited by the current TypeDelegator. An empty array is returned if there are no matched fields.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
      <summary>Returns the specified interface implemented by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>A Type object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name. If no interface that matches name is found, null is returned.</returns>
      <param name="name">The fully qualified name of the interface implemented by the current class. </param>
      <param name="ignoreCase">true if the case is to be ignored; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the specified interface type.</summary>
      <returns>An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</returns>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface to retrieve a mapping of. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaces">
      <summary>Returns all the interfaces implemented on the current class and its base classes.</summary>
      <returns>An array of type Type containing all the interfaces implemented on the current class and its base classes. If none are defined, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <paramref name="name" />, <paramref name="type" />, and <paramref name="bindingAttr" />.</summary>
      <returns>An array of type MemberInfo containing all the members of the current class and its base class meeting the specified criteria.</returns>
      <param name="name">The name of the member to get. </param>
      <param name="type">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name="bindingAttr">The type of members to get. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns members specified by <paramref name="bindingAttr" />.</summary>
      <returns>An array of type MemberInfo containing all the members of the current class and its base classes that meet the <paramref name="bindingAttr" /> filter.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <returns>A MethodInfoInfo object for the implementation method that matches the specified criteria, or null if a match cannot be found.</returns>
      <param name="name">The method name. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="callConvention">The calling conventions. </param>
      <param name="types">An array of type Type containing a list of the parameter number, order, and types. Types cannot be null; use an appropriate GetMethod method or an empty array to search for a method without parameters. </param>
      <param name="modifiers">An array of type ParameterModifier having the same length as the <paramref name="types" /> array, whose elements represent the attributes associated with the parameters of the method to get. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing specified methods of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>An array of MethodInfo objects representing the methods defined on this TypeDelegator.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Returns a nested type specified by <paramref name="name" /> and in <paramref name="bindingAttr" /> that are declared or inherited by the type represented by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>A Type object representing the nested type.</returns>
      <param name="name">The nested type's name. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Returns the nested types specified in <paramref name="bindingAttr" /> that are declared or inherited by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>An array of type Type containing the nested types.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing properties of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>An array of PropertyInfo objects representing properties defined on this TypeDelegator.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object for the property that matches the specified criteria, or null if a match cannot be found.</returns>
      <param name="name">The property to get. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used. See <see cref="T:System.Reflection.Binder" />. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">A list of parameter types. The list represents the number, order, and types of the parameters. Types cannot be null; use an appropriate GetMethod method or an empty array to search for a method without parameters. </param>
      <param name="modifiers">An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get. </param>
    </member>
    <member name="P:System.Reflection.TypeDelegator.GUID">
      <summary>Gets the GUID (globally unique identifier) of the implemented type.</summary>
      <returns>A GUID.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer or a ByRef.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array, a pointer or a ByRef; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</summary>
      <returns>An Object representing the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke. This may be a constructor, method, property, or field. If an empty string ("") is passed, the default member is invoked. </param>
      <param name="invokeAttr">The invocation attribute. This must be one of the following <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used. See <see cref="T:System.Reflection.Binder" />. </param>
      <param name="target">The object on which to invoke the specified member. </param>
      <param name="args">An array of type Object that contains the number, order, and type of the parameters of the member to be invoked. If <paramref name="args" /> contains an uninitialized Object, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string. </param>
      <param name="modifiers">An array of type ParameterModifer that is the same length as <paramref name="args" />, with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the member's signature. For ByRef, use ParameterModifer.ByRef, and for none, use ParameterModifer.None. The default binder does exact matching on these. Attributes such as In and InOut are not used in binding, and can be viewed using ParameterInfo. </param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. This is necessary, for example, to convert a string that represents 1000 to a Double value, since 1000 is represented differently by different cultures. If <paramref name="culture" /> is null, the CultureInfo for the current thread's CultureInfo is used. </param>
      <param name="namedParameters">An array of type String containing parameter names that match up, starting at element zero, with the <paramref name="args" /> array. There must be no holes in the array. If <paramref name="args" />. Length is greater than <paramref name="namedParameters" />. Length, the remaining parameters are filled in order. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsArrayImpl">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is an array.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsByRefImpl">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>true if the <see cref="T:System.Type" /> is passed by reference; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a COM object; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether a custom attribute identified by <paramref name="attributeType" /> is defined.</summary>
      <returns>true if a custom attribute identified by <paramref name="attributeType" /> is defined; otherwise, false.</returns>
      <param name="attributeType">Specifies whether to search this type's inheritance chain to find the attributes. </param>
      <param name="inherit">An array of custom attributes identified by type. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">The custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPointerImpl">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a pointer; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>true if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
      <summary>Gets a value indicating whether the type is a value type; that is, not a class or an interface.</summary>
      <returns>true if the type is a value type; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.MetadataToken">
      <summary>Gets a value that identifies this entity in metadata.</summary>
      <returns>A value which, in combination with the module, uniquely identifies this entity in metadata.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Module">
      <summary>Gets the module that contains the implemented type.</summary>
      <returns>A <see cref="T:System.Reflection.Module" /> object representing the module of the implemented type.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Name">
      <summary>Gets the name of the implemented type, with the path removed.</summary>
      <returns>A String containing the type's non-qualified name.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Namespace">
      <summary>Gets the namespace of the implemented type.</summary>
      <returns>A String containing the type's namespace.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.TypeHandle">
      <summary>Gets a handle to the internal metadata representation of an implemented type.</summary>
      <returns>A RuntimeTypeHandle object.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
      <summary>Gets the underlying <see cref="T:System.Type" /> that represents the implemented type.</summary>
      <returns>The underlying type.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Equals(System.Object)">
      <summary>Determines whether this assembly and the specified object are equal.</summary>
      <returns>true if <paramref name="o" /> is equal to this instance; otherwise, false.</returns>
      <param name="o">The object to compare with this instance. </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ContainsGenericParameters">
      <summary>Gets a value indicating whether a generic method contains unassigned generic type parameters.</summary>
      <returns>true if the current <see cref="T:System.Reflection.MethodInfo" /> contains unassigned generic type parameters; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.IsGenericMethod">
      <summary>Gets a value indicating whether the current method is a generic method.</summary>
      <returns>true if the current method is a generic method; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.IsGenericMethodDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Reflection.MethodInfo" /> represents the definition of a generic method.</summary>
      <returns>true if the <see cref="T:System.Reflection.MethodInfo" /> object represents the definition of a generic method; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Module.Equals(System.Object)">
      <summary>Determines whether this module and the specified object are equal.</summary>
      <returns>true if <paramref name="o" /> is equal to this instance; otherwise, false.</returns>
      <param name="o">The object to compare with this instance. </param>
    </member>
    <member name="M:System.Reflection.Module.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.Equals(System.Object)">
      <summary>Determines whether this assembly and the specified object are equal.</summary>
      <returns>true if <paramref name="o" /> is equal to this instance; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance. </param>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary>Defines and represents a dynamic assembly.</summary>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String)">
      <summary>[SECURITY CRITICAL] Adds an existing resource file to this assembly.</summary>
      <param name="name">The logical name of the resource. </param>
      <param name="fileName">The physical file name (.resources file) to which the logical name is mapped. This should not include a path; the file must be in the same directory as the assembly to which it is added. </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String,System.Reflection.ResourceAttributes)">
      <summary>[SECURITY CRITICAL] Adds an existing resource file to this assembly.</summary>
      <param name="name">The logical name of the resource. </param>
      <param name="fileName">The physical file name (.resources file) to which the logical name is mapped. This should not include a path; the file must be in the same directory as the assembly to which it is added. </param>
      <param name="attribute">The resource attributes. </param>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary>[SECURITY CRITICAL] Gets the location of the assembly, as specified originally (such as in an <see cref="T:System.Reflection.AssemblyName" /> object).</summary>
      <returns>The location of the assembly, as specified originally.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary>Defines a named transient dynamic module in this assembly.</summary>
      <returns>The new dynamic module.</returns>
      <param name="name">The name of the dynamic module. Must be less than 260 characters long. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> begins with white space.-or- The length of <paramref name="name" /> is zero.-or- The length of <paramref name="name" /> is greater than or equal to 260. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ExecutionEngineException">The assembly for the default symbol writer cannot be loaded.-or- The type that implements the default symbol writer interface cannot be found. </exception>
      <exception cref="T:System.InvalidOperationException">A dynamic module has already been created in this assembly.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.Boolean)">
      <summary>Defines a named transient dynamic module in this assembly and specifies whether symbol information should be emitted.</summary>
      <returns>The new dynamic module.</returns>
      <param name="name">The name of the dynamic module. Must be less than 260 characters long. </param>
      <param name="emitSymbolInfo">true to emit symbol information; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> begins with white space.-or- The length of <paramref name="name" /> is zero.-or- The length of <paramref name="name" /> is greater than or equal to 260. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ExecutionEngineException">The assembly for the default symbol writer cannot be loaded.-or- The type that implements the default symbol writer interface cannot be found. </exception>
      <exception cref="T:System.InvalidOperationException">A dynamic module has already been created in this assembly.</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary>Gets the entry point of this assembly.</summary>
      <returns>The entry point of this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to the specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary>Gets the display name of the current dynamic assembly. </summary>
      <returns>The display name of the dynamic assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</summary>
      <returns>An array that contains the custom attributes; the array is empty if there are no attributes.</returns>
      <param name="inherit">This argument is ignored for objects of this type.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />, and that derive from a specified attribute type.</summary>
      <returns>An array that contains the custom attributes that are derived at any level from <paramref name="attributeType" />; the array is empty if there are no such attributes.</returns>
      <param name="attributeType">The base type from which attributes derive.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary>Returns the dynamic module that has the specified name.</summary>
      <returns>The requested dynamic module.</returns>
      <param name="name">The name of the requested dynamic module. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary>Gets the exported types that are defined in this assembly.</summary>
      <returns>An array that contains the exported types that are defined in this assembly.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary>[SECURITY CRITICAL] Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> for the specified file, or null, if the file is not found.</returns>
      <param name="name">The name of the specified file. </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary>[SECURITY CRITICAL] Gets the files in the file table of an assembly manifest and optionally includes resource modules.</summary>
      <returns>An array of <see cref="T:System.IO.FileStream" /> objects representing the files in the assembly.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary>Loads the names of the manifest resources in this assembly.</summary>
      <returns>An array that contains the names of all the resources.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a dynamic assembly. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary>Loads the specified manifest resource from this assembly.</summary>
      <returns>The manifest resource.</returns>
      <param name="name">The name of the manifest resource being requested. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary>Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</summary>
      <returns>The manifest resource.</returns>
      <param name="type">The type whose namespace is used to scope the manifest resource name. </param>
      <param name="name">The name of the manifest resource being requested. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary>[SECURITY CRITICAL] Gets the <see cref="T:System.Reflection.AssemblyName" /> that was specified when the current dynamic assembly was created, and sets the code base as specified.</summary>
      <returns>The name of the dynamic assembly.</returns>
      <param name="copiedName">true to set the code base to the location of the assembly after it is shadow-copied; false to set the code base to the original location.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>Gets the satellite assembly for the specified culture.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The satellite assembly is not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the CultureInfo did not match the one specified. </exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>Gets the specified version of the satellite assembly for the specified culture.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <param name="version">The version of the satellite assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The satellite assembly is not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the CultureInfo or the version did not match the one specified. </exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly. </exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>Gets the version of the common language runtime that will be saved in the file containing the manifest.</summary>
      <returns>The common language runtime version.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" /> is applied to this dynamic assembly; otherwise, false.</returns>
      <param name="attributeType">The type of attribute to test for.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary>Gets a value that indicates that the current assembly is a dynamic assembly.</summary>
      <returns>Always true.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary>[SECURITY CRITICAL] Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied. </summary>
      <returns>The location of the loaded file that contains the manifest. If the loaded file has been shadow-copied, returns the location of the file before it was shadow-copied.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary>Gets the module in the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> that contains the assembly manifest.</summary>
      <returns>The manifest module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Sets a custom attribute on this assembly by using a specified custom attribute BLOB (binary large object). </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte BLOB that represents the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute on this assembly by using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo)">
      <summary>[SECURITY CRITICAL] Sets the entry point for this dynamic assembly, assuming that a console application is being built.</summary>
      <param name="entryMethod">A reference to the method that represents the entry point for this dynamic assembly. </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo,System.Reflection.Emit.PEFileKinds)">
      <summary>[SECURITY CRITICAL] Sets the entry point for this assembly and defines the type of the portable executable (PE file) being built.</summary>
      <param name="entryMethod">A reference to the method that represents the entry point for this dynamic assembly. </param>
      <param name="fileKind">The type of the assembly executable being built. </param>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary>Defines the access modes for a dynamic assembly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary>Represents that the dynamic assembly can be executed, but not saved.</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary>Defines and represents a constructor of a dynamic class.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary>Gets the attributes for this constructor.</summary>
      <returns>The attributes for this constructor.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary>Gets the calling convention for this constructor.</summary>
      <returns>
        <see cref="F:System.Reflection.CallingConventions.HasThis" /> if the declaring type is generic; otherwise, <see cref="F:System.Reflection.CallingConventions.Standard" />. </returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary>Gets the dynamic type that declares this constructor.</summary>
      <returns>The dynamic type that declares this member.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Defines the name and attributes of a parameter of this constructor.</summary>
      <returns>An object that represents the parameter.</returns>
      <param name="iSequence">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter. </param>
      <param name="attributes">The attributes of the parameter. </param>
      <param name="strParamName">The name of the parameter. The name can be a null string. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iSequence" /> is less than or equal to zero, or it is greater than the number of parameters of the constructor. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this constructor. This method is not supported.</summary>
      <returns>An array that contains all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> instance.</returns>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes identified by the given type. This method is not supported.</summary>
      <returns>An array that contains all the attributes of this constructor that are of type <paramref name="attributeType" /> or that derive from <paramref name="attributeType" />.</returns>
      <param name="attributeType">The custom attribute type. </param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary>Returns a Microsoft intermediate language (MSIL) generator for this constructor.</summary>
      <returns>An MSIL generator that can be used to emit a method body for this constructor.</returns>
      <exception cref="T:System.InvalidOperationException">The constructor is a default constructor that was created by using the <see cref="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)" /> method.-or-The constructor has <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags indicating that it should not have a method body.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary>Returns a Microsoft intermediate language (MSIL) generator, with the specified MSIL stream size, that can be used to build a method body for this constructor.</summary>
      <returns>An MSIL generator that can be used to emit a method body for this constructor.</returns>
      <param name="streamSize">The size of the MSIL stream, in bytes.</param>
      <exception cref="T:System.InvalidOperationException">The constructor is a default constructor that was created by using the <see cref="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)" /> method.-or-The constructor has <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags indicating that it should not have a method body. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary>Returns the method implementation flags for this constructor.</summary>
      <returns>The method implementation flags for this constructor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetModule">
      <summary>Returns a reference to the module that contains this constructor.</summary>
      <returns>The module that contains this constructor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary>Returns the parameters of the completed constructor.</summary>
      <returns>An array that contains the parameters of this constructor, after the type that contains the constructor has been completed.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called on this constructor's type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetToken">
      <summary>Returns the token for this constructor.</summary>
      <returns>The token for this constructor.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary>Gets or sets a value that specifies whether the local variables in this constructor will be zero-initialized.</summary>
      <returns>true if the local variables in this constructor should be zero-initialized; otherwise false. </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified Binder. This method is not supported.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="obj">The object that needs to be reinitialized. </param>
      <param name="invokeAttr">A combination of enumeration values that specifies the type of binding that is desired. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects via reflection. If <paramref name="binder" /> is null, <see cref="P:System.Type.DefaultBinder" /> is used. </param>
      <param name="parameters">An argument list. This is an array of arguments that have the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be null. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Dynamically invokes the constructor reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder. This method is not supported.</summary>
      <returns>The return value of the invoked constructor.</returns>
      <param name="invokeAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used. See <see cref="T:System.Reflection.Binder" />. </param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be null. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. (For example, this is necessary to convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.) </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Checks if the specified custom attribute type is defined. This method is not supported.</summary>
      <returns>true if the specified custom attribute type is defined; otherwise, false.</returns>
      <param name="attributeType">A custom attribute type. </param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary>Gets the handle for the constructor. This property is not supported.</summary>
      <returns>The handle for the constructor. </returns>
      <exception cref="T:System.NotSupportedException">This property is not supported on this class. </exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary>Gets the dynamic module in which this constructor is defined.</summary>
      <returns>The dynamic module in which this constructor is defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary>Retrieves the name of this constructor.</summary>
      <returns>The name of this constructor.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary>Gets the dynamic type on which this property is defined.</summary>
      <returns>The dynamic type that defines this property.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Applies a custom attribute to the constructor by using a specified binary large object (BLOB) that represents the attribute.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte BLOB representing the attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Applies a custom attribute to the constructor by using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class that specifies the custom attribute to apply. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>Sets the method implementation flags for this constructor.</summary>
      <param name="attributes">The method implementation flags. </param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Signature">
      <summary>Gets a string representation of the signature of the constructor.</summary>
      <returns>A representation of the signature of the constructor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary>Returns this <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> instance as a <see cref="T:System.String" />.</summary>
      <returns>A string that contains the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.</returns>
    </member>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary>Represents a custom attribute in a form that can be attached to a type or member that is being emitted.</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary>Initializes a new instance of the CustomAttributeBuilder class given the constructor for the custom attribute and the arguments to the constructor.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="con" /> is static or private.-or- The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.-or- The type of supplied argument does not match the type of the parameter declared in the constructor. -or-A supplied argument is a reference type other than <see cref="T:System.String" /> or <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="constructorArgs" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary>Initializes a new instance of the CustomAttributeBuilder class, given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <param name="namedFields">Named fields of the custom attribute. </param>
      <param name="fieldValues">Values for the named fields of the custom attribute. </param>
      <exception cref="T:System.ArgumentException">The lengths of the <paramref name="namedFields" /> and <paramref name="fieldValues" /> arrays are different.-or- <paramref name="con" /> is static or private.-or- The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.-or- The type of supplied argument does not match the type of the parameter declared in the constructor.-or- The types of the field values do not match the types of the named fields.-or- The field does not belong to the same class or base class as the constructor. -or-A supplied argument or named field is a reference type other than <see cref="T:System.String" /> or <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">One of the parameters is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary>Initializes a new instance of the CustomAttributeBuilder class, given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <param name="namedProperties">Named properties of the custom attribute. </param>
      <param name="propertyValues">Values for the named properties of the custom attribute. </param>
      <exception cref="T:System.ArgumentException">The lengths of the <paramref name="namedProperties" /> and <paramref name="propertyValues" /> arrays are different.-or- <paramref name="con" /> is static or private.-or- The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.-or- The type of supplied argument does not match the type of the parameter declared in the constructor.-or- The types of the property values do not match the types of the named properties.-or- A property has no setter method.-or- The property does not belong to the same class or base class as the constructor. -or-A supplied argument or named property is a reference type other than <see cref="T:System.String" /> or <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">One of the parameters is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary>Initializes a new instance of the CustomAttributeBuilder class, given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <param name="namedProperties">Named properties of the custom attribute. </param>
      <param name="propertyValues">Values for the named properties of the custom attribute. </param>
      <param name="namedFields">Named fields of the custom attribute. </param>
      <param name="fieldValues">Values for the named fields of the custom attribute. </param>
      <exception cref="T:System.ArgumentException">The lengths of the <paramref name="namedProperties" /> and <paramref name="propertyValues" /> arrays are different.-or- The lengths of the <paramref name="namedFields" /> and <paramref name="fieldValues" /> arrays are different.-or- <paramref name="con" /> is static or private.-or- The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.-or- The type of supplied argument does not match the type of the parameter declared in the constructor.-or- The types of the property values do not match the types of the named properties.-or- The types of the field values do not match the types of the corresponding field types.-or- A property has no setter.-or- The property or field does not belong to the same class or base class as the constructor. -or-A supplied argument, named property, or named field is a reference type other than <see cref="T:System.String" /> or <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">One of the parameters is null. </exception>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>[SECURITY CRITICAL] Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null.</param>
      <param name="attributes">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method. The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">The calling convention for the dynamic method. Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="m">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated. </param>
      <param name="skipVisibility">true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>[SECURITY CRITICAL] Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null.</param>
      <param name="attributes">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method. The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">The calling convention for the dynamic method. Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="owner">A <see cref="T:System.Type" /> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.</param>
      <param name="skipVisibility">true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, false.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>Creates an anonymously hosted dynamic method, specifying the method name, return type, and parameter types. </summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <exception cref="T:System.ArgumentException">An element of <paramref name="parameterTypes" /> is null or <see cref="T:System.Void" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>[SECURITY CRITICAL] Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="m">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>[SECURITY CRITICAL] Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="m">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated. </param>
      <param name="skipVisibility">true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>[SECURITY CRITICAL] Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="owner">A <see cref="T:System.Type" /> with which the dynamic method is logically associated. The dynamic method has access to all members of the type. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>[SECURITY CRITICAL] Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="owner">A <see cref="T:System.Type" /> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.</param>
      <param name="skipVisibility">true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, false. </param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>Gets the attributes specified when the dynamic method was created.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>Gets the calling convention specified when the dynamic method was created.</summary>
      <returns>One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>Completes the dynamic method and creates a delegate of the specified type, which can be used to execute the dynamic method. </summary>
      <returns>A delegate of the specified type, which can be used to execute the dynamic method.</returns>
      <param name="delegateType">A delegate type whose signature matches that of the dynamic method. </param>
      <exception cref="T:System.InvalidOperationException">The dynamic method has no method body.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</summary>
      <returns>A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</returns>
      <param name="delegateType">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</param>
      <param name="target">An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method. </param>
      <exception cref="T:System.InvalidOperationException">The dynamic method has no method body.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.-or-<paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>Gets the type that declares the method, which is always null for dynamic methods.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Defines a parameter of the dynamic method.</summary>
      <returns>Always returns null. </returns>
      <param name="position">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter. </param>
      <param name="attributes">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter. </param>
      <param name="parameterName">The name of the parameter. The name can be a zero-length string. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The method has no parameters.-or- <paramref name="position" /> is less than 0.-or- <paramref name="position" /> is greater than the number of the method's parameters. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>Returns the base implementation for the method.</summary>
      <returns>The base implementation of the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for the method.</summary>
      <returns>An array of objects representing all the custom attributes of the method.</returns>
      <param name="inherit">true to search the method's inheritance chain to find the custom attributes; false to check only the current method. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes of the specified type that have been applied to the method.</summary>
      <returns>An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</returns>
      <param name="attributeType">A <see cref="T:System.Type" /> representing the type of custom attribute to return. </param>
      <param name="inherit">true to search the method's inheritance chain to find the custom attributes; false to check only the current method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</returns>
      <param name="streamSize">The size of the MSIL stream, in bytes. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>Returns the implementation flags for the method.</summary>
      <returns>A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>Returns the parameters of the dynamic method.</summary>
      <returns>An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>Gets or sets a value indicating whether the local variables in the method are zero-initialized. </summary>
      <returns>true if the local variables in the method are zero-initialized; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</summary>
      <returns>A <see cref="T:System.Object" /> containing the return value of the invoked method.</returns>
      <param name="obj">This parameter is ignored for dynamic methods, because they are static. Specify null. </param>
      <param name="invokeAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is null, the default binder is used. For more details, see <see cref="T:System.Reflection.Binder" />. </param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be null. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</exception>
      <exception cref="T:System.ArgumentException">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to false, but the dynamic method accesses members that are not public or internal (Friend in Visual Basic).-or-The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to false, but it accesses members that are not public.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether the specified custom attribute type is defined.</summary>
      <returns>true if the specified custom attribute type is defined; otherwise, false.</returns>
      <param name="attributeType">A <see cref="T:System.Type" /> representing the type of custom attribute to search for. </param>
      <param name="inherit">true to search the method's inheritance chain to find the custom attributes; false to check only the current method. </param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>Not supported for dynamic methods.</summary>
      <returns>Not supported for dynamic methods.</returns>
      <exception cref="T:System.InvalidOperationException">Not allowed for dynamic methods.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>Gets the module with which the dynamic method is logically associated.</summary>
      <returns>The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>Gets the name of the dynamic method.</summary>
      <returns>The simple name of the method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>Gets the class that was used in reflection to obtain the method.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>Gets the return parameter of the dynamic method.</summary>
      <returns>Always null. </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>Gets the type of return value for the dynamic method.</summary>
      <returns>A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes of the return type for the dynamic method.</summary>
      <returns>An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>Returns the signature of the method, represented as a string.</summary>
      <returns>A string representing the method signature.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary>Describes and represents an enumeration type.</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary>Retrieves the dynamic assembly that contains this enum definition.</summary>
      <returns>Read-only. The dynamic assembly that contains this enum definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary>Returns the full path of this enum qualified by the display name of the parent assembly.</summary>
      <returns>Read-only. The full path of this enum qualified by the display name of the parent assembly.</returns>
      <exception cref="T:System.NotSupportedException">If <see cref="M:System.Reflection.Emit.EnumBuilder.CreateType" /> has not been called previously. </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary>Returns the parent <see cref="T:System.Type" /> of this type which is always <see cref="T:System.Enum" />.</summary>
      <returns>Read-only. The parent <see cref="T:System.Type" /> of this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateType">
      <summary>Creates a <see cref="T:System.Type" /> object for this enum.</summary>
      <returns>A <see cref="T:System.Type" /> object for this enum.</returns>
      <exception cref="T:System.InvalidOperationException">This type has been previously created.-or- The enclosing type has not been created. </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary>Returns the type that declared this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns>Read-only. The type that declared this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary>Defines the named static field in an enumeration type with the specified constant value.</summary>
      <returns>The defined field.</returns>
      <param name="literalName">The name of the static field. </param>
      <param name="literalValue">The constant value of the literal. </param>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary>Returns the full path of this enumeration.</summary>
      <returns>The full path of this enumeration.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the public and non-public constructors defined for this class, as specified.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this constructor.</summary>
      <returns>Returns an array of objects representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> instance.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes identified by the given type.</summary>
      <returns>Returns an array of objects representing the attributes of this constructor that are of <see cref="T:System.Type" /><paramref name="attributeType" />.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary>Calling this method always throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>This method is not supported. No value is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the event with the specified name.</summary>
      <returns>Returns an <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name. If there are no matches, null is returned.</returns>
      <param name="name">The name of the event to get. </param>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary>Returns the events for the public events declared or inherited by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public events that are declared by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the field specified by the given name.</summary>
      <returns>Returns the <see cref="T:System.Reflection.FieldInfo" /> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.</returns>
      <param name="name">The name of the field to get. </param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public fields that are declared by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.</summary>
      <returns>Returns a <see cref="T:System.Type" /> object representing the implemented interface. Returns null if no interface matching name is found.</returns>
      <param name="name">The name of the interface. </param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the interface requested.</summary>
      <returns>The requested interface mapping.</returns>
      <param name="interfaceType">The type of the interface for which the interface mapping is to be retrieved. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary>Returns an array of all the interfaces implemented on this a class and its base classes.</summary>
      <returns>Returns an array of <see cref="T:System.Type" /> objects representing the implemented interfaces. If none are defined, an empty array is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns all members with the specified name, type, and binding that are declared or inherited by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned.</returns>
      <param name="name">The name of the member. </param>
      <param name="type">The type of member that is to be returned. </param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns the specified members declared or inherited by this type,.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public methods declared or inherited by this type, as specified.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the specified nested type that is declared by this type.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the nested type to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to conduct a case-sensitive search for public methods. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public nested types that are declared or inherited by this type.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public properties declared or inherited by this type, as specified.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing the public and non-public properties defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public properties are returned.</returns>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary>Returns the GUID of this enum.</summary>
      <returns>The GUID of this enum.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.</summary>
      <returns>Returns the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used. See <see cref="T:System.Reflection.Binder" />. </param>
      <param name="target">The object on which to invoke the specified member. If the member is static, this parameter is ignored. </param>
      <param name="args">An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null. </param>
      <param name="modifiers">An array of the same length as <paramref name="args" /> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this. </param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.) </param>
      <param name="namedParameters">Each parameter in the <paramref name="namedParameters" /> array gets the value in the corresponding element in the <paramref name="args" /> array. If the length of <paramref name="args" /> is greater than the length of <paramref name="namedParameters" />, the remaining argument values are passed in order. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Checks if the specified custom attribute type is defined.</summary>
      <returns>true if one or more instance of <paramref name="attributeType" /> is defined on this member; otherwise, false.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <returns>A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <returns>A <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</returns>
      <param name="rank">The number of dimensions for the array. </param>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <returns>A <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <returns>A <see cref="T:System.Type" /> object that represents a pointer to the current type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary>Retrieves the dynamic module that contains this <see cref="T:System.Reflection.Emit.EnumBuilder" /> definition.</summary>
      <returns>Read-only. The dynamic module that contains this <see cref="T:System.Reflection.Emit.EnumBuilder" /> definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary>Returns the name of this enum.</summary>
      <returns>Read-only. The name of this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary>Returns the namespace of this enum.</summary>
      <returns>Read-only. The namespace of this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary>Returns the type that was used to obtain this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns>Read-only. The type that was used to obtain this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary>Retrieves the internal handle for this enum.</summary>
      <returns>Read-only. The internal handle for this enum.</returns>
      <exception cref="T:System.NotSupportedException">This property is not currently supported. </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeToken">
      <summary>Gets the internal metadata type token of this enum.</summary>
      <returns>The type token of this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary>Gets the underlying field for this enum.</summary>
      <returns>The underlying field for this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary>Gets the underlying system type for this enum.</summary>
      <returns>Returns the underlying system type.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary>Defines events for a class.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Adds one of the "other" methods associated with this event. "Other" methods are methods other than the "on" and "raise" methods associated with an event. This function can be called many times to add as many "other" methods.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the other method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.GetEventToken">
      <summary>Returns the token for this event.</summary>
      <returns>Returns the EventToken for this event.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method used to subscribe to this event.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method used to subscribe to this event. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Set a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to describe the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method used to raise this event.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method used to raise this event. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method used to unsubscribe to this event.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method used to unsubscribe to this event. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="T:System.Reflection.Emit.EventToken">
      <summary>Represents the Token returned by the metadata to represent an event.</summary>
    </member>
    <member name="F:System.Reflection.Emit.EventToken.Empty">
      <summary>The default EventToken with <see cref="P:System.Reflection.Emit.EventToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of EventToken and is equal to this instance.</summary>
      <returns>Returns true if <paramref name="obj" /> is an instance of EventToken and equals the current instance; otherwise, false.</returns>
      <param name="obj">The object to be compared with this instance. </param>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.Equals(System.Reflection.Emit.EventToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.EventToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.EventToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.GetHashCode">
      <summary>Generates the hash code for this event.</summary>
      <returns>Returns the hash code for this instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.op_Equality(System.Reflection.Emit.EventToken,System.Reflection.Emit.EventToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.EventToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.EventToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.EventToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.op_Inequality(System.Reflection.Emit.EventToken,System.Reflection.Emit.EventToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.EventToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.EventToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.EventToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.EventToken.Token">
      <summary>Retrieves the metadata token for this event.</summary>
      <returns>Read-only. Retrieves the metadata token for this event.</returns>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary>Defines and represents a field. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary>Gets the attributes of this field. </summary>
      <returns>The attributes of this field.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary>Gets a reference to the <see cref="T:System.Type" /> object for the type that declares this field. </summary>
      <returns>A reference to the <see cref="T:System.Type" /> object for the type that declares this field.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary>Gets the internal metadata handle for this field. </summary>
      <returns>The internal metadata handle for this field.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary>Gets the <see cref="T:System.Type" /> object that represents the type of this field. </summary>
      <returns>The <see cref="T:System.Type" /> object that represents the type of this field.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this field.</summary>
      <returns>An array of type <see cref="T:System.Object" /> representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.FieldBuilder" /> instance.</returns>
      <param name="inherit">Controls inheritance of custom attributes from base classes. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns all the custom attributes defined for this field identified by the given type.</summary>
      <returns>An array of type <see cref="T:System.Object" /> representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.FieldBuilder" /> instance.</returns>
      <param name="attributeType">The custom attribute type. </param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetToken">
      <summary>Returns the token representing this field.</summary>
      <returns>Returns the <see cref="T:System.Reflection.Emit.FieldToken" /> object that represents the token for this field.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary>Retrieves the value of the field supported by the given object.</summary>
      <returns>An <see cref="T:System.Object" /> containing the value of the field reflected by this instance.</returns>
      <param name="obj">The object on which to access the field. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Gets a value that indicates whether an attribute having the specified type is defined on a field.</summary>
      <returns>true if one or more instance of <paramref name="attributeType" /> is defined on this field; otherwise, false.</returns>
      <param name="attributeType">The type of the attribute. </param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the field using <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Reflection.FieldInfo" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary>Gets the module in which the type that contains this field is being defined.</summary>
      <returns>A <see cref="T:System.Reflection.Module" /> that represents the dynamic module in which this field is being defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary>Gets the name of this field. </summary>
      <returns>A <see cref="T:System.String" /> containing the name of this field.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary>Gets the reference to the <see cref="T:System.Type" /> object from which this object was obtained. </summary>
      <returns>A reference to the <see cref="T:System.Type" /> object from which this instance was obtained.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary>Sets the default value of this field.</summary>
      <param name="defaultValue">The new default value for this field. </param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
      <exception cref="T:System.ArgumentException">The field is not one of the supported types.-or-The type of <paramref name="defaultValue" /> does not match the type of the field.-or-The field is of type <see cref="T:System.Object" /> or other reference type, <paramref name="defaultValue" /> is not null, and the value cannot be assigned to the reference type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The parent type of this field is complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary>[SECURITY CRITICAL] Specifies the field layout.</summary>
      <param name="iOffset">The offset of the field within the type containing this field. </param>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Sets the value of the field supported by the given object.</summary>
      <param name="obj">The object on which to access the field. </param>
      <param name="val">The value to assign to the field. </param>
      <param name="invokeAttr">A member of IBinder that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding). </param>
      <param name="binder">A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used. </param>
      <param name="culture">The software preferences of a particular culture. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldToken">
      <summary>The FieldToken struct is an object representation of a token that represents a field.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FieldToken.Empty">
      <summary>The default FieldToken with <see cref="P:System.Reflection.Emit.FieldToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.Equals(System.Object)">
      <summary>Determines if an object is an instance of FieldToken and is equal to this instance.</summary>
      <returns>Returns true if <paramref name="obj" /> is an instance of FieldToken and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare to this FieldToken. </param>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.Equals(System.Reflection.Emit.FieldToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.FieldToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.FieldToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.GetHashCode">
      <summary>Generates the hash code for this field.</summary>
      <returns>Returns the hash code for this instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.op_Equality(System.Reflection.Emit.FieldToken,System.Reflection.Emit.FieldToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.FieldToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.FieldToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.FieldToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.op_Inequality(System.Reflection.Emit.FieldToken,System.Reflection.Emit.FieldToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.FieldToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.FieldToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.FieldToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.FieldToken.Token">
      <summary>Retrieves the metadata token for this field.</summary>
      <returns>Read-only. Retrieves the metadata token of this field.</returns>
    </member>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary>Describes how an instruction alters the flow of control.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary>Branch instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary>Break instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary>Call instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary>Conditional branch instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary>Provides information about a subsequent instruction. For example, the Unaligned instruction of Reflection.Emit.Opcodes has FlowControl.Meta and specifies that the subsequent pointer instruction might be unaligned.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary>Normal flow of control.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary>Return instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary>Exception throw instruction.</summary>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary>Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary>Gets an <see cref="T:System.Reflection.Assembly" /> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary>Gets null in all cases.</summary>
      <returns>A null reference (Nothing in Visual Basic) in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary>Gets the base type constraint of the current generic type parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the base type constraint of the generic type parameter, or null if the type parameter has no base type constraint.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary>Gets true in all cases.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary>Gets a <see cref="T:System.Reflection.MethodInfo" /> that represents the declaring method, if the current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> represents a type parameter of a generic method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents the declaring method, if the current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> represents a type parameter of a generic method; otherwise, null.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary>Gets the generic type definition or generic method definition to which the generic type parameter belongs.</summary>
      <returns>If the type parameter belongs to a generic type, a <see cref="T:System.Type" /> object representing that generic type; if the type parameter belongs to a generic method, a <see cref="T:System.Type" /> object representing that type that declared that generic method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary>Tests whether the given object is an instance of EventToken and is equal to the current instance.</summary>
      <returns>Returns true if <paramref name="o" /> is an instance of EventToken and equals the current instance; otherwise, false.</returns>
      <param name="o">The object to be compared with the current instance.</param>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary>Gets null in all cases.</summary>
      <returns>A null reference (Nothing in Visual Basic) in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</summary>
      <returns>The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases. </exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> in all cases. </summary>
      <returns>The type referred to by the current array type, pointer type, or ByRef type; or null if the current type is not an array type, is not a pointer type, and is not passed by reference.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">Not supported.</param>
      <param name="bindingAttr">Not supported. </param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">Not supported.</param>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary>Not valid for generic type parameters.</summary>
      <returns>Not valid for generic type parameters.</returns>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary>Not valid for generic type parameters.</summary>
      <returns>Not valid for generic type parameters.</returns>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary>Returns a 32-bit integer hash code for the current instance.</summary>
      <returns>A 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">The name of the interface.</param>
      <param name="ignoreCase">true to search without regard for case; false to make a case-sensitive search.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="interfaceType">A <see cref="T:System.Type" /> object that represents the interface type for which the mapping is to be retrieved.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">Not supported.</param>
      <param name="type">Not supported.</param>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">Not supported.</param>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases. </exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">Not supported. </param>
      <param name="invokeAttr">Not supported.</param>
      <param name="binder">Not supported.</param>
      <param name="target">Not supported.</param>
      <param name="args">Not supported.</param>
      <param name="modifiers">Not supported.</param>
      <param name="culture">Not supported.</param>
      <param name="namedParameters">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="c">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="attributeType">Not supported.</param>
      <param name="inherit">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary>Gets true in all cases.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary>Returns false in all cases.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary>Gets false in all cases.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="c">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary>Returns the type of a one-dimensional array whose element type is the generic type parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of a one-dimensional array whose element type is the generic type parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary>Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</returns>
      <param name="rank">The number of dimensions for the array.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is not a valid number of dimensions. For example, its value is less than 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the current generic type parameter when passed as a reference parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the current generic type parameter when passed as a reference parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary>Not valid for incomplete generic type parameters.</summary>
      <returns>This method is invalid for incomplete generic type parameters.</returns>
      <param name="typeArguments">An array of type arguments.</param>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a pointer to the current generic type parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents a pointer to the current generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary>Gets the dynamic module that contains the generic type parameter.</summary>
      <returns>A <see cref="T:System.Reflection.Module" /> object that represents the dynamic module that contains the generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary>Gets the name of the generic type parameter.</summary>
      <returns>The name of the generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary>Gets null in all cases.</summary>
      <returns>A null reference (Nothing in Visual Basic) in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary>Gets the <see cref="T:System.Type" /> object that was used to obtain the <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</summary>
      <returns>The <see cref="T:System.Type" /> object that was used to obtain the <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary>Sets the base type that a type must inherit in order to be substituted for the type parameter.</summary>
      <param name="baseTypeConstraint">The <see cref="T:System.Type" /> that must be inherited by any type that is to be substituted for the type parameter.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attribute.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class that defines the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary>Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.</summary>
      <param name="genericParameterAttributes">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that represent the variance characteristics and special constraints of the generic type parameter.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary>Sets the interfaces a type must implement in order to be substituted for the type parameter. </summary>
      <param name="interfaceConstraints">An array of <see cref="T:System.Type" /> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary>Returns a string representation of the current generic type parameter.</summary>
      <returns>A string that contains the name of the generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary>Gets the current generic type parameter.</summary>
      <returns>The current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> object.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary>Generates Microsoft intermediate language (MSIL) instructions.</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary>Begins a catch block.</summary>
      <param name="exceptionType">The type of the exception that is caught. </param>
      <exception cref="T:System.ArgumentException">The catch block is within a filtered exception. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptionType" /> is null, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located. </exception>
      <exception cref="T:System.NotSupportedException">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary>Begins an exception block for a filtered exception.</summary>
      <exception cref="T:System.NotSupportedException">The Microsoft intermediate language (MSIL) that is being generated is not currently in an exception block. -or-This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary>Begins an exception block for a non-filtered exception.</summary>
      <returns>The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary>Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.</summary>
      <exception cref="T:System.NotSupportedException">The MSIL that is being generated is not currently in an exception block. -or-This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary>Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.</summary>
      <exception cref="T:System.NotSupportedException">The MSIL that is being generated is not currently in an exception block. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary>Begins a lexical scope.</summary>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary>Declares a local variable of the specified type.</summary>
      <returns>The declared local variable.</returns>
      <param name="localType">The type of the local variable. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localType" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been created by the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary>Declares a local variable of the specified type, optionally pinning the object referred to by the variable.</summary>
      <returns>The local variable.</returns>
      <param name="localType">The type of the local variable.</param>
      <param name="pinned">true to pin the object in memory; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localType" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been created by the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.-or-The method body of the enclosing method has been created by the <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /> method. </exception>
      <exception cref="T:System.NotSupportedException">The method with which this <see cref="T:System.Reflection.Emit.ILGenerator" /> is associated is not represented by a <see cref="T:System.Reflection.Emit.MethodBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary>Declares a new label.</summary>
      <returns>A new label that can be used as a token for branching.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary>Puts the specified instruction onto the stream of instructions.</summary>
      <param name="opcode">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The character argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The numerical argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="arg">The Int argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The numerical argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The numerical argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary>Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="con">A constructor that is the target of <paramref name="opcode" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="label">The label to branch to. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="labels">The array of label objects that forms the jump table. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="labels" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="local">A local variable. </param>
      <exception cref="T:System.ArgumentException">The parent method of the <paramref name="local" /> parameter does not match the method associated with this <see cref="T:System.Reflection.Emit.ILGenerator" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="local" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="opcode" /> is a single-byte instruction, and <paramref name="local" /> represents a local variable with an index greater than Byte.MaxValue. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary>Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="field">A field that is the target of <paramref name="opcode" />. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="meth">A method that is the target of <paramref name="opcode" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="meth" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="meth" /> is a generic method for which the <see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The character argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The Single argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="str">The string that is the target of <paramref name="opcode" />. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="cls">The type that is the target of <paramref name="opcode" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cls" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary>Puts a call or callvirt instruction onto the Microsoft intermediate language (MSIL) stream to call a varargs method.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. Must be <see cref="F:System.Reflection.Emit.OpCodes.Call" />, <see cref="F:System.Reflection.Emit.OpCodes.Callvirt" />, or <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />.</param>
      <param name="methodInfo">The varargs method to be called. </param>
      <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method; otherwise, null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="opcode" /> does not specify a method call. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfo" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary>Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="Overload:System.Console.WriteLine" /> with the given local variable.</summary>
      <param name="localBuilder">The local variable whose value is to be written to the console. </param>
      <exception cref="T:System.ArgumentException">The type of <paramref name="localBuilder" /> is <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.EnumBuilder" />, which are not supported. -or-There is no overload of <see cref="Overload:System.Console.WriteLine" /> that accepts the type of <paramref name="localBuilder" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localBuilder" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary>Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="Overload:System.Console.WriteLine" /> with the given field.</summary>
      <param name="fld">The field whose value is to be written to the console. </param>
      <exception cref="T:System.ArgumentException">There is no overload of the <see cref="Overload:System.Console.WriteLine" /> method that accepts the type of the specified field. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fld" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The type of the field is <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.EnumBuilder" />, which are not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary>Emits the Microsoft intermediate language (MSIL) to call <see cref="Overload:System.Console.WriteLine" /> with a string.</summary>
      <param name="value">The string to be printed. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary>Ends an exception block.</summary>
      <exception cref="T:System.InvalidOperationException">The end exception block occurs in an unexpected place in the code stream. </exception>
      <exception cref="T:System.NotSupportedException">The Microsoft intermediate language (MSIL) that is being generated is not currently in an exception block. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary>Ends a lexical scope.</summary>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary>Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.</summary>
      <param name="loc">The label for which to set an index. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> represents an invalid index into the label array.-or- An index for <paramref name="loc" /> has already been defined. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Marks a sequence point in the Microsoft intermediate language (MSIL) stream.</summary>
      <param name="document">The document for which the sequence point is being defined. </param>
      <param name="startLine">The line where the sequence point begins. </param>
      <param name="startColumn">The column in the line where the sequence point begins. </param>
      <param name="endLine">The line where the sequence point ends. </param>
      <param name="endColumn">The column in the line where the sequence point ends. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startLine" /> or <paramref name="endLine" /> is &lt;= 0. </exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary>Emits an instruction to throw an exception.</summary>
      <param name="excType">The class of the type of exception to throw. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="excType" /> is not the <see cref="T:System.Exception" /> class or a derived class of <see cref="T:System.Exception" />.-or- The type does not have a default constructor. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="excType" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary>Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.</summary>
      <param name="usingNamespace">The namespace to be used in evaluating locals and watches for the current active lexical scope </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="usingNamespace" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="usingNamespace" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary>Represents a label in the instruction stream. Label is used in conjunction with the <see cref="T:System.Reflection.Emit.ILGenerator" /> class.</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary>Checks if the given object is an instance of Label and is equal to this instance.</summary>
      <returns>Returns true if <paramref name="obj" /> is an instance of Label and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare with this Label instance. </param>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.Label" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.Label" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary>Generates a hash code for this instance.</summary>
      <returns>Returns a hash code for this instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.Label" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.Label" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.Label" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.Label" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.Label" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.Label" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary>Represents a local variable within a method or constructor.</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary>Gets a value indicating whether the object referred to by the local variable is pinned in memory.</summary>
      <returns>true if the object referred to by the local variable is pinned in memory; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary>Gets the zero-based index of the local variable within the method body.</summary>
      <returns>An integer value that represents the order of declaration of the local variable within the method body.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary>Gets the type of the local variable.</summary>
      <returns>The <see cref="T:System.Type" /> of the local variable.</returns>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)">
      <summary>Sets the name of this local variable.</summary>
      <param name="name">The name of the local variable. </param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created with <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- There is no symbolic writer defined for the containing module. </exception>
      <exception cref="T:System.NotSupportedException">This local is defined in a dynamic method, rather than in a method of a dynamic type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)">
      <summary>Sets the name and lexical scope of this local variable.</summary>
      <param name="name">The name of the local variable. </param>
      <param name="startOffset">The beginning offset of the lexical scope of the local variable. </param>
      <param name="endOffset">The ending offset of the lexical scope of the local variable. </param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created with <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- There is no symbolic writer defined for the containing module. </exception>
      <exception cref="T:System.NotSupportedException">This local is defined in a dynamic method, rather than in a method of a dynamic type.</exception>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary>Defines and represents a method (or constructor) on a dynamic class.</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary>Gets the attributes for this method.</summary>
      <returns>The MethodAttributes for this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary>Returns the calling convention of the method.</summary>
      <returns>The calling convention of the method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary>Not supported for this type.</summary>
      <returns>Not supported.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
      <summary>[SECURITY CRITICAL] Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.</summary>
      <param name="il">An array containing valid MSIL instructions. If this parameter is null, the method's body is cleared. </param>
      <param name="count">The number of valid bytes in the MSIL array. This value is ignored if MSIL is null. </param>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary>Returns the type that declares this method.</summary>
      <returns>The type that declares this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary>Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to define their constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects representing the type parameters of the generic method.</returns>
      <param name="names">An array of strings that represent the names of the generic type parameters.</param>
      <exception cref="T:System.InvalidOperationException">Generic type parameters have already been defined for this method.-or-The method has been completed already.-or-The <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> method has been called for the current method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> is null.-or-An element of <paramref name="names" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> is an empty array.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.</summary>
      <returns>Returns a ParameterBuilder object that represents a parameter of this method or the return value of this method.</returns>
      <param name="position">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method. </param>
      <param name="attributes">The parameter attributes of the parameter. </param>
      <param name="strParamName">The name of the parameter. The name can be the null string. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The method has no parameters.-or- <paramref name="position" /> is less than zero.-or- <paramref name="position" /> is greater than the number of the method's parameters. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary>Determines whether the given object is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of MethodBuilder and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare with this MethodBuilder instance. </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary>Returns the base implementation for a method.</summary>
      <returns>The base implementation of this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this method.</summary>
      <returns>An array of objects representing all the custom attributes of this method.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method by using <see cref="M:System.Type.GetMethod(System.String)" /> on the completed type, and then call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes identified by the given type.</summary>
      <returns>An array of objects representing the attributes of this method that are of type <paramref name="attributeType" />.</returns>
      <param name="attributeType">The custom attribute type. </param>
      <param name="inherit">true to search this member's inheritance chain to find the custom attributes; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method by using <see cref="M:System.Type.GetMethod(System.String)" /> on the completed type, and then call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that represent the type parameters of the method, if it is generic.</summary>
      <returns>An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects representing the type parameters, if the method is generic, or null if the method is not generic. </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary>Returns this method.</summary>
      <returns>The current instance of <see cref="T:System.Reflection.Emit.MethodBuilder" />. </returns>
      <exception cref="T:System.InvalidOperationException">The current method is not generic. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property returns false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary>Gets the hash code for this method.</summary>
      <returns>The hash code for this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary>Returns an ILGenerator for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.</summary>
      <returns>An ILGenerator object for this method.</returns>
      <exception cref="T:System.InvalidOperationException">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flag. -or-The method is a generic method, but not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary>Returns an ILGenerator for this method with the specified Microsoft intermediate language (MSIL) stream size.</summary>
      <returns>An ILGenerator object for this method.</returns>
      <param name="size">The size of the MSIL stream, in bytes. </param>
      <exception cref="T:System.InvalidOperationException">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flag. -or-The method is a generic method, but not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.   </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary>Returns the implementation flags for the method.</summary>
      <returns>The implementation flags for the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetModule">
      <summary>Returns a reference to the module that contains this method.</summary>
      <returns>The module that contains this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary>Returns the parameters of this method.</summary>
      <returns>An array of ParameterInfo objects that represent the parameters of the method.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method by using <see cref="M:System.Type.GetMethod(System.String)" /> on the completed type, and then call GetParameters on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetToken">
      <summary>Returns the MethodToken that represents the token for this method.</summary>
      <returns>The method token of this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary>Gets or sets a Boolean value that specifies whether the local variables in this method are zero-initialized. The default value of this property is true.</summary>
      <returns>true if the local variables in this method should be zero-initialized; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. (Get or set.)</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</summary>
      <returns>An object that contains the return value of the invoked method.</returns>
      <param name="obj">The object on which to invoke the specified method. If the method is static, this parameter is ignored. </param>
      <param name="invokeAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is null, the default binder is used. For more details, see <see cref="T:System.Reflection.Binder" />. </param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be null. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. (Note that this is necessary to, for example, convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, since 1000 is represented differently by different cultures.) </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method by using <see cref="M:System.Type.GetMethod(System.String)" /> on the completed type, and then use the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> method; or call <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> on the completed type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Checks if the specified custom attribute type is defined.</summary>
      <returns>true if the specified custom attribute type is defined; otherwise, false.</returns>
      <param name="attributeType">The custom attribute type. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method by using <see cref="M:System.Type.GetMethod(System.String)" /> on the completed type, and then call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary>Gets a value that indicates whether the method is a generic method.</summary>
      <returns>true if the method is generic; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Reflection.Emit.MethodBuilder" /> object represents the definition of a generic method.</summary>
      <returns>true if the current <see cref="T:System.Reflection.Emit.MethodBuilder" /> object represents the definition of a generic method; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary>Returns a generic method constructed from the current generic method definition using the specified generic type arguments.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> representing the generic method constructed from the current generic method definition using the specified generic type arguments.</returns>
      <param name="typeArguments">An array of <see cref="T:System.Type" /> objects that represent the type arguments for the generic method.</param>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary>Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.</summary>
      <returns>The internal handle for the method. Use this handle to access the underlying metadata handle.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method by using <see cref="M:System.Type.GetMethod(System.String)" /> on the completed type, and then call <see cref="P:System.Reflection.MethodBase.MethodHandle" /> on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary>Gets the module in which the current method is being defined.</summary>
      <returns>The <see cref="T:System.Reflection.Module" /> in which the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is being defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary>Retrieves the name of this method.</summary>
      <returns>A string that contains the simple name of this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary>Retrieves the class that was used in reflection to obtain this object.</summary>
      <returns>The type used to obtain this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary>Gets a <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type of the method, such as whether the return type has custom modifiers. </summary>
      <returns>Information about the return type.</returns>
      <exception cref="T:System.InvalidOperationException">The declaring type has not been created.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary>Gets the return type of the method represented by this <see cref="T:System.Reflection.Emit.MethodBuilder" />.</summary>
      <returns>The return type of the method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary>Returns the custom attributes of the method's return type.</summary>
      <returns>The custom attributes of the method's return type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Sets a custom attribute using a specified custom attribute BLOB.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte binary large object (BLOB) representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to describe the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>Sets the implementation flags for this method.</summary>
      <param name="attributes">The implementation flags to set. </param>
      <exception cref="T:System.InvalidOperationException">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary>Sets the number and types of parameters for a method. </summary>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects representing the parameter types.</param>
      <exception cref="T:System.InvalidOperationException">The current method is generic, but is not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary>Sets the return type of the method.</summary>
      <param name="returnType">A <see cref="T:System.Type" /> object that represents the return type of the method.</param>
      <exception cref="T:System.InvalidOperationException">The current method is generic, but is not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.</summary>
      <param name="returnType">The return type of the method.</param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the method.</param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.InvalidOperationException">The current method is generic, but is not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Signature">
      <summary>Retrieves the signature of the method.</summary>
      <returns>The signature of the method reflected by this MethodBase instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary>Returns this MethodBuilder instance as a string.</summary>
      <returns>A string that contains the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodToken">
      <summary>The MethodToken struct is an object representation of a token that represents a method.</summary>
    </member>
    <member name="F:System.Reflection.Emit.MethodToken.Empty">
      <summary>The default MethodToken with <see cref="P:System.Reflection.Emit.MethodToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.Equals(System.Object)">
      <summary>Tests whether the given object is equal to this MethodToken object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of MethodToken and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare to this object. </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.Equals(System.Reflection.Emit.MethodToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.MethodToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.MethodToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.GetHashCode">
      <summary>Returns the generated hash code for this method.</summary>
      <returns>Returns the hash code for this instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.op_Equality(System.Reflection.Emit.MethodToken,System.Reflection.Emit.MethodToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.MethodToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.MethodToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.MethodToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.op_Inequality(System.Reflection.Emit.MethodToken,System.Reflection.Emit.MethodToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.MethodToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.MethodToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.MethodToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.MethodToken.Token">
      <summary>Returns the metadata token for this method.</summary>
      <returns>Read-only. Returns the metadata token for this method.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary>Defines and represents a module in a dynamic assembly.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary>Gets the dynamic assembly that defined this instance of <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</summary>
      <returns>The dynamic assembly that defined the current dynamic module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary>Completes the global function definitions and global data definitions for this dynamic module.</summary>
      <exception cref="T:System.InvalidOperationException">This method was called previously. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Defines a document for source code.</summary>
      <returns>The defined document.</returns>
      <param name="url">The URL for the document. </param>
      <param name="language">The GUID that identifies the document language. This can be <see cref="F:System.Guid.Empty" />. </param>
      <param name="languageVendor">The GUID that identifies the document language vendor. This can be <see cref="F:System.Guid.Empty" />. </param>
      <param name="documentType">The GUID that identifies the document type. This can be <see cref="F:System.Guid.Empty" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">This method is called on a dynamic module that is not a debug module. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Defines an enumeration type in this module.</summary>
      <returns>The defined enumeration.</returns>
      <param name="name">The full name of the enumeration type, including the namespace. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="visibility">The type attributes for the enumeration, which are restricted to the values that are included in <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" />. </param>
      <param name="underlyingType">The underlying type for the enumeration. This must be a built-in integer type. </param>
      <exception cref="T:System.ArgumentException">Attributes other than visibility attributes are provided.-or- An enumeration with the given name exists in the parent assembly of this module.-or- The visibility attributes do not match the scope of the enumeration. For example, <see cref="F:System.Reflection.TypeAttributes.NestedPublic" /> is specified for <paramref name="visibility" />, but the enumeration is not a nested type. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.</summary>
      <returns>The defined global method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. <paramref name="attributes" /> must include <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">The calling convention for the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <exception cref="T:System.ArgumentException">The method is not static. That is, <paramref name="attributes" /> does not include <see cref="F:System.Reflection.MethodAttributes.Static" />.-or-An element in the <see cref="T:System.Type" /> array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> has been previously called. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.</summary>
      <returns>The defined global method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded null characters. </param>
      <param name="attributes">The attributes of the method. <paramref name="attributes" /> must include <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">The calling convention for the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="requiredReturnTypeCustomModifiers">An array of types representing the required custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the return type has no required custom modifiers, specify null. </param>
      <param name="optionalReturnTypeCustomModifiers">An array of types representing the optional custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the return type has no optional custom modifiers, specify null. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="requiredParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify null instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify null instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentException">The method is not static. That is, <paramref name="attributes" /> does not include <see cref="F:System.Reflection.MethodAttributes.Static" />.-or-An element in the <see cref="T:System.Type" /> array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> method has been previously called. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>Defines a global method with the specified name, attributes, return type, and parameter types.</summary>
      <returns>The defined global method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. <paramref name="attributes" /> must include <see cref="F:System.Reflection.MethodAttributes.Static" />. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <exception cref="T:System.ArgumentException">The method is not static. That is, <paramref name="attributes" /> does not include <see cref="F:System.Reflection.MethodAttributes.Static" />.-or- The length of <paramref name="name" /> is zero -or-An element in the <see cref="T:System.Type" /> array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> has been previously called. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>[SECURITY CRITICAL] Defines an initialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <returns>A field to reference the data.</returns>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="data">The binary large object (BLOB) of data. </param>
      <param name="attributes">The attributes for the field. The default is Static. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineManifestResource(System.String,System.IO.Stream,System.Reflection.ResourceAttributes)">
      <summary>[SECURITY CRITICAL] Defines a binary large object (BLOB) that represents a manifest resource to be embedded in the dynamic assembly.</summary>
      <param name="name">The case-sensitive name for the resource.</param>
      <param name="stream">A stream that contains the bytes for the resource.</param>
      <param name="attribute">An enumeration value that specifies whether the resource is public or private.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>[SECURITY CRITICAL] Defines a PInvoke method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the PInvoke flags.</summary>
      <returns>The defined PInvoke method.</returns>
      <param name="name">The name of the PInvoke method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name="nativeCharSet">The method's native character set. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>[SECURITY CRITICAL] Defines a PInvoke method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the PInvoke flags.</summary>
      <returns>The defined PInvoke method.</returns>
      <param name="name">The name of the PInvoke method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name="entryName">The name of the entry point in the DLL. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name="nativeCharSet">The method's native character set. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary>Defines a private type with the specified name in this module.</summary>
      <returns>A private type with the specified name.</returns>
      <param name="name">The full name of the type, including the namespace. <paramref name="name" /> cannot contain embedded nulls. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary>Defines a type with the specified type name and attributes in this module.</summary>
      <returns>A type with the specified name and attributes.</returns>
      <param name="name">The full name of the type, including the namespace. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the defined type. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Defines a type with the specified type name, attributes, and base type in this module.</summary>
      <returns>A type with the specified characteristics.</returns>
      <param name="name">The full name of the type, including the namespace. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attribute to be associated with the type. </param>
      <param name="parent">The type that the defined type extends. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>[SECURITY CRITICAL] Defines a type with the specified type name, attributes, base type, and total size in this module.</summary>
      <returns>A type with the specified characteristics.</returns>
      <param name="name">The full name  of the type, including the namespace. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the defined type. </param>
      <param name="parent">The type that the defined type extends. </param>
      <param name="typesize">The total size of the type. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>[SECURITY CRITICAL] Defines a type with the specified type name, the attributes, base type, and packing size in this module.</summary>
      <returns>A type with the specified characteristics.</returns>
      <param name="name">The full name of the type, including the namespace. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the defined type. </param>
      <param name="parent">The type that the defined type extends. </param>
      <param name="packsize">The packing size of the type. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>[SECURITY CRITICAL] Defines a type with the specified type name, attributes, base type, packing size, and total size in this module.</summary>
      <returns>A type with the specified characteristics.</returns>
      <param name="name">The full name of the type, including the namespace. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the defined type. </param>
      <param name="parent">The type that the defined type extends. </param>
      <param name="packingSize">The packing size of the type. </param>
      <param name="typesize">The total size of the type. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>Defines a type with the specified type name, attributes, base type, and implemented interfaces in this module.</summary>
      <returns>A type with the specified characteristics.</returns>
      <param name="name">The full name of the type, including the namespace. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the defined type. </param>
      <param name="parent">The type that the defined type extends. </param>
      <param name="interfaces">The list of interfaces that the type implements. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>[SECURITY CRITICAL] Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <returns>A field to reference the data.</returns>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="size">The size of the data field. </param>
      <param name="attributes">The attributes for the field. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.Byte[])">
      <summary>[SECURITY CRITICAL] Defines an unmanaged embedded resource given an opaque binary large object (BLOB) of bytes.</summary>
      <param name="resource">An opaque BLOB that represents an unmanaged resource. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.String)">
      <summary>[SECURITY CRITICAL] Defines an unmanaged resource given the name of Win32 resource file.</summary>
      <param name="resourceFileName">The name of the unmanaged resource file. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to the specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary>[SECURITY CRITICAL] Gets a String representing the fully qualified name and path to this module.</summary>
      <returns>The fully qualified module name.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Returns the named method on an array class.</summary>
      <returns>The named method on an array class.</returns>
      <param name="arrayClass">An array class. </param>
      <param name="methodName">The name of a method on the array class. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayClass" /> is not an array. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayClass" /> or <paramref name="methodName" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Returns the token for the named method on an array class.</summary>
      <returns>The token for the named method on an array class.</returns>
      <param name="arrayClass">The type of the array itself, as opposed to the type of elements the array contains. </param>
      <param name="methodName">The name of the method. </param>
      <param name="callingConvention">The calling convention for the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the parameters of the method. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayClass" /> is not an array type.-or- The length of <paramref name="methodName" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayClass" /> or <paramref name="methodName" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo)">
      <summary>Returns the token used to identify the specified constructor within this module.</summary>
      <returns>The token used to identify the specified constructor within this module.</returns>
      <param name="con">The constructor to get a token for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</summary>
      <returns>An array that contains the custom attributes; the array is empty if there are no attributes.</returns>
      <param name="inherit">This argument is ignored for objects of this type.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.ModuleBuilder" />, and that derive from a specified attribute type.</summary>
      <returns>An array that contains the custom attributes that are derived, at any level, from <paramref name="attributeType" />; the array is empty if there are no such attributes.</returns>
      <param name="attributeType">The base type from which attributes derive.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.</summary>
      <returns>A field that has the specified name and binding attributes, or null if the field does not exist.</returns>
      <param name="name">The field name. </param>
      <param name="bindingAttr">A combination of the BindingFlags bit flags used to control the search. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.</summary>
      <returns>An array of fields that match the specified flags; the array is empty if no such fields exist.</returns>
      <param name="bindingFlags">A combination of the BindingFlags bit flags used to control the search.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFieldToken(System.Reflection.FieldInfo)">
      <summary>Returns the token used to identify the specified field within this module.</summary>
      <returns>The token used to identify the specified field within this module.</returns>
      <param name="field">The field to get a token for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Returns the module-level method that matches the specified criteria.</summary>
      <returns>A method that is defined at the module level, and matches the specified criteria; or null if such a method does not exist.</returns>
      <param name="name">The method name. </param>
      <param name="bindingAttr">A combination of BindingFlags bit flags used to control the search. </param>
      <param name="binder">An object that implements Binder, containing properties related to this method. </param>
      <param name="callConvention">The calling convention for the method. </param>
      <param name="types">The parameter types of the method. </param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null, <paramref name="types" /> is null, or an element of <paramref name="types" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns all the methods that have been defined at the module level for the current <see cref="T:System.Reflection.Emit.ModuleBuilder" />, and that match the specified binding flags.</summary>
      <returns>An array that contains all the module-level methods that match <paramref name="bindingFlags" />.</returns>
      <param name="bindingFlags">A combination of BindingFlags bit flags used to control the search.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)">
      <summary>Returns the token used to identify the specified method within this module.</summary>
      <returns>The token used to identify the specified method within this module.</returns>
      <param name="method">The method to get a token for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The declaring type for the method is not in this module. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Byte[],System.Int32)">
      <summary>Defines a token for the signature that has the specified character array and signature length.</summary>
      <returns>A token for the specified signature.</returns>
      <param name="sigBytes">The signature binary large object (BLOB). </param>
      <param name="sigLength">The length of the signature BLOB. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sigBytes" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Reflection.Emit.SignatureHelper)">
      <summary>Defines a token for the signature that is defined by the specified <see cref="T:System.Reflection.Emit.SignatureHelper" />.</summary>
      <returns>A token for the defined signature.</returns>
      <param name="sigHelper">The signature. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sigHelper" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetStringConstant(System.String)">
      <summary>Returns the token of the given string in the module’s constant pool.</summary>
      <returns>The token of the string in the constant pool.</returns>
      <param name="str">The string to add to the module's constant pool. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary>Gets the named type defined in this module.</summary>
      <returns>The requested type, if the type is defined in this module; otherwise, null.</returns>
      <param name="className">The name of the <see cref="T:System.Type" /> to get. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="className" /> is zero or is greater than 1023. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">An error is encountered while loading the <see cref="T:System.Type" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary>Gets the named type defined in this module, optionally ignoring the case of the type name.</summary>
      <returns>The requested type, if the type is defined in this module; otherwise, null. </returns>
      <param name="className">The name of the <see cref="T:System.Type" /> to get. </param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="className" /> is zero or is greater than 1023.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the named type defined in this module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.</summary>
      <returns>The requested type, if the type is defined in this module; otherwise, null.</returns>
      <param name="className">The name of the <see cref="T:System.Type" /> to get. </param>
      <param name="throwOnError">true to throw an exception if the type cannot be found; false to return null. </param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="className" /> is zero or is greater than 1023. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the specified type is not found. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary>Returns all the classes defined within this module.</summary>
      <returns>An array that contains the classes defined within the module that is reflected by this instance.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.String)">
      <summary>Returns the token used to identify the type with the specified name.</summary>
      <returns>The token used to identify the type with the specified name within this module.</returns>
      <param name="name">The name of the class, including the namespace. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is the empty string ("").-or-<paramref name="name" /> represents a ByRef type. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or-The type specified by <paramref name="name" /> could not be found.</exception>
      <exception cref="T:System.InvalidOperationException">This is a non-transient module that references a transient module. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.Type)">
      <summary>Returns the token used to identify the specified type within this module.</summary>
      <returns>The token used to identify the given type within this module.</returns>
      <param name="type">The type object that represents the class type. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is a ByRef type. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">This is a non-transient module that references a transient module. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether the specified attribute type has been applied to this module.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" /> have been applied to this module; otherwise, false.</returns>
      <param name="attributeType">The type of custom attribute to test for.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsTransient">
      <summary>Returns a value that indicates whether this dynamic module is transient.</summary>
      <returns>true if this dynamic module is transient; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary>Gets a token that identifies the current dynamic module in metadata.</summary>
      <returns>An integer token that identifies the current module in metadata.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary>A string that indicates that this is an in-memory module.</summary>
      <returns>Text that indicates that this is an in-memory module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters. </summary>
      <returns>A <see cref="T:System.Reflection.MethodBase" /> object representing the method that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a method or constructor in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a method or constructor in the scope of the current module.-or-<paramref name="metadataToken" /> is a MethodSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary>Returns the string identified by the specified metadata token.</summary>
      <returns>A <see cref="T:System.String" /> containing a string value from the metadata string heap.</returns>
      <param name="metadataToken">A metadata token that identifies a string in the string heap of the module.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a string in the scope of the current module. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a type in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type in the scope of the current module.-or-<paramref name="metadataToken" /> is a TypeSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte BLOB representing the attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Applies a custom attribute to this module by using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class that specifies the custom attribute to apply. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(System.Reflection.MethodInfo)">
      <summary>[SECURITY CRITICAL] Sets the user entry point.</summary>
      <param name="entryPoint">The user entry point. </param>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary>Describes a Microsoft intermediate language (MSIL) instruction.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary>Tests whether the given object is equal to this Opcode.</summary>
      <returns>true if <paramref name="obj" /> is an instance of Opcode and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare to this object. </param>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.OpCode" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to the current instance.</param>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary>The flow control characteristics of the Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The type of flow control.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary>Returns the generated hash code for this Opcode.</summary>
      <returns>Returns the hash code for this instance.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary>The name of the Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The name of the MSIL instruction.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.OpCode" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.OpCode" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary>The type of Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The type of Microsoft intermediate language (MSIL) instruction.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary>The operand type of an Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The operand type of an MSIL instruction.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary>The size of the Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The size of the MSIL instruction.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary>How the Microsoft intermediate language (MSIL) instruction pops the stack.</summary>
      <returns>Read-only. The way the MSIL instruction pops the stack.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary>How the Microsoft intermediate language (MSIL) instruction pushes operand onto the stack.</summary>
      <returns>Read-only. The way the MSIL instruction pushes operand onto the stack.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary>Returns this Opcode as a <see cref="T:System.String" />.</summary>
      <returns>Returns a <see cref="T:System.String" /> containing the name of this Opcode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary>The value of the immediate operand of the Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The value of the immediate operand of the MSIL instruction.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary>Provides field representations of the Microsoft intermediate language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary>Adds two values and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary>Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary>Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary>Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary>Returns an unmanaged pointer to the argument list of the current method.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary>Transfers control to a target instruction if two values are equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary>Transfers control to a target instruction (short form) if two values are equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary>Transfers control to a target instruction if the first value is greater than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary>Transfers control to a target instruction if the first value is greater than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary>Transfers control to a target instruction if the first value is less than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary>Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary>Transfers control to a target instruction if the first value is less than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary>Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary>Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary>Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary>Converts a value type to an object reference (type O).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary>Unconditionally transfers control to a target instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary>Unconditionally transfers control to a target instruction (short form).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary>Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary>Transfers control to a target instruction if <paramref name="value" /> is false, a null reference (Nothing in Visual Basic), or zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary>Transfers control to a target instruction if <paramref name="value" /> is false, a null reference, or zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary>Transfers control to a target instruction if <paramref name="value" /> is true, not null, or non-zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary>Transfers control to a target instruction (short form) if <paramref name="value" /> is true, not null, or non-zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary>Calls the method indicated by the passed method descriptor.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary>Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary>Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary>Attempts to cast an object passed by reference to the specified class.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary>Compares two values. If they are equal, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary>Compares two values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary>Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary>Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary>Compares two values. If the first value is less than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary>Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />. If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary>Constrains the type on which a virtual method call is made.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary>Converts the value on top of the evaluation stack to native int.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary>Converts the value on top of the evaluation stack to int8, then extends (pads) it to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary>Converts the value on top of the evaluation stack to int16, then extends (pads) it to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary>Converts the value on top of the evaluation stack to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary>Converts the value on top of the evaluation stack to int64.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary>Converts the signed value on top of the evaluation stack to signed native int, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed native int, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary>Converts the signed value on top of the evaluation stack to signed int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary>Converts the signed value on top of the evaluation stack to signed int16 and extending it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed int16 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary>Converts the signed value on top of the evaluation stack to signed int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary>Converts the signed value on top of the evaluation stack to signed int64, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed int64, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary>Converts the signed value on top of the evaluation stack to unsigned native int, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to unsigned native int, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary>Converts the signed value on top of the evaluation stack to unsigned int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to unsigned int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary>Converts the signed value on top of the evaluation stack to unsigned int16 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to unsigned int16 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary>Converts the signed value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary>Converts the signed value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary>Converts the unsigned integer value on top of the evaluation stack to float32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary>Converts the value on top of the evaluation stack to float32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary>Converts the value on top of the evaluation stack to float64.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary>Converts the value on top of the evaluation stack to unsigned native int, and extends it to native int.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary>Converts the value on top of the evaluation stack to unsigned int8, and extends it to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary>Converts the value on top of the evaluation stack to unsigned int16, and extends it to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary>Converts the value on top of the evaluation stack to unsigned int32, and extends it to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary>Converts the value on top of the evaluation stack to unsigned int64, and extends it to int64.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary>Copies a specified number bytes from a source address to a destination address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary>Copies the value type located at the address of an object (type &amp;, * or native int) to the address of the destination object (type &amp;, * or native int).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary>Divides two values and pushes the result as a floating-point (type F) or quotient (type int32) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary>Divides two unsigned integer values and pushes the result (int32) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary>Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary>Transfers control from the filter clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary>Transfers control from the fault or finally clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary>Initializes a specified block of memory at a specific address to a given size and initial value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary>Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary>Tests whether an object reference (type O) is an instance of a particular class.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary>Exits current method and jumps to specified method.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary>Loads an argument (referenced by a specified index value) onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary>Loads the argument at index 0 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary>Loads the argument at index 1 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary>Loads the argument at index 2 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary>Loads the argument at index 3 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary>Loads the argument (referenced by a specified short form index) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary>Load an argument address onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary>Load an argument address, in short form, onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary>Pushes a supplied value of type int32 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary>Pushes the integer value of 0 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary>Pushes the integer value of 1 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary>Pushes the integer value of 2 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary>Pushes the integer value of 3 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary>Pushes the integer value of 4 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary>Pushes the integer value of 5 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary>Pushes the integer value of 6 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary>Pushes the integer value of 7 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary>Pushes the integer value of 8 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary>Pushes the integer value of -1 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary>Pushes the supplied int8 value onto the evaluation stack as an int32, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary>Pushes a supplied value of type int64 onto the evaluation stack as an int64.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary>Pushes a supplied value of type float32 onto the evaluation stack as type F (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary>Pushes a supplied value of type float64 onto the evaluation stack as type F (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary>Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction. </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary>Loads the element with type native int at a specified array index onto the top of the evaluation stack as a native int.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary>Loads the element with type int8 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary>Loads the element with type int16 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary>Loads the element with type int32 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary>Loads the element with type int64 at a specified array index onto the top of the evaluation stack as an int64.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary>Loads the element with type float32 at a specified array index onto the top of the evaluation stack as type F (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary>Loads the element with type float64 at a specified array index onto the top of the evaluation stack as type F (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary>Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type O (object reference).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary>Loads the element with type unsigned int8 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary>Loads the element with type unsigned int16 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary>Loads the element with type unsigned int32 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary>Loads the address of the array element at a specified array index onto the top of the evaluation stack as type &amp; (managed pointer).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary>Finds the value of a field in the object whose reference is currently on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary>Finds the address of a field in the object whose reference is currently on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary>Pushes an unmanaged pointer (type native int) to the native code implementing a specific method onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary>Loads a value of type native int as a native int onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary>Loads a value of type int8 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary>Loads a value of type int16 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary>Loads a value of type int32 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary>Loads a value of type int64 as an int64 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary>Loads a value of type float32 as a type F (float) onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary>Loads a value of type float64 as a type F (float) onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary>Loads an object reference as a type O (object reference) onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary>Loads a value of type unsigned int8 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary>Loads a value of type unsigned int16 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary>Loads a value of type unsigned int32 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary>Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary>Loads the local variable at a specific index onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary>Loads the local variable at index 0 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary>Loads the local variable at index 1 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary>Loads the local variable at index 2 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary>Loads the local variable at index 3 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary>Loads the local variable at a specific index onto the evaluation stack, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary>Loads the address of the local variable at a specific index onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary>Loads the address of the local variable at a specific index onto the evaluation stack, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary>Pushes a null reference (type O) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary>Copies the value type object pointed to by an address to the top of the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary>Pushes the value of a static field onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary>Pushes the address of a static field onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary>Pushes a new object reference to a string literal stored in the metadata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary>Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary>Pushes an unmanaged pointer (type native int) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary>Exits a protected region of code, unconditionally transferring control to a specific target instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary>Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary>Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type *) of the first allocated byte onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary>Pushes a typed reference to an instance of a specific type onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary>Multiplies two values and pushes the result on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary>Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary>Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary>Negates a value and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary>Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary>Creates a new object or a new instance of a value type, pushing an object reference (type O) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary>Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary>Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary>Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary>Removes the value currently on top of the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary>Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary>Retrieves the type token embedded in a typed reference.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary>Retrieves the address (type &amp;) embedded in a typed reference.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary>Divides two values and pushes the remainder onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary>Divides two unsigned values and pushes the remainder onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary>Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary>Rethrows the current exception.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary>Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary>Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary>Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary>Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary>Stores the value on top of the evaluation stack in the argument slot at a specified index.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary>Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary>Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary>Replaces the array element at a given index with the native int value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary>Replaces the array element at a given index with the int8 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary>Replaces the array element at a given index with the int16 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary>Replaces the array element at a given index with the int32 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary>Replaces the array element at a given index with the int64 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary>Replaces the array element at a given index with the float32 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary>Replaces the array element at a given index with the float64 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary>Replaces the array element at a given index with the object ref value (type O) on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary>Replaces the value stored in the field of an object reference or pointer with a new value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary>Stores a value of type native int at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary>Stores a value of type int8 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary>Stores a value of type int16 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary>Stores a value of type int32 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary>Stores a value of type int64 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary>Stores a value of type float32 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary>Stores a value of type float64 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary>Stores a object reference value at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary>Copies a value of a specified type from the evaluation stack into a supplied memory address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary>Replaces the value of a static field with a value from the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary>Subtracts one value from another and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary>Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary>Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary>Implements a jump table.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary>Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary>Returns true or false if the supplied opcode takes a single byte argument.</summary>
      <returns>True or false.</returns>
      <param name="inst">An instance of an Opcode object. </param>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary>Throws the exception object currently on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary>Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, initblk, or cpblk instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary>Converts the boxed representation of a value type to its unboxed form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary>Converts the boxed representation of a type specified in the instruction to its unboxed form. </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary>Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary>Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary>Describes the types of the Microsoft intermediate language (MSIL) instructions.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary>These are Microsoft intermediate language (MSIL) instructions that are used as a synonym for other MSIL instructions. For example, ldarg.0 represents the ldarg instruction with an argument of 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary>Describes a reserved Microsoft intermediate language (MSIL) instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary>Describes a Microsoft intermediate language (MSIL) instruction that applies to objects.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary>Describes a prefix instruction that modifies the behavior of the following instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary>Describes a built-in instruction.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary>Describes the operand type of Microsoft intermediate language (MSIL) instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary>The operand is a 32-bit integer branch target.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary>The operand is a 32-bit metadata token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary>The operand is a 32-bit integer.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary>The operand is a 64-bit integer.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary>The operand is a 32-bit metadata token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary>No operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary>The operand is a 64-bit IEEE floating point number.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary>The operand is a 32-bit metadata signature token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary>The operand is a 32-bit metadata string token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary>The operand is the 32-bit integer argument to a switch instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary>The operand is a FieldRef, MethodRef, or TypeRef token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary>The operand is a 32-bit metadata token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary>The operand is 16-bit integer containing the ordinal of a local variable or an argument.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary>The operand is an 8-bit integer branch target.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary>The operand is an 8-bit integer.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary>The operand is a 32-bit IEEE floating point number.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary>The operand is an 8-bit integer containing the ordinal of a local variable or an argumenta.</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary>Specifies one of two factors that determine the memory alignment of fields when a type is marshaled.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary>The packing size is not specified.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary>The packing size is 1 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary>The packing size is 2 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary>The packing size is 4 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary>The packing size is 8 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary>The packing size is 16 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary>The packing size is 32 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary>The packing size is 64 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary>The packing size is 128 bytes.</summary>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary>Creates or associates parameter information.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary>Gets the attributes for this parameter.</summary>
      <returns>Read-only. Retrieves the attributes for this parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.GetToken">
      <summary>Gets the token for this parameter.</summary>
      <returns>The token for this parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary>Gets a value that indicates whether this is an input parameter.</summary>
      <returns>Retrieves whether this is an input parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary>Gets a value that indicates whether this parameter is optional.</summary>
      <returns>A value that indicates whether this parameter is optional.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary>Gets a value that indicates whether this parameter is an output parameter.</summary>
      <returns>Retrieves whether this parameter is an output parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary>Gets the name of this parameter.</summary>
      <returns>The name of this parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary>Gets the signature position for this parameter.</summary>
      <returns>The signature position for this parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary>Sets the default value of the parameter.</summary>
      <param name="defaultValue">The default value of this parameter. </param>
      <exception cref="T:System.ArgumentException">The parameter is not one of the supported types.-or-The type of <paramref name="defaultValue" /> does not match the type of the parameter.-or-The parameter is of type <see cref="T:System.Object" /> or other reference type, <paramref name="defaultValue" /> is not null, and the value cannot be assigned to the reference type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Set a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
    </member>
    <member name="T:System.Reflection.Emit.ParameterToken">
      <summary>The ParameterToken struct is an opaque representation of the token returned by the metadata to represent a parameter.</summary>
    </member>
    <member name="F:System.Reflection.Emit.ParameterToken.Empty">
      <summary>The default ParameterToken with <see cref="P:System.Reflection.Emit.ParameterToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of ParameterToken and is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of ParameterToken and equals the current instance; otherwise, false.</returns>
      <param name="obj">The object to compare to this object. </param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.Equals(System.Reflection.Emit.ParameterToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.ParameterToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.ParameterToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.GetHashCode">
      <summary>Generates the hash code for this parameter.</summary>
      <returns>Returns the hash code for this parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.op_Equality(System.Reflection.Emit.ParameterToken,System.Reflection.Emit.ParameterToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.ParameterToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.ParameterToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.ParameterToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.op_Inequality(System.Reflection.Emit.ParameterToken,System.Reflection.Emit.ParameterToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.ParameterToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.ParameterToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.ParameterToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.ParameterToken.Token">
      <summary>Retrieves the metadata token for this parameter.</summary>
      <returns>Read-only. Retrieves the metadata token for this parameter.</returns>
    </member>
    <member name="T:System.Reflection.Emit.PEFileKinds">
      <summary>Specifies the type of the portable executable (PE) file.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.Dll">
      <summary>The portable executable (PE) file is a DLL.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.ConsoleApplication">
      <summary>The application is a console (not a Windows-based) application.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.WindowApplication">
      <summary>The application is a Windows-based application.</summary>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary>Defines a property for a dynamic type.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Adds one of the methods other than property accessors that can be associated with a property.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the other method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary>Gets the attributes for this property.</summary>
      <returns>The attributes of this property, which are set by the <see cref="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])" /> method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary>Gets a value indicating whether the property has a get accessor.</summary>
      <returns>true if this property has a get accessor, and therefore can be read; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary>Gets a value indicating whether the property has a set accessor.</summary>
      <returns>true if this property has a set accessor, and therefore can be written to; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The type that declares this member.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary>Returns an array of the public and non-public get and set accessors on this property. This method is not supported.</summary>
      <returns>An array that contains the matching get and set accessors, or an empty array if matching accessors do not exist on this property.</returns>
      <param name="nonPublic">true to return non-public methods in the array; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of all the custom attributes for this property. This method is not supported.</summary>
      <returns>An array of all the custom attributes.</returns>
      <param name="inherit">true to walk up the property's inheritance chain to find the custom attributes; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes identified by <see cref="T:System.Type" />. This method is not supported.</summary>
      <returns>An array of custom attributes defined on this reflected member, or null if no attributes are defined on this member.</returns>
      <param name="attributeType">An array of custom attributes identified by type. </param>
      <param name="inherit">true to walk up the property's inheritance chain to find the custom attributes; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary>Returns the public or non-public get accessor for this property.</summary>
      <returns>The get accessor for this property, if <paramref name="nonPublic" /> is true. Returns null if <paramref name="nonPublic" /> is false and the get accessor is non-public, or if <paramref name="nonPublic" /> is true but no get accessor exists.</returns>
      <param name="nonPublic">true to return a non-public accessor; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary>Returns an array of all the index parameters for the property. This method is not supported.</summary>
      <returns>An array that contains the parameters for the indexes.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary>Returns the set accessor for this property.</summary>
      <returns>Value Condition The set accessor for this property. The set accessor is public.-or-<paramref name="nonPublic" /> is true and a set accessor has been assigned to the property. null <paramref name="nonPublic" /> is false and the set accessor is non-public.-or-There is no set accessor because the property is read-only.  </returns>
      <param name="nonPublic">true to return a non-public set accessor; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary>Gets the value of the indexed property by calling the property's getter method. This method is not supported.</summary>
      <returns>The value of the specified indexed property.</returns>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Gets the value of a property that has the specified binding, index, and CultureInfo. This method is not supported.</summary>
      <returns>The property value for <paramref name="obj" />.</returns>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags: InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <param name="culture">The CultureInfo object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of <paramref name="attributeType" /> are defined on this property. This method is not supported.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" /> are defined on this property; otherwise false.</returns>
      <param name="attributeType">The object to which the custom attributes are applied. </param>
      <param name="inherit">true to walk up this property's inheritance chain to find the custom attributes; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary>Gets the module in which the type that declares the current property is being defined.</summary>
      <returns>The module in which the type that declares the current property is defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary>Gets the name of this member.</summary>
      <returns>The name of this member.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
      <summary>Gets the token for this property.</summary>
      <returns>The token for this property.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary>Gets the type of the property.</summary>
      <returns>The type of this property.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary>Gets the dynamic type on which this property is defined.</summary>
      <returns>The dynamic type that defines this property.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary>Sets the default value of this property.</summary>
      <param name="defaultValue">The default value of this property. </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
      <exception cref="T:System.ArgumentException">The property is not one of the supported types.-or-The type of <paramref name="defaultValue" /> does not match the type of the property.-or-The property is of type <see cref="T:System.Object" /> or other reference type, <paramref name="defaultValue" /> is not null, and the value cannot be assigned to the reference type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Applies a custom attribute by using a specified binary large object (BLOB) that represents the attribute.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte BLOB representing the attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Applies a custom attribute by using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class that defines the custom attribute to apply. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets a get accessor, which is the method that gets the property value.</summary>
      <param name="mdBuilder">The method that gets the property value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the set accessor, which is the method that sets the property value.</summary>
      <param name="mdBuilder">The method that sets the property value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary>Sets the value of the property with optional index values for index properties. This method is not supported.</summary>
      <param name="obj">The object whose property value will be set. </param>
      <param name="value">The new value for this property. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Sets the property value for the given object to the given value. This method is not supported.</summary>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="value">The new value for this property. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags: InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <param name="culture">The CultureInfo object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyToken">
      <summary>The PropertyToken struct is an opaque representation of the Token returned by the metadata to represent a property.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PropertyToken.Empty">
      <summary>The default PropertyToken with <see cref="P:System.Reflection.Emit.PropertyToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of PropertyToken and is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of PropertyToken and equals the current instance; otherwise, false.</returns>
      <param name="obj">The object to this object. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.Equals(System.Reflection.Emit.PropertyToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.PropertyToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.PropertyToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.GetHashCode">
      <summary>Generates the hash code for this property.</summary>
      <returns>Returns the hash code for this property.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.op_Equality(System.Reflection.Emit.PropertyToken,System.Reflection.Emit.PropertyToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.PropertyToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.PropertyToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.PropertyToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.op_Inequality(System.Reflection.Emit.PropertyToken,System.Reflection.Emit.PropertyToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.PropertyToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.PropertyToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.PropertyToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.PropertyToken.Token">
      <summary>Retrieves the metadata token for this property.</summary>
      <returns>Read-only. Retrieves the metadata token for this instance.</returns>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary>Provides methods for building signatures.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary>Adds an argument to the signature.</summary>
      <param name="clsArgument">The type of the argument. </param>
      <exception cref="T:System.ArgumentException">The signature has already been finished. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clsArgument" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary>Adds an argument of the specified type to the signature, specifying whether the argument is pinned.</summary>
      <param name="argument">The argument type.</param>
      <param name="pinned">true if the argument is pinned; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary>Adds an argument to the signature, with the specified custom modifiers.</summary>
      <param name="argument">The argument type.</param>
      <param name="requiredCustomModifiers">An array of types representing the required custom modifiers for the argument, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the argument has no required custom modifiers, specify null.</param>
      <param name="optionalCustomModifiers">An array of types representing the optional custom modifiers for the argument, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the argument has no optional custom modifiers, specify null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> is null. -or-An element of <paramref name="requiredCustomModifiers" /> or <paramref name="optionalCustomModifiers" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The signature has already been finished. -or-One of the specified custom modifiers is an array type.-or-One of the specified custom modifiers is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property is true for the custom modifier.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a set of arguments to the signature, with the specified custom modifiers.</summary>
      <param name="arguments">The types of the arguments to be added.</param>
      <param name="requiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If a particular argument has no required custom modifiers, specify null instead of an array of types. If none of the arguments have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If a particular argument has no optional custom modifiers, specify null instead of an array of types. If none of the arguments have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentNullException">An element of <paramref name="arguments" /> is null. -or-One of the specified custom modifiers is null. (However, null can be specified for the array of custom modifiers for any argument.)</exception>
      <exception cref="T:System.ArgumentException">The signature has already been finished. -or-One of the specified custom modifiers is an array type.-or-One of the specified custom modifiers is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property is true for the custom modifier. -or-The size of <paramref name="requiredCustomModifiers" /> or <paramref name="optionalCustomModifiers" /> does not equal the size of <paramref name="arguments" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary>Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary>Checks if this instance is equal to the given object.</summary>
      <returns>true if the given object is a SignatureHelper and represents the same signature; otherwise, false.</returns>
      <param name="obj">The object with which this instance should be compared. </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary>Returns a signature helper for a field.</summary>
      <returns>The SignatureHelper object for a field.</returns>
      <param name="mod">The dynamic module that contains the field for which the SignatureHelper is requested. </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary>Creates and returns a hash code for this instance.</summary>
      <returns>Returns the hash code based on the name.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary>Returns a signature helper for a local variable.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> for a local variable.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary>Returns a signature helper for a local variable.</summary>
      <returns>The SignatureHelper object for a local variable.</returns>
      <param name="mod">The dynamic module that contains the local variable for which the SignatureHelper is requested. </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary>Returns a signature helper for a method given the method's calling convention and return type.</summary>
      <returns>The SignatureHelper object for a method.</returns>
      <param name="callingConvention">The calling convention of the method. </param>
      <param name="returnType">The return type of the method, or null for a void return type (Sub procedure in Visual Basic). </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary>Returns a signature helper for a method given the method's module, calling convention, and return type.</summary>
      <returns>The SignatureHelper object for a method.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the method for which the SignatureHelper is requested. </param>
      <param name="callingConvention">The calling convention of the method. </param>
      <param name="returnType">The return type of the method, or null for a void return type (Sub procedure in Visual Basic). </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)">
      <summary>Returns a signature helper for a method given the method's module, unmanaged calling convention, and return type.</summary>
      <returns>The SignatureHelper object for a method.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the method for which the SignatureHelper is requested. </param>
      <param name="unmanagedCallConv">The unmanaged calling convention of the method. </param>
      <param name="returnType">The return type of the method, or null for a void return type (Sub procedure in Visual Basic). </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.-or-<paramref name="unmanagedCallConv" /> is an unknown unmanaged calling convention.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.</summary>
      <returns>The SignatureHelper object for a method.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the method for which the SignatureHelper is requested. </param>
      <param name="returnType">The return type of the method, or null for a void return type (Sub procedure in Visual Basic). </param>
      <param name="parameterTypes">The types of the arguments of the method, or null if the method has no arguments. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.-or-An element of <paramref name="parameterTypes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)">
      <summary>Returns a signature helper for a method given the method's unmanaged calling convention and return type.</summary>
      <returns>The SignatureHelper object for a method.</returns>
      <param name="unmanagedCallingConvention">The unmanaged calling convention of the method. </param>
      <param name="returnType">The return type of the method, or null for a void return type (Sub procedure in Visual Basic). </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="unmanagedCallConv" /> is an unknown unmanaged calling convention.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> object for a property.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the property for which the <see cref="T:System.Reflection.Emit.SignatureHelper" /> is requested.</param>
      <param name="returnType">The property type.</param>
      <param name="parameterTypes">The argument types, or null if the property has no arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.-or-An element of <paramref name="parameterTypes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> object for a property.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the property for which the <see cref="T:System.Reflection.Emit.SignatureHelper" /> is requested.</param>
      <param name="returnType">The property type.</param>
      <param name="requiredReturnTypeCustomModifiers">An array of types representing the required custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the return type has no required custom modifiers, specify null.</param>
      <param name="optionalReturnTypeCustomModifiers">An array of types representing the optional custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the property's arguments, or null if the property has no arguments.</param>
      <param name="requiredParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify null instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify null instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.-or-An element of <paramref name="parameterTypes" /> is null. -or-One of the specified custom modifiers is null. (However, null can be specified for the array of custom modifiers for any argument.)</exception>
      <exception cref="T:System.ArgumentException">The signature has already been finished. -or-<paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.-or-One of the specified custom modifiers is an array type.-or-One of the specified custom modifiers is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property is true for the custom modifier.-or-The size of <paramref name="requiredParameterTypeCustomModifiers" /> or <paramref name="optionalParameterTypeCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary>Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.</summary>
      <returns>Returns a byte array made up of the full signature.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary>Returns a string representing the signature arguments.</summary>
      <returns>Returns a string representing the arguments of this signature.</returns>
    </member>
    <member name="T:System.Reflection.Emit.SignatureToken">
      <summary>Represents the Token returned by the metadata to represent a signature.</summary>
    </member>
    <member name="F:System.Reflection.Emit.SignatureToken.Empty">
      <summary>The default SignatureToken with <see cref="P:System.Reflection.Emit.SignatureToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of SignatureToken and is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of SignatureToken and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare with this SignatureToken. </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.Equals(System.Reflection.Emit.SignatureToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.SignatureToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.SignatureToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.GetHashCode">
      <summary>Generates the hash code for this signature.</summary>
      <returns>Returns the hash code for this signature.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.op_Equality(System.Reflection.Emit.SignatureToken,System.Reflection.Emit.SignatureToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.SignatureToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.SignatureToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.SignatureToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.op_Inequality(System.Reflection.Emit.SignatureToken,System.Reflection.Emit.SignatureToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.SignatureToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.SignatureToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.SignatureToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.SignatureToken.Token">
      <summary>Retrieves the metadata token for the local variable signature for this method.</summary>
      <returns>Read-only. Retrieves the metadata token of this signature.</returns>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary>Describes how values are pushed onto a stack or popped off a stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary>No values are popped off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary>Pops one value off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary>Pops 1 value off the stack for the first operand, and 1 value of the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary>Pops a 32-bit integer off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a value off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 32-bit integer off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 64-bit integer off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary>Pops a 32-bit integer off the stack for the first operand, a 32-bit integer off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 32-bit floating point number off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 64-bit floating point number off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary>Pops a reference off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary>Pops a reference off the stack for the first operand, and a value off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary>Pops a reference off the stack for the first operand, and a 32-bit integer off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a value off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit floating point number off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a reference off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary>No values are pushed onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary>Pushes one value onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary>Pushes 1 value onto the stack for the first operand, and 1 value onto the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary>Pushes a 32-bit integer onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary>Pushes a 64-bit integer onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary>Pushes a 32-bit floating point number onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary>Pushes a 64-bit floating point number onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary>Pushes a reference onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary>Pops a variable off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary>Pushes a variable onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="T:System.Reflection.Emit.StringToken">
      <summary>Represents a token that represents a string.</summary>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of StringToken and is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of StringToken and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare with this StringToken. </param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.Equals(System.Reflection.Emit.StringToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.StringToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.StringToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.GetHashCode">
      <summary>Returns the hash code for this string.</summary>
      <returns>Returns the underlying string token.</returns>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.op_Equality(System.Reflection.Emit.StringToken,System.Reflection.Emit.StringToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.StringToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.StringToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.StringToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.op_Inequality(System.Reflection.Emit.StringToken,System.Reflection.Emit.StringToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.StringToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.StringToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.StringToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.StringToken.Token">
      <summary>Retrieves the metadata token for this string.</summary>
      <returns>Read-only. Retrieves the metadata token of this string.</returns>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary>Defines and creates new instances of classes during run time.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary>Adds an interface that this type implements.</summary>
      <param name="interfaceType">The interface that this type implements. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary>Gets the dynamic assembly that contains this type definition.</summary>
      <returns>The dynamic assembly that contains this type definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary>Gets the full name of this type, qualified by the display name of the assembly.</summary>
      <returns>The full name of this type, qualified by the display name of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary>Gets the base type of this type.</summary>
      <returns>The base type of this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary>Creates a <see cref="T:System.Type" /> object for the class. After defining fields and methods on the class, CreateType is called in order to load its Type object.</summary>
      <returns>The new object for this class.</returns>
      <exception cref="T:System.InvalidOperationException">The enclosing type has not been created.-or- This type is non-abstract and contains an abstract method.-or- This type is not an abstract class or an interface, and has a method without a method body. </exception>
      <exception cref="T:System.NotSupportedException">The type contains invalid Microsoft intermediate language (MSIL) code.-or- The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch. </exception>
      <exception cref="T:System.TypeLoadException">The type cannot be loaded. For example, it contains a static method that has the calling convention <see cref="F:System.Reflection.CallingConventions.HasThis" />, or it has a field that depends on a nested type that has not yet been created.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary>Gets the method that declared the current generic type parameter.</summary>
      <returns>The method that declared the current type, if the current type is a generic type parameter; otherwise, null.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary>Gets the type that declared this type.</summary>
      <returns>The type that declared this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary>Adds a new constructor to the type, with the given attributes and signature.</summary>
      <returns>The defined constructor.</returns>
      <param name="attributes">The attributes of the constructor. </param>
      <param name="callingConvention">The calling convention of the constructor. </param>
      <param name="parameterTypes">The parameter types of the constructor. </param>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. -or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. -or-The current type is an interface. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.</summary>
      <returns>The defined constructor.</returns>
      <param name="attributes">The attributes of the constructor. </param>
      <param name="callingConvention">The calling convention of the constructor. </param>
      <param name="parameterTypes">The parameter types of the constructor. </param>
      <param name="requiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentException">The size of <paramref name="requiredCustomModifiers" /> or <paramref name="optionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. -or-The current type is an interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary>Defines the default constructor. The constructor defined here will simply call the default constructor of the parent.</summary>
      <returns>The defined constructor.</returns>
      <param name="attributes">A MethodAttributes object representing the attributes to be applied to the constructor. </param>
      <exception cref="T:System.NotSupportedException">The parent type (base type) does not have a default constructor. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false.-or-The current type is an interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary>Adds a new event to the type, with the given name, attributes and event type.</summary>
      <returns>The defined event.</returns>
      <param name="name">The name of the event. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the event. </param>
      <param name="eventtype">The type of the event. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="eventtype" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary>Adds a new field to the type, with the given name, attributes, and field type.</summary>
      <returns>The defined field.</returns>
      <param name="fieldName">The name of the field. <paramref name="fieldName" /> cannot contain embedded nulls. </param>
      <param name="type">The type of the field </param>
      <param name="attributes">The attributes of the field. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="fieldName" /> is zero.-or- <paramref name="type" /> is System.Void.-or- A total size was specified for the parent class of this field. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary>Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.</summary>
      <returns>The defined field.</returns>
      <param name="fieldName">The name of the field. <paramref name="fieldName" /> cannot contain embedded nulls. </param>
      <param name="type">The type of the field </param>
      <param name="requiredCustomModifiers">An array of types representing the required custom modifiers for the field, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</param>
      <param name="optionalCustomModifiers">An array of types representing the optional custom modifiers for the field, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</param>
      <param name="attributes">The attributes of the field. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="fieldName" /> is zero.-or- <paramref name="type" /> is System.Void.-or- A total size was specified for the parent class of this field. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary>Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to set their constraints.</summary>
      <returns>An array of objects that can be used to define the constraints of the generic type parameters for the current type.</returns>
      <param name="names">An array of names for the generic type parameters.</param>
      <exception cref="T:System.InvalidOperationException">Generic type parameters have already been defined for this type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> is null.-or-An element of <paramref name="names" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> is an empty array.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>[SECURITY CRITICAL] Defines initialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <returns>A field to reference the data.</returns>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="data">The binary large object (BLOB) of data. </param>
      <param name="attributes">The attributes for the field. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary>Adds a new method to the type, with the specified name and method attributes.</summary>
      <returns>The defined method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary>Adds a new method to the type, with the specified name, method attributes, and calling convention.</summary>
      <returns>The defined method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The calling convention of the method. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The type of the parent of this method is an interface and this method is not virtual (Overridable in Visual Basic). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.</summary>
      <returns>The defined method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The calling convention of the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the parameters of the method. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.</summary>
      <returns>The defined method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The calling convention of the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the method.</param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic). -or-The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>Adds a new method to the type, with the specified name, method attributes, and method signature.</summary>
      <returns>The defined method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the parameters of the method. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>Specifies a given method body that implements a given method declaration, potentially with a different name.</summary>
      <param name="methodInfoBody">The method body to be used. </param>
      <param name="methodInfoDeclaration">The method whose declaration is to be used. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodInfoBody" /> does not belong to this class. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfoBody" /> or <paramref name="methodInfoDeclaration" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- The declaring type of <paramref name="methodInfoBody" /> is not the type represented by this <see cref="T:System.Reflection.Emit.TypeBuilder" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary>Defines a nested type, given its name.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary>Defines a nested type, given its name and attributes.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Defines a nested type, given its name, attributes, and the type that it extends.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>[SECURITY CRITICAL] Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <param name="typeSize">The total size of the type. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>[SECURITY CRITICAL] Defines a nested type, given its name, attributes, the type that it extends, and the packing size.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <param name="packSize">The packing size of the type. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <param name="interfaces">The interfaces that the nested type implements. </param>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-An element of the <paramref name="interfaces" /> array is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>[SECURITY CRITICAL] Defines a PInvoke method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the PInvoke flags.</summary>
      <returns>The defined PInvoke method.</returns>
      <param name="name">The name of the PInvoke method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name="nativeCharSet">The method's native character set. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>[SECURITY CRITICAL] Defines a PInvoke method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the PInvoke flags.</summary>
      <returns>The defined PInvoke method.</returns>
      <param name="name">The name of the PInvoke method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name="entryName">The name of the entry point in the DLL. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name="nativeCharSet">The method's native character set. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>[SECURITY CRITICAL] Defines a PInvoke method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the PInvoke flags, and custom modifiers for the parameters and return type.</summary>
      <returns>The defined PInvoke method.</returns>
      <param name="name">The name of the PInvoke method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name="entryName">The name of the entry point in the DLL. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name="nativeCharSet">The method's native character set. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary>Adds a new property to the type, with the given name and property signature.</summary>
      <returns>The defined property.</returns>
      <param name="name">The name of the property. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the property. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="parameterTypes">The types of the parameters of the property. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or- Any of the elements of the <paramref name="parameterTypes" /> array is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new property to the type, with the given name, property signature, and custom modifiers.</summary>
      <returns>The defined property.</returns>
      <param name="name">The name of the property. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the property. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the property. </param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null-or- Any of the elements of the <paramref name="parameterTypes" /> array is null</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary>Defines the initializer for this type.</summary>
      <returns>A type initializer.</returns>
      <exception cref="T:System.InvalidOperationException">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>[SECURITY CRITICAL] Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <returns>A field to reference the data.</returns>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="size">The size of the data field. </param>
      <param name="attributes">The attributes for the field. </param>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary>Gets the full path of this type.</summary>
      <returns>The full path of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary>Gets a value that indicates the covariance and special constraints of the current generic type parameter. </summary>
      <returns>A bitwise combination of the enumeration values that describe the covariance and special constraints of the current generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary>Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.</summary>
      <returns>If the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary>Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition. </summary>
      <returns>The constructor of <paramref name="type" /> corresponding to <paramref name="constructor" />, which specifies a constructor belonging to the generic type definition of <paramref name="type" />.</returns>
      <param name="type">The constructed generic type whose constructor is returned.</param>
      <param name="constructor">A constructor on the generic type definition of <paramref name="type" />, which specifies which constructor of <paramref name="type" /> to return.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not represent a generic type. -or-<paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or-The declaring type of <paramref name="constructor" /> is not a generic type definition. -or-The declaring type of <paramref name="constructor" /> is not the generic type definition of <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the public and non-public constructors defined for this class, as specified.</summary>
      <returns>An array of constructors defined for this class. If no constructors are defined, an empty array is returned.</returns>
      <param name="bindingAttr">A bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod or NonPublic. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this type.</summary>
      <returns>An array of custom attributes defined on the current type.</returns>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. Call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the completed <see cref="T:System.Type" />, after you have called <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> on this TypeBuilder. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns all the custom attributes of the current type that are assignable to a specified type.</summary>
      <returns>An array of custom attributes defined on the current type.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. Call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the completed <see cref="T:System.Type" />, after you have called <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> on this TypeBuilder.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The type must be a type provided by the underlying runtime system.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary>Calling this method always throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>This method is not supported. No value is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the event with the specified name.</summary>
      <returns>The event that is declared or inherited by the type with the specified name, or null if there are no matches.</returns>
      <param name="name">The name of the event to search for. </param>
      <param name="bindingAttr">A bitwise combination of values that limits the search. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary>Returns the public events declared or inherited by this type.</summary>
      <returns>An array of public events declared or inherited by this type. An empty array is returned if there are no public events.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public events that are declared by this type.</summary>
      <returns>An array of events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.</returns>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search.</param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the field specified by the given name.</summary>
      <returns>The field that is declared or inherited by the type with the specified name and public or non-public modifier. If there are no matches, null is returned.</returns>
      <param name="name">The name of the field to get. </param>
      <param name="bindingAttr">A bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod or NonPublic. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary>Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition. </summary>
      <returns>The field of <paramref name="type" /> corresponding to <paramref name="field" />, which specifies a field belonging to the generic type definition of <paramref name="type" />.</returns>
      <param name="type">The constructed generic type whose field is returned.</param>
      <param name="field">A field on the generic type definition of <paramref name="type" />, which specifies which field of <paramref name="type" /> to return.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not represent a generic type. -or-<paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or-The declaring type of <paramref name="field" /> is not a generic type definition. -or-The declaring type of <paramref name="field" /> is not the generic type definition of <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public fields that are declared by this type.</summary>
      <returns>An array of public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.</returns>
      <param name="bindingAttr">A bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod or NonPublic. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects representing the type arguments of a generic type or the type parameters of a generic type definition.</summary>
      <returns>An array of objects that represent the type arguments of a generic type or the type parameters of a generic type definition.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current type can be obtained.</summary>
      <returns>A generic type definition from which the current type can be obtained.</returns>
      <exception cref="T:System.InvalidOperationException">The current type is not generic. That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> returns false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.</summary>
      <returns>The implemented interface. Returns null if no interface matching name is found.</returns>
      <param name="name">The name of the interface. </param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the requested interface.</summary>
      <returns>The requested interface mapping.</returns>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface for which the mapping is to be retrieved. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary>Returns an array of all the interfaces implemented on this type and its base types.</summary>
      <returns>An array of implemented interfaces. If none are defined, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public members declared or inherited by this type, as specified.</summary>
      <returns>An array of public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned.</returns>
      <param name="name">The name of the member. </param>
      <param name="type">The type of the member to return. </param>
      <param name="bindingAttr">A bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod or NonPublic. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns the members for the public and non-public members declared or inherited by this type.</summary>
      <returns>An array of public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.</returns>
      <param name="bindingAttr">A bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod or NonPublic. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary>Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition. </summary>
      <returns>The method of <paramref name="type" /> corresponding to <paramref name="method" />, which specifies a method belonging to the generic type definition of <paramref name="type" />.</returns>
      <param name="type">The constructed generic type whose method is returned.</param>
      <param name="method">A method on the generic type definition of <paramref name="type" />, which specifies which method of <paramref name="type" /> to return.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is a generic method that is not a generic method definition.-or-<paramref name="type" /> does not represent a generic type.-or-<paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or-The declaring type of <paramref name="method" /> is not a generic type definition. -or-The declaring type of <paramref name="method" /> is not the generic type definition of <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public methods declared or inherited by this type, as specified.</summary>
      <returns>An array of public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned.</returns>
      <param name="bindingAttr">A bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod or NonPublic. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public nested types that are declared by this type.</summary>
      <returns>The nested type that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The name of the nested type to get. </param>
      <param name="bindingAttr">A bitmask that includes one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to conduct a case-sensitive search for public methods. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public nested types that are declared or inherited by this type.</summary>
      <returns>An array of types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</returns>
      <param name="bindingAttr">A bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod or NonPublic. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public properties declared or inherited by this type, as specified.</summary>
      <returns>An array of public and non-public properties defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public properties are returned.</returns>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod or NonPublic. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary>Gets the GUID of this type.</summary>
      <returns>The GUID of this type </returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</summary>
      <returns>The return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used. See <see cref="T:System.Reflection.Binder" />. </param>
      <param name="target">The object on which to invoke the specified member. If the member is static, this parameter is ignored. </param>
      <param name="args">An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null. </param>
      <param name="modifiers">An array of the same length as <paramref name="args" /> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details. </param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.) </param>
      <param name="namedParameters">Each parameter in the <paramref name="namedParameters" /> array gets the value in the corresponding element in the <paramref name="args" /> array. If the length of <paramref name="args" /> is greater than the length of <paramref name="namedParameters" />, the remaining argument values are passed in order. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary>Determines whether an instance of the current <see cref="T:System.Type" /> can be assigned from an instance of the specified Type.</summary>
      <returns>true if the <paramref name="c" /> parameter and the current <see cref="T:System.Type" /> represent the same type, or if the current Type is in the inheritance hierarchy of <paramref name="c" />, or if the current Type is an interface that <paramref name="c" /> supports. false if none of these conditions are the case, or if <paramref name="c" /> is a null reference (Nothing in Visual Basic).</returns>
      <param name="c">The Type to compare with the current Type. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary>Returns a value that indicates whether the current dynamic type has been created.</summary>
      <returns>true if the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has been called; otherwise, false. </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether a custom attribute is applied to the current type.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" />, or an attribute derived from <paramref name="attributeType" />, is defined on this type; otherwise, false.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not defined.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary>Gets a value indicating whether the current type is a generic type parameter.</summary>
      <returns>true if the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary>Gets a value indicating whether the current type is a generic type. </summary>
      <returns>true if the type represented by the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object is generic; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> represents a generic type definition from which other generic types can be constructed.</summary>
      <returns>true if this <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type definition; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary>Determines whether this type is derived from a specified type.</summary>
      <returns>true if this type is the same as the type <paramref name="c" />, or is a subtype of type <paramref name="c" />; otherwise, false.</returns>
      <param name="c">A <see cref="T:System.Type" /> that is to be checked. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type, with a lower bound of zero.</summary>
      <returns>A one-dimensional array type whose element type is the current type, with a lower bound of zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary>Returns a <see cref="T:System.Type" /> object that represents an array of the current type, with the specified number of dimensions.</summary>
      <returns>A one-dimensional array of the current type.</returns>
      <param name="rank">The number of dimensions for the array. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is not a valid array dimension.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef in Visual Basic).</summary>
      <returns>The current type when passed as a ref parameter (ByRef in Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary>Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.</summary>
      <returns>The constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type. </returns>
      <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic type definition.</param>
      <exception cref="T:System.InvalidOperationException">The current type does not represent the definition of a generic type. That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> returns false. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is null.-or- Any element of <paramref name="typeArguments" /> is null. </exception>
      <exception cref="T:System.ArgumentException">Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</summary>
      <returns>The type of an unmanaged pointer to the current type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary>Gets the dynamic module that contains this type definition.</summary>
      <returns>The dynamic module that contains this type definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary>Gets the name of this type.</summary>
      <returns>The name of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary>Gets the namespace where this TypeBuilder is defined.</summary>
      <returns>The namespace where this TypeBuilder is defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary>Gets the packing size of this type.</summary>
      <returns>The packing size of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary>Gets the type that was used to obtain this type.</summary>
      <returns>The type that was used to obtain this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>[SECURITY CRITICAL] Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte binary large object (BLOB) representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary>Sets the base type of the type currently under construction.</summary>
      <param name="parent">The new base type. </param>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-<paramref name="parent" /> is null, and the current instance represents an interface whose attributes do not include <see cref="F:System.Reflection.TypeAttributes.Abstract" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parent" /> is an interface. </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary>Gets the total size of a type.</summary>
      <returns>The type’s total size.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary>Returns the name of the type, excluding the namespace.</summary>
      <returns>The name of the type, excluding the namespace.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary>Not supported in dynamic modules.</summary>
      <returns>Read-only.</returns>
      <exception cref="T:System.NotSupportedException">Not supported in dynamic modules. </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeToken">
      <summary>Gets the type token of this type.</summary>
      <returns>The type token of this type.</returns>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary>Gets the underlying system type for this TypeBuilder.</summary>
      <returns>The underlying system type.</returns>
      <exception cref="T:System.InvalidOperationException">This type is an enumeration, but there is no underlying system type. </exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary>Represents that total size for the type is not specified.</summary>
    </member>
    <member name="T:System.Reflection.Emit.TypeToken">
      <summary>Represents the Token returned by the metadata to represent a type.</summary>
    </member>
    <member name="F:System.Reflection.Emit.TypeToken.Empty">
      <summary>The default TypeToken with <see cref="P:System.Reflection.Emit.TypeToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of TypeToken and is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of TypeToken and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare with this TypeToken. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.Equals(System.Reflection.Emit.TypeToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.TypeToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.TypeToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.GetHashCode">
      <summary>Generates the hash code for this type.</summary>
      <returns>Returns the hash code for this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.op_Equality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.TypeToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.TypeToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.TypeToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.op_Inequality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.TypeToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.TypeToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.TypeToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.TypeToken.Token">
      <summary>Retrieves the metadata token for this class.</summary>
      <returns>Read-only. Retrieves the metadata token of this type.</returns>
    </member>
    <member name="T:System.Resources.IResourceReader">
      <summary>Provides the base functionality to read data from resource files.</summary>
    </member>
    <member name="M:System.Resources.IResourceReader.Close">
      <summary>Closes the resource reader after releasing any resources associated with it.</summary>
    </member>
    <member name="M:System.Resources.IResourceReader.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> of the resources for this reader.</summary>
      <returns>A dictionary enumerator for the resources for this reader.</returns>
    </member>
    <member name="T:System.Resources.MissingManifestResourceException">
      <summary>The exception thrown if the main assembly does not contain the resources for the neutral culture, and they are required because of a missing appropriate satellite assembly.</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingManifestResourceException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingManifestResourceException" /> class with the specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingManifestResourceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Resources.NeutralResourcesLanguageAttribute">
      <summary>Informs the <see cref="T:System.Resources.ResourceManager" /> of the neutral culture of an assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> class.</summary>
      <param name="cultureName">The name of the culture that the current assembly's neutral resources were written in. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cultureName" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String,System.Resources.UltimateResourceFallbackLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> class with the specified ultimate resource fallback location.</summary>
      <param name="cultureName">The name of the culture that the current assembly's neutral resources were written in.</param>
      <param name="location">One of the enumeration values that indicates the location from which to retrieve neutral fallback resources.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cultureName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is not a member of <see cref="T:System.Resources.UltimateResourceFallbackLocation" />.</exception>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.CultureName">
      <summary>Gets the culture name.</summary>
      <returns>The name of the default culture for the main assembly.</returns>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.Location">
      <summary>Gets the location for the <see cref="T:System.Resources.ResourceManager" /> class to use to retrieve neutral resources by using the URI fallback process, as described in Resource Files.</summary>
      <returns>One of the enumeration values that indicates the location (main assembly or satellite) from which to retrieve neutral resources.</returns>
    </member>
    <member name="T:System.Resources.ResourceManager">
      <summary>Provides convenient access to culture-specific resources at run time.</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class with default values.</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class that looks up resources contained in files derived from the specified root name using the given <see cref="T:System.Reflection.Assembly" />.</summary>
      <param name="baseName">The root name of the resources. For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource". </param>
      <param name="assembly">The main <see cref="T:System.Reflection.Assembly" /> for the resources. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> or <paramref name="assembly" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class that looks up resources contained in files derived from the specified root name using the given <see cref="T:System.Reflection.Assembly" />.</summary>
      <param name="baseName">The root name of the resources. For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource". </param>
      <param name="assembly">The main <see cref="T:System.Reflection.Assembly" /> for the resources. </param>
      <param name="usingResourceSet">The <see cref="T:System.Type" /> of the custom <see cref="T:System.Resources.ResourceSet" /> to use. If null, the default runtime <see cref="T:System.Resources.ResourceSet" /> is used. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="usingResourceset" /> is not a derived class of <see cref="T:System.Resources.ResourceSet" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> or <paramref name="assembly" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.Type)">
      <summary>Creates a <see cref="T:System.Resources.ResourceManager" /> that looks up resources in satellite assemblies based on information from the specified <see cref="T:System.Type" />.</summary>
      <param name="resourceSource">A <see cref="T:System.Type" /> from which the <see cref="T:System.Resources.ResourceManager" /> derives all information for finding .resources files. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="resourceSource" /> parameter is null. </exception>
    </member>
    <member name="P:System.Resources.ResourceManager.BaseName">
      <summary>Gets the root name of the resource files that the <see cref="T:System.Resources.ResourceManager" /> searches for resources.</summary>
      <returns>The root name of the resource files that the <see cref="T:System.Resources.ResourceManager" /> searches for resources.</returns>
    </member>
    <member name="F:System.Resources.ResourceManager.BaseNameField">
      <summary>Indicates the root name of the resource files that the <see cref="T:System.Resources.ResourceManager" /> searches for resources.</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
      <summary>Returns the <see cref="T:System.Globalization.CultureInfo" /> for the main assembly's neutral resources by reading the value of the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> on a specified <see cref="T:System.Reflection.Assembly" />.</summary>
      <returns>The culture from the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" />, if found; otherwise, <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</returns>
      <param name="a">The assembly for which to return a <see cref="T:System.Globalization.CultureInfo" />. </param>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String)">
      <summary>Returns the value of the specified <see cref="T:System.Object" /> resource.</summary>
      <returns>The value of the resource localized for the caller's current culture settings. If a match is not possible, null is returned. The resource value can be null.</returns>
      <param name="name">The name of the resource to get. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources has been found, and there are no neutral culture resources. </exception>
      <exception cref="T:System.NotSupportedException">The resource depends on serialization.</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
      <summary>Gets the value of the <see cref="T:System.Object" /> resource localized for the specified culture.</summary>
      <returns>The value of the resource, localized for the specified culture. If a "best match" is not possible, null is returned.</returns>
      <param name="name">The name of the resource to get. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is localized. Note that if the resource is not localized for this culture, the lookup will fall back using the culture's <see cref="P:System.Globalization.CultureInfo.Parent" /> property, stopping after checking in the neutral culture.If this value is null, the <see cref="T:System.Globalization.CultureInfo" /> is obtained using the culture's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources have been found, and there are no neutral culture resources. </exception>
      <exception cref="T:System.NotSupportedException">The resource depends on serialization.</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
      <summary>Generates the name for the resource file for the given <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>The name that can be used for a resource file for the given <see cref="T:System.Globalization.CultureInfo" />.</returns>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> for which a resource file name is constructed. </param>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>Gets the <see cref="T:System.Resources.ResourceSet" /> for a particular culture.</summary>
      <returns>The specified <see cref="T:System.Resources.ResourceSet" />.</returns>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to look for. </param>
      <param name="createIfNotExists">If true and if the <see cref="T:System.Resources.ResourceSet" /> has not been loaded yet, load it. </param>
      <param name="tryParents">If the <see cref="T:System.Resources.ResourceSet" /> cannot be loaded, try parent <see cref="T:System.Globalization.CultureInfo" /> objects to see if they exist. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="culture" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
      <summary>Returns the <see cref="T:System.Version" /> specified by the <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> in the given assembly.</summary>
      <returns>The satellite contract <see cref="T:System.Version" /> of the given assembly, or null if no version was found.</returns>
      <param name="a">The <see cref="T:System.Reflection.Assembly" /> for which to look up the <see cref="T:System.Resources.SatelliteContractVersionAttribute" />. </param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Version" /> found in the assembly <paramref name="a" /> is invalid. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="a" /> is null.</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetStream(System.String)">
      <summary>Returns an <see cref="T:System.IO.UnmanagedMemoryStream" /> object from the specified resource.</summary>
      <returns>An <see cref="T:System.IO.UnmanagedMemoryStream" /> object.</returns>
      <param name="name">The name of a resource.</param>
      <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a <see cref="T:System.IO.MemoryStream" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources is found, and there are no neutral resources.</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
      <summary>Returns an <see cref="T:System.IO.UnmanagedMemoryStream" /> object from the specified resource, using the specified culture.</summary>
      <returns>An <see cref="T:System.IO.UnmanagedMemoryStream" /> object.</returns>
      <param name="name">The name of a resource.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that specifies the culture to use for the resource lookup. If <paramref name="culture" /> is null, the culture for the current thread is used.</param>
      <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a <see cref="T:System.IO.MemoryStream" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources is found, and there are no neutral resources.</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String)">
      <summary>Returns the value of the specified <see cref="T:System.String" /> resource.</summary>
      <returns>The value of the resource localized for the caller's current culture settings. If a match is not possible, null is returned.</returns>
      <param name="name">The name of the resource to get. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a string. </exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources has been found, and there are no neutral culture resources. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
      <summary>Gets the value of the <see cref="T:System.String" /> resource localized for the specified culture.</summary>
      <returns>The value of the resource localized for the specified culture. If a best match is not possible, null is returned.</returns>
      <param name="name">The name of the resource to get. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is localized. Note that if the resource is not localized for this culture, the lookup will fall back using the culture's <see cref="P:System.Globalization.CultureInfo.Parent" /> property, stopping after looking in the neutral culture.If this value is null, the <see cref="T:System.Globalization.CultureInfo" /> is obtained using the culture's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a <see cref="T:System.String" />. </exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources has been found, and there are no neutral culture resources. </exception>
    </member>
    <member name="F:System.Resources.ResourceManager.HeaderVersionNumber">
      <summary>A constant readonly value indicating the version of resource file headers that the current implementation of <see cref="T:System.Resources.ResourceManager" /> can interpret and produce.</summary>
    </member>
    <member name="P:System.Resources.ResourceManager.IgnoreCase">
      <summary>Gets or sets a Boolean value indicating whether the current instance of ResourceManager allows case-insensitive resource lookups in the <see cref="M:System.Resources.ResourceManager.GetString(System.String)" /> and <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> methods.</summary>
      <returns>A Boolean value indicating whether the case of the resource names should be ignored.</returns>
    </member>
    <member name="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>Provides the implementation for finding a <see cref="T:System.Resources.ResourceSet" />.</summary>
      <returns>The specified <see cref="T:System.Resources.ResourceSet" />.</returns>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to look for. </param>
      <param name="createIfNotExists">If true and if the <see cref="T:System.Resources.ResourceSet" /> has not been loaded yet, load it. </param>
      <param name="tryParents">If the <see cref="T:System.Resources.ResourceSet" /> cannot be loaded, try parent <see cref="T:System.Globalization.CultureInfo" /> objects to see if they exist. </param>
      <exception cref="T:System.Resources.MissingManifestResourceException">The main assembly does not contain a .resources file and it is required to look up a resource. </exception>
      <exception cref="T:System.ExecutionEngineException">There was an internal error in the runtime.</exception>
    </member>
    <member name="F:System.Resources.ResourceManager.MagicNumber">
      <summary>Holds the number used to identify resource files.</summary>
    </member>
    <member name="F:System.Resources.ResourceManager.MainAssembly">
      <summary>Indicates the main <see cref="T:System.Reflection.Assembly" /> that contains the resources.</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.ReleaseAllResources">
      <summary>Tells the <see cref="T:System.Resources.ResourceManager" /> to call <see cref="M:System.Resources.ResourceSet.Close" /> on all <see cref="T:System.Resources.ResourceSet" /> objects and release all resources.</summary>
    </member>
    <member name="P:System.Resources.ResourceManager.ResourceSetType">
      <summary>Gets the <see cref="T:System.Type" /> of the <see cref="T:System.Resources.ResourceSet" /> the <see cref="T:System.Resources.ResourceManager" /> uses to construct a <see cref="T:System.Resources.ResourceSet" /> object.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:System.Resources.ResourceSet" /> the <see cref="T:System.Resources.ResourceManager" /> uses to construct a <see cref="T:System.Resources.ResourceSet" /> object.</returns>
    </member>
    <member name="T:System.Resources.ResourceSet">
      <summary>Stores all the resources localized for one particular culture, ignoring all other cultures, including any fallback rules.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceSet" /> class with default properties.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
      <summary>[SECURITY CRITICAL] Creates a new instance of a <see cref="T:System.Resources.ResourceSet" /> class that reads resources from the given stream.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> of resources to be read. The stream should refer to an existing resources file. </param>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
      <summary>Creates a new instance of the <see cref="T:System.Resources.ResourceSet" /> class using the specified resource reader.</summary>
      <param name="reader">The reader that will be used. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="reader" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.String)">
      <summary>[SECURITY CRITICAL] Creates a new instance of the <see cref="T:System.Resources.ResourceSet" /> class that opens and reads resources from the given file.</summary>
      <param name="fileName">Resource file to read. </param>
    </member>
    <member name="M:System.Resources.ResourceSet.Close">
      <summary>Closes and releases any resources used by this <see cref="T:System.Resources.ResourceSet" />.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose">
      <summary>Disposes of the resources (other than memory) used by the current instance of <see cref="T:System.Resources.ResourceSet" />.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
      <summary>Releases resources (other than memory) associated with the current instance, closing internal managed objects if requested.</summary>
      <param name="disposing">Indicates whether the objects contained in the current instance should be explicitly closed. </param>
    </member>
    <member name="M:System.Resources.ResourceSet.GetDefaultReader">
      <summary>Returns the preferred resource reader class for this kind of <see cref="T:System.Resources.ResourceSet" />.</summary>
      <returns>Returns the <see cref="T:System.Type" /> for the preferred resource reader for this kind of <see cref="T:System.Resources.ResourceSet" />.</returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that can iterate through the <see cref="T:System.Resources.ResourceSet" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for this <see cref="T:System.Resources.ResourceSet" />.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Resources.ResourceSet" /> has been closed. </exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String)">
      <summary>Searches for a resource object with the specified name.</summary>
      <returns>The requested resource.</returns>
      <param name="name">Case-sensitive name of the resource to search for. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Resources.ResourceSet" /> has been closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
      <summary>Searches for a resource object with the specified name in a case-insensitive manner, if requested.</summary>
      <returns>The requested resource.</returns>
      <param name="name">Name of the resource to search for. </param>
      <param name="ignoreCase">Indicates whether the case of the specified name should be ignored. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Resources.ResourceSet" /> has been closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String)">
      <summary>Searches for a <see cref="T:System.String" /> resource with the specified name.</summary>
      <returns>The value of a resource, if the value is a <see cref="T:System.String" />.</returns>
      <param name="name">Name of the resource to search for. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">The resource with the specified name is not a <see cref="T:System.String" /> or the current <see cref="T:System.Resources.ResourceSet" /> has been closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
      <summary>Searches for a <see cref="T:System.String" /> resource with the specified name in a case-insensitive manner, if requested.</summary>
      <returns>The value of a resource, if the value is a <see cref="T:System.String" />.</returns>
      <param name="name">Name of the resource to search for. </param>
      <param name="ignoreCase">Indicates whether the case of the case of the specified name should be ignored. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">The resource with the specified name is not a <see cref="T:System.String" /> or the current <see cref="T:System.Resources.ResourceSet" /> has been closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
    </member>
    <member name="F:System.Resources.ResourceSet.Reader">
      <summary>Indicates the <see cref="T:System.Resources.IResourceReader" /> used to read the resources.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.ReadResources">
      <summary>Reads all the resources.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> in order to avoid a race condition with Dispose. This member is not intended to be used directly from your code.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for this <see cref="T:System.Resources.ResourceSet" />.</returns>
    </member>
    <member name="T:System.Resources.SatelliteContractVersionAttribute">
      <summary>Instructs the <see cref="T:System.Resources.ResourceManager" /> to ask for a particular version of a satellite assembly to simplify updates of the main assembly of an application.</summary>
    </member>
    <member name="M:System.Resources.SatelliteContractVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> class.</summary>
      <param name="version">A <see cref="T:System.String" /> with the version of the satellite assemblies to load. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="version" /> parameter is null. </exception>
    </member>
    <member name="P:System.Resources.SatelliteContractVersionAttribute.Version">
      <summary>Gets the version of the satellite assemblies with the required resources.</summary>
      <returns>A <see cref="T:System.String" /> containing the version of the satellite assemblies with the required resources.</returns>
    </member>
    <member name="T:System.Resources.UltimateResourceFallbackLocation">
      <summary>Specifies the assembly that the <see cref="T:System.Resources.ResourceManager" /> class will use when it retrieves neutral resources by using the fallback process. </summary>
    </member>
    <member name="F:System.Resources.UltimateResourceFallbackLocation.MainAssembly">
      <summary>Fallback resources are located in the main assembly.</summary>
    </member>
    <member name="F:System.Resources.UltimateResourceFallbackLocation.Satellite">
      <summary>Fallback resources are located in a satellite assembly in the location specified by the <see cref="P:System.Resources.NeutralResourcesLanguageAttribute.Location" /> property.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>Specifies the name of the property that accesses the attributed field.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the AccessedThroughPropertyAttribute class with the name of the property used to access the attributed field.</summary>
      <param name="propertyName">The name of the property used to access the attributed field. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>Gets the name of the property used to access the attributed field.</summary>
      <returns>The name of the property used to access the attributed field.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxations">
      <summary>Specifies parameters that control the strictness of the code generated by the common language runtime's just-in-time (JIT) compiler.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning">
      <summary>Marks an assembly as not requiring string-literal interning.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>Controls the strictness of the code generated by the common language runtime's just-in-time (JIT) compiler.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> class with the specified compilation relaxations.</summary>
      <param name="relaxations">The compilation relaxations. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Runtime.CompilerServices.CompilationRelaxations)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> value. </summary>
      <param name="relaxations">One of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> values.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>Gets the compilation relaxations specified when the current object was constructed.</summary>
      <returns>The compilation relaxations specified when the current object was constructed.Use the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> enumeration with the <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> property.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>Distinguishes a compiler-generated element from a user-generated element. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>Enables compilers to dynamically attach object fields to managed objects.</summary>
      <typeparam name="TKey">The reference type to which the field is attached. </typeparam>
      <typeparam name="TValue">The field's type. This must be a reference type.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>Adds a key to the table.</summary>
      <param name="key">The key to add. <paramref name="key" /> represents the object to which the property is attached.</param>
      <param name="value">The key's property value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> already exists.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key. </summary>
      <returns>The value that corresponds to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <paramref name="TValue" /> generic type parameter.</returns>
      <param name="key">The key to search for. <paramref name="key" /> represents the object to which the property is attached.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.MissingMethodException">The class that represents the table's value does not define a default constructor.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</summary>
      <returns>The value attached to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, the new value returned by the <paramref name="createValueCallback" /> delegate.</returns>
      <param name="key">The key to search for. <paramref name="key" /> represents the object to which the property is attached.</param>
      <param name="createValueCallback">A delegate to a method that can create a value for the given <paramref name="key" />. It has a single parameter of type <paramref name="TKey" />, and returns a value of type <paramref name="TValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="createValueCallback" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>Removes a key and its value from the table.</summary>
      <returns>true if the key is found and removed; otherwise, false.</returns>
      <param name="key">The key to remove. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>Gets the value of the specified key.</summary>
      <returns>true if <paramref name="key" /> is found; otherwise, false.</returns>
      <param name="key">The key that represents an object with an attached property.</param>
      <param name="value">When this method returns, contains the attached property value. If <paramref name="key" /> is not found, <paramref name="value" /> contains the default value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
      <summary>Represents a method that creates a non-default value to add as part of a key/value pair to a <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> object. </summary>
      <returns>An instance of a reference type that represents the value to attach to the specified key.</returns>
      <param name="key">The key that belongs to the value to create.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>Defines a constant value that a compiler can persist for a field or method parameter.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>Gets the constant value stored by this attribute.</summary>
      <returns>The constant value stored by this attribute.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>Persists an 8-byte <see cref="T:System.DateTime" /> constant for a field or parameter.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>Initializes a new instance of the DateTimeConstantAttribute class with the number of 100-nanosecond ticks that represent the date and time of this instance.</summary>
      <param name="ticks">The number of 100-nanosecond ticks that represent the date and time of this instance. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>Gets the number of 100-nanosecond ticks that represent the date and time of this instance.</summary>
      <returns>The number of 100-nanosecond ticks that represent the date and time of this instance.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>Stores the value of a <see cref="T:System.Decimal" /> constant in metadata. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> class with the specified unsigned integer values.</summary>
      <param name="scale">The power of 10 scaling factor that indicates the number of digits to the right of the decimal point. Valid values are 0 through 28 inclusive. </param>
      <param name="sign">A value of 0 indicates a positive value, and a value of 1 indicates a negative value. </param>
      <param name="hi">The high 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />. </param>
      <param name="mid">The middle 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />. </param>
      <param name="low">The low 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>Gets the decimal constant stored in this attribute.</summary>
      <returns>The decimal constant stored in this attribute.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute">
      <summary>Fixes the address of a static value type field throughout its lifetime. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>Indicates that a field should be treated as containing a fixed number of elements of the specified primitive type. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> class. </summary>
      <param name="elementType">The type of the elements contained in the buffer.</param>
      <param name="length">The number of elements in the buffer.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>Gets the type of the elements contained in the fixed buffer. </summary>
      <returns>The type of the elements.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>Gets the number of elements in the fixed buffer. </summary>
      <returns>The number of elements in the fixed buffer.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>Indicates the name by which an indexer is known in programming languages that do not support indexers directly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> class.</summary>
      <param name="indexerName">The name of the indexer, as shown to other languages. </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>Specifies that types that are ordinarily visible only within the current assembly are visible to another assembly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> class with the name of the specified friend assembly. </summary>
      <param name="assemblyName">The name of a friend assembly.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
      <summary>Specifies that all types within the current assembly are visible to other assemblies.</summary>
      <returns>This method does not return a value.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>Gets the name of the friend assembly to which all types and type members that are marked with the internal keyword are to be made visible. </summary>
      <returns>The name of the friend assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsBoxed">
      <summary>Indicates that the modified reference type is a boxed value type. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsByValue">
      <summary>Indicates that a modified method argument should be interpreted as having object passed-by-value semantics. This modifier is applied to reference types.  This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
      <summary>Indicates that the modified type has a const modifier. This class cannot be inherited. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsExplicitlyDereferenced">
      <summary>Indicates that a managed pointer represents a pointer parameter within a method signature. This class cannot be inherited. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced">
      <summary>Indicates that the modified garbage collection reference represents a reference parameter within a method signature. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsLong">
      <summary>Indicates that a modified integer is a standard C++ long value. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte">
      <summary>Indicates that a modifier is neither signed nor unsigned. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsUdtReturn">
      <summary>Indicates that a return type is a user-defined type. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>Marks a field as volatile. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodCodeType">
      <summary>Defines how a method is implemented.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.IL">
      <summary>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Native">
      <summary>Specifies that the method is implemented in native code.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
      <summary>Specifies that the method implementation is in optimized intermediate language (OPTIL).</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Runtime">
      <summary>Specifies that the method implementation is provided by the runtime.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>Specifies the details of how a method is implemented. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
      <summary>Initializes a new instance of the MethodImplAttribute class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the MethodImplAttribute class with the specified <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value.</summary>
      <param name="value">A bitmask representing the desired <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value which specifies properties of the attributed method. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>Initializes a new instance of the MethodImplAttribute class with the specified <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value.</summary>
      <param name="methodImplOptions">A <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value specifying properties of the attributed method. </param>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
      <summary>A <see cref="T:System.Runtime.CompilerServices.MethodCodeType" /> value indicating what kind of implementation is provided for this method.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value describing the attributed method. </summary>
      <returns>The value that describes the attributed method.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>Defines the details of how a method is implemented.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
      <summary>Specifies that the method is implemented in unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
      <summary>Specifies that the method is declared, but its implementation is provided elsewhere.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>Specifies that the method signature is exported exactly as declared.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
      <summary>Specifies an internal call. An internal call is a call to a method implemented within the common language runtime itself.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
      <summary>Specifies that the method can be executed by only one thread at a time.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>Specifies that the method can not be inlined.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>Specifies that the method is not optimized by the just-in-time (JIT) compiler.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.NativeCppClassAttribute">
      <summary>Applies metadata to an assembly that indicates that a type is an unmanaged type.  This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.NativeCppClassAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.NativeCppClassAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>Identifies an assembly as containing metadata and not executable code.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> class. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> class by using the specified description. </summary>
      <param name="description">The description of the reference assembly. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>Gets the description of the reference assembly.</summary>
      <returns>The description of the reference assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>Specifies whether to wrap exceptions that do not derive from the <see cref="T:System.Exception" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>Gets or sets a value that indicates whether to wrap exceptions that do not derive from the <see cref="T:System.Exception" /> class.</summary>
      <returns>true if exceptions that do not derive from the <see cref="T:System.Exception" /> class should be wrapped; otherwise, false.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>Provides a set of static methods and properties that provide support for compilers. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the <see cref="T:System.Object" /> identified by the <paramref name="o" /> parameter.</returns>
      <param name="o">An <see cref="T:System.Object" /> to retrieve the hash code for. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>Boxes a value type.</summary>
      <returns>Returns a boxed copy of <paramref name="obj" /> if it is a value class; otherwise <paramref name="obj" /> itself is returned.</returns>
      <param name="obj">The value type to be boxed. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>Provides a fast way to initialize an array from data stored in a module.</summary>
      <param name="array">The array to be initialized. </param>
      <param name="fldHandle">A <see cref="T:System.RuntimeFieldHandle" /> specifying the location of the data used to initialize the array. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>Gets the offset in bytes to the data in the given string.</summary>
      <returns>The byte offset, from the start of the <see cref="T:System.String" /> object to the first character in the string.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>Runs a specified class constructor method.</summary>
      <param name="type">A <see cref="T:System.RuntimeTypeHandle" /> specifying the class constructor method to run. </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.SpecialNameAttribute">
      <summary>Indicates that a type or member is treated in a special way by the runtime or tools.  This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SpecialNameAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.SpecialNameAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>Specifies a source <see cref="T:System.Type" /> in another assembly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> class. </summary>
      <param name="assemblyFullName">The source <see cref="T:System.Type" /> in another assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> is null or empty.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>Gets the assembly-qualified name of the source type.</summary>
      <returns>The assembly-qualified name of the source type.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>Specifies a destination <see cref="T:System.Type" /> in another assembly. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> class specifying a destination <see cref="T:System.Type" />. </summary>
      <param name="destination">The destination <see cref="T:System.Type" /> in another assembly.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>Gets the destination <see cref="T:System.Type" /> in another assembly.</summary>
      <returns>The destination <see cref="T:System.Type" /> in another assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>Specifies that a type contains an unmanaged array that might potentially overflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
      <summary>Ensures that all finalization code in derived classes is marked as critical.</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> class.</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize">
      <summary>Releases all the resources used by the <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> class.</summary>
    </member>
    <member name="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute">
      <summary>Enables managed code to handle exceptions that indicate a corrupted process state.</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>Allows an unmanaged method to call a managed method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>Specifies the calling convention required to call methods implemented in unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>This member is not actually a calling convention, but instead uses the default platform calling convention. For example, on Windows the default is <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" /> and on Windows CE.NET it is <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>The caller cleans the stack. This enables calling functions with varargs, which makes it appropriate to use for methods that accept a variable number of parameters, such as Printf.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>The callee cleans the stack. This is the default convention for calling unmanaged functions with platform invoke.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>The first parameter is the this pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>This calling convention is not supported.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>Dictates which character set marshaled strings should use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.None">
      <summary>This value is obsolete and has the same behavior as <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>Marshal strings as multiple-byte character strings.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>Marshal strings as Unicode 2-byte characters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Auto">
      <summary>Automatically marshal strings appropriately for the target operating system. The default is <see cref="F:System.Runtime.InteropServices.CharSet.Unicode" /> on Windows NT, Windows 2000, Windows XP, and the Windows Server 2003 family; the default is <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" /> on Windows 98 and Windows Me. Although the common language runtime default is <see cref="F:System.Runtime.InteropServices.CharSet.Auto" />, languages may override this default. For example, by default C# marks all methods and types as <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> enumeration value.</summary>
      <param name="classInterfaceType">Describes the type of interface that is generated for a class. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> enumeration member.</summary>
      <param name="classInterfaceType">One of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> values that describes the type of interface that is generated for a class. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> value that describes which type of interface should be generated for the class.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> value that describes which type of interface should be generated for the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>Identifies the type of class interface that is generated for a class.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>No class interface is generated for the class.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>The class supports only late binding for COM clients. </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>A dual class interface is automatically generated for the class and exposed to COM. </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>Specifies the class identifier of a coclass imported from a type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>Initializes new instance of the <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> with the class identifier of the original coclass.</summary>
      <param name="coClass">A <see cref="T:System.Type" /> that contains the class identifier of the original coclass. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>Gets the class identifier of the original coclass.</summary>
      <returns>A <see cref="T:System.Type" /> containing the class identifier of the original coclass.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>Specifies a default interface to expose to COM. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> class with the specified <see cref="T:System.Type" /> object as the default interface exposed to COM.</summary>
      <param name="defaultInterface">A <see cref="T:System.Type" /> value indicating the default interface to expose to COM. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>Gets the <see cref="T:System.Type" /> object that specifies the default interface to expose to COM.</summary>
      <returns>The <see cref="T:System.Type" /> object that specifies the default interface to expose to COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>Converts the contents of the exception to a string.</summary>
      <returns>A string containing the <see cref="P:System.Exception.HResult" />, <see cref="P:System.Exception.Message" />, <see cref="P:System.Exception.InnerException" />, and <see cref="P:System.Exception.StackTrace" /> properties of the exception. </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>Indicates that the attributed type was previously defined in COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>Identifies how to expose an interface to COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>Indicates the interface is exposed to COM as a dual interface, which enables both early and late binding. <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> is the default value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>Indicates an interface is exposed to COM as an IUnknown-derived interface, which enables only early binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>Indicates an interface is exposed to COM as a dispinterface, which enables late binding only.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the ComVisibleAttribute class.</summary>
      <param name="visibility">true to indicate that the type is visible to COM; otherwise, false. The default is true. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>Gets a value that indicates whether the COM type is visible.</summary>
      <returns>true if the type is visible; otherwise, false. The default value is true.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>[SECURITY CRITICAL] Represents a wrapper class for handle resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> class with the specified invalid handle value.</summary>
      <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Close">
      <summary>[SECURITY CRITICAL] Marks the handle for releasing and freeing resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>[SECURITY CRITICAL] Releases all resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle" />. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>[SECURITY CRITICAL] Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> class specifying whether to perform a normal dispose operation. </summary>
      <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
      <summary>[SECURITY CRITICAL] Frees all resources associated with the handle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>[SECURITY CRITICAL] Specifies the handle to be wrapped.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>[SECURITY CRITICAL] Gets a value that indicates whether the handle is closed.</summary>
      <returns>true if the handle is closed; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>[SECURITY CRITICAL] When overridden in a derived class, gets a value that indicates whether the handle value is invalid.</summary>
      <returns>true if the handle is valid; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>[SECURITY CRITICAL] When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Sets the handle to the specified pre-existing handle.</summary>
      <param name="handle">The pre-existing handle to use.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>[SECURITY CRITICAL] Marks a handle as invalid.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>Specifies the value of the <see cref="T:System.Runtime.InteropServices.CharSet" /> enumeration. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.CharSet" /> value.</summary>
      <param name="charSet">One of the <see cref="T:System.Runtime.InteropServices.CharSet" /> values.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>Gets the default value of <see cref="T:System.Runtime.InteropServices.CharSet" /> for any call to <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</summary>
      <returns>The default value of <see cref="T:System.Runtime.InteropServices.CharSet" /> for any call to <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>Specifies the COM dispatch identifier (DISPID) of a method, field, or property.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the DispIdAttribute class with the specified DISPID.</summary>
      <param name="dispId">The DISPID for the member. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>Gets the DISPID for the member.</summary>
      <returns>The DISPID for the member.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</summary>
      <param name="dllName">The name of the DLL that contains the unmanaged method. This can include an assembly display name, if the DLL is included in an assembly.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>Indicates the calling convention of an entry point.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>Indicates how to marshal string parameters to the method and controls name mangling.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>Indicates the name or ordinal of the DLL entry point to be called.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>Indicates whether unmanaged methods that have HRESULT or retval return values are directly translated or whether HRESULT or retval return values are automatically converted to exceptions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>Indicates whether the callee calls the SetLastError Win32 API function before returning from the attributed method.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>Gets the name of the DLL file that contains the entry point.</summary>
      <returns>The name of the DLL file that contains the entry point.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ExternalException">
      <summary>The base exception type for all COM interop exceptions and structured exception handling (SEH) exceptions.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor">
      <summary>Initializes a new instance of the ExternalException class with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String)">
      <summary>Initializes a new instance of the ExternalException class with a specified error message.</summary>
      <param name="message">The error message that specifies the reason for the exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ExternalException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ExternalException.ErrorCode">
      <summary>Gets the HRESULT of the error.</summary>
      <returns>The HRESULT of the error.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>Indicates the physical position of fields within the managed and unmanaged representation of a class or structure.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> class with the offset in the structure to the beginning of the field.</summary>
      <param name="offset">The offset in bytes from the beginning of the structure to the beginning of the field. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>Gets the offset from the beginning of the structure to the beginning of the field.</summary>
      <returns>The offset from the beginning of the structure to the beginning of the field.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>Provides a means for accessing a managed object from unmanaged memory.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>[SECURITY CRITICAL] Retrieves the address of an object in a <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> handle.</summary>
      <returns>The address of the of the Pinned object as an <see cref="T:System.IntPtr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>[SECURITY CRITICAL] Allocates a <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /> handle for the specified object.</summary>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle" /> that protects the object from garbage collection. This <see cref="T:System.Runtime.InteropServices.GCHandle" /> must be released with <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> when it is no longer needed.</returns>
      <param name="value">The object that uses the <see cref="T:System.Runtime.InteropServices.GCHandle" />. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>[SECURITY CRITICAL] Allocates a handle of the specified type for the specified object.</summary>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle" /> of the specified type. This <see cref="T:System.Runtime.InteropServices.GCHandle" /> must be released with <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> when it is no longer needed.</returns>
      <param name="value">The object that uses the <see cref="T:System.Runtime.InteropServices.GCHandle" />. </param>
      <param name="type">One of the <see cref="T:System.Runtime.InteropServices.GCHandleType" /> values, indicating the type of <see cref="T:System.Runtime.InteropServices.GCHandle" /> to create. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Runtime.InteropServices.GCHandle" /> object is equal to the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</summary>
      <returns>true if the specified <see cref="T:System.Runtime.InteropServices.GCHandle" /> object is equal to the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>[SECURITY CRITICAL] Releases a <see cref="T:System.Runtime.InteropServices.GCHandle" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
      <summary>Returns an identifier for the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</summary>
      <returns>An identifier for the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>Gets a value indicating whether the handle is allocated.</summary>
      <returns>true if the handle is allocated; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
      <summary>[SECURITY CRITICAL] A <see cref="T:System.Runtime.InteropServices.GCHandle" /> is stored using an internal integer representation.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.GCHandle" />.</returns>
      <param name="value">An <see cref="T:System.IntPtr" /> that indicates the handle for which the conversion is required. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
      <summary>A <see cref="T:System.Runtime.InteropServices.GCHandle" /> is stored using an internal integer representation.</summary>
      <returns>The integer value.</returns>
      <param name="value">The <see cref="T:System.Runtime.InteropServices.GCHandle" /> for which the integer is required. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>[SECURITY CRITICAL] Gets or sets the object this handle represents.</summary>
      <returns>The object this handle represents.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>Represents the types of handles the <see cref="T:System.Runtime.InteropServices.GCHandle" /> class can allocate.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>This handle type is used to track an object, but allow it to be collected. When an object is collected, the contents of the <see cref="T:System.Runtime.InteropServices.GCHandle" /> are zeroed. Weak references are zeroed before the finalizer runs, so even if the finalizer resurrects the object, the Weak reference is still zeroed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>This handle type is similar to <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak" />, but the handle is not zeroed if the object is resurrected during finalization.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>This handle type represents an opaque handle, meaning you cannot resolve the address of the pinned object through the handle. You can use this type to track an object and prevent its collection by the garbage collector. This enumeration member is useful when an unmanaged client holds the only reference, which is undetectable from the garbage collector, to a managed object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>This handle type is similar to <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />, but allows the address of the pinned object to be taken. This prevents the garbage collector from moving the object and hence undermines the efficiency of the garbage collector. Use the <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> method to free the allocated handle as soon as possible.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>Supplies an explicit <see cref="T:System.Guid" /> when an automatic GUID is undesirable.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> class with the specified GUID.</summary>
      <param name="guid">The <see cref="T:System.Guid" /> to be assigned. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>Gets the <see cref="T:System.Guid" /> of the class.</summary>
      <returns>The <see cref="T:System.Guid" /> of the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>Indicates that data should be marshaled from the caller to the callee, but not back to the caller.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>Indicates whether a managed interface is dual, dispatch-only, or IUnknown -only when exposed to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> enumeration member.</summary>
      <param name="interfaceType">Describes how the interface should be exposed to COM clients. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> enumeration member.</summary>
      <param name="interfaceType">One of the <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> values that describes how the interface should be exposed to COM clients. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> value that describes how the interface should be exposed to COM.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> value that describes how the interface should be exposed to COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>Controls the layout of an object when exported to unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>The members of the object are laid out sequentially, in the order in which they appear when exported to unmanaged memory. The members are laid out according to the packing specified in <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />, and can be noncontiguous.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>The precise position of each member of an object in unmanaged memory is explicitly controlled. Each member must use the <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> to indicate the position of that field within the type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>The runtime automatically chooses an appropriate layout for the members of an object in unmanaged memory. Objects defined with this enumeration member cannot be exposed outside of managed code. Attempting to do so generates an exception.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>[SECURITY CRITICAL] Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="destination">The memory pointer to copy to. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="destination">The memory pointer to copy to. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="destination">The memory pointer to copy to. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="destination">The memory pointer to copy to. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="destination">The memory pointer to copy to. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="destination">The memory pointer to copy to. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</summary>
      <param name="source">The memory pointer to copy from. </param>
      <param name="destination">The array to copy to. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from an unmanaged memory pointer to a managed character array.</summary>
      <param name="source">The memory pointer to copy from. </param>
      <param name="destination">The array to copy to. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.</summary>
      <param name="source">The memory pointer to copy from. </param>
      <param name="destination">The array to copy to. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from. </param>
      <param name="destination">The array to copy to. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from. </param>
      <param name="destination">The array to copy to. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from. </param>
      <param name="destination">The array to copy to. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.</summary>
      <param name="source">The memory pointer to copy from. </param>
      <param name="destination">The array to copy to. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from. </param>
      <param name="startIndex">The zero-based index into the array where Copy should start. </param>
      <param name="destination">The memory pointer to copy to. </param>
      <param name="length">The number of array elements to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>[SECURITY CRITICAL] Converts an unmanaged function pointer to a delegate.</summary>
      <returns>A delegate instance that can be cast to the appropriate delegate type.</returns>
      <param name="ptr">An <see cref="T:System.IntPtr" /> type that is the unmanaged function pointer to be converted. </param>
      <param name="t">The type of the delegate to be returned. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>[SECURITY CRITICAL] Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception" /> object.</summary>
      <returns>An <see cref="T:System.Exception" /> object representing the converted HRESULT.</returns>
      <param name="errorCode">The HRESULT to be converted.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>[SECURITY CRITICAL] Converts a delegate into a function pointer callable from unmanaged code.</summary>
      <returns>An <see cref="T:System.IntPtr" /> value that can be passed to unmanaged code, which in turn can use it to call the underlying managed delegate.</returns>
      <param name="d">The delegate to be passed to unmanaged code. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>[SECURITY CRITICAL] Converts the specified exception to an HRESULT.</summary>
      <returns>The HRESULT mapped to the supplied exception.</returns>
      <param name="e">The <see cref="T:System.Exception" /> to convert to an HRESULT. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>[SECURITY CRITICAL] Returns the error code returned by the last unmanaged function called using platform invoke that has the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> flag set.</summary>
      <returns>The last error code set by a call to the Win32 SetLastError API method.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>[SECURITY CRITICAL] Executes one-time method setup tasks without calling the method.</summary>
      <param name="m">A <see cref="T:System.Reflection.MethodInfo" /> that identifies the method to be checked. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>[SECURITY CRITICAL] Performs a pre-link check for all methods on a class.</summary>
      <param name="c">A <see cref="T:System.Type" /> that identifies the class whose methods are to be checked. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Copies all characters up to the first null from an unmanaged ANSI string to a managed <see cref="T:System.String" />. Widens each ANSI character to Unicode.</summary>
      <returns>A managed <see cref="T:System.String" /> object that holds a copy of the unmanaged ANSI string. If <paramref name="ptr" /> is null, the method returns a null string.</returns>
      <param name="ptr">The address of the first character of the unmanaged string. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Allocates a managed <see cref="T:System.String" />, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.</summary>
      <returns>A managed <see cref="T:System.String" /> that holds a copy of the native ANSI string if the value of the <paramref name="ptr" /> parameter is not null; otherwise, this method returns null.</returns>
      <param name="ptr">The address of the first character of the unmanaged string. </param>
      <param name="len">The byte count of the input string to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from an unmanaged Unicode string into it.</summary>
      <returns>A managed string holding a copy of the native string if the value of the <paramref name="ptr" /> parameter is not null; otherwise, this method returns null.</returns>
      <param name="ptr">The address of the first character of the unmanaged string. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Copies a specified number of characters from a Unicode string stored in native heap to a managed <see cref="T:System.String" />.</summary>
      <returns>A managed string that holds a copy of the native string if the value of the <paramref name="ptr" /> parameter is not null; otherwise, this method returns null.</returns>
      <param name="ptr">The address of the first character of the unmanaged string. </param>
      <param name="len">The number of Unicode characters to copy. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>[SECURITY CRITICAL] Marshals data from an unmanaged block of memory to a managed object.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory. </param>
      <param name="structure">The object to which the data is to be copied. This must be an instance of a formatted class. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>[SECURITY CRITICAL] Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
      <returns>A managed object containing the data pointed to by the <paramref name="ptr" /> parameter.</returns>
      <param name="ptr">A pointer to an unmanaged block of memory. </param>
      <param name="structureType">The <see cref="T:System.Type" /> of object to be created. This type object must represent a formatted class or a structure. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Reads a single byte from an unmanaged pointer.</summary>
      <returns>The byte read from the <paramref name="ptr" /> parameter.</returns>
      <param name="ptr">The address in unmanaged memory from which to read. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Reads a single byte at a given offset (or index) from an unmanaged pointer.</summary>
      <returns>The byte read from the <paramref name="ptr" /> parameter.</returns>
      <param name="ptr">The base address in unmanaged memory from which to read. </param>
      <param name="ofs">An additional byte offset, added to the <paramref name="ptr" /> parameter before reading. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Reads a 16-bit signed integer from the unmanaged memory.</summary>
      <returns>The 16-bit signed integer read from the <paramref name="ptr" /> parameter.</returns>
      <param name="ptr">The address in unmanaged memory from which to read. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Reads a 16-bit signed integer from unmanaged memory.</summary>
      <returns>The 16-bit signed integer read from <paramref name="ptr" />.</returns>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, added to the <paramref name="ptr" /> parameter before reading.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Reads a 32-bit signed integer from unmanaged memory.</summary>
      <returns>The 32-bit signed integer read from the <paramref name="ptr" /> parameter.</returns>
      <param name="ptr">The address in unmanaged from which to read. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Reads a 32-bit signed integer from unmanaged memory.</summary>
      <returns>The 32-bit signed integer read from the <paramref name="ptr" /> parameter.</returns>
      <param name="ptr">The base address in unmanaged memory from which to read. </param>
      <param name="ofs">An additional byte offset, added to the <paramref name="ptr" /> parameter before reading. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Reads a 64-bit signed integer from unmanaged memory.</summary>
      <returns>The 64-bit signed integer read from the <paramref name="ptr" /> parameter.</returns>
      <param name="ptr">The address in unmanaged memory from which to read. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Reads a 64-bit signed integer from unmanaged memory.</summary>
      <returns>The 64-bit signed integer read from the <paramref name="ptr" /> parameter.</returns>
      <param name="ptr">The base address in unmanaged memory from which to read. </param>
      <param name="ofs">An additional byte offset, added to the <paramref name="ptr" /> parameter before reading. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Reads a processor native sized integer from unmanaged memory.</summary>
      <returns>The IntPtr read from the <paramref name="ptr" /> parameter.</returns>
      <param name="ptr">The address in unmanaged memory from which to read. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>[SECURITY CRITICAL] Returns the unmanaged size of an object in bytes.</summary>
      <returns>The size of the <paramref name="structure" /> parameter in unmanaged code.</returns>
      <param name="structure">The object whose size is to be returned. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>[SECURITY CRITICAL] Returns the size of an unmanaged type in bytes.</summary>
      <returns>The size of the <paramref name="structure" /> parameter in unmanaged code.</returns>
      <param name="t">The <see cref="T:System.Type" /> whose size is to be returned. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>[SECURITY CRITICAL] Marshals data from a managed object to an unmanaged block of memory.</summary>
      <param name="structure">A managed object holding the data to be marshaled. This object must be an instance of a formatted class. </param>
      <param name="ptr">A pointer to an unmanaged block of memory, which must be allocated before this method is called. </param>
      <param name="fDeleteOld">true to free the memory that the <paramref name="ptr" /> parameter points to, before this method executes. Note that passing false can lead to a memory leak. </param>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>[SECURITY CRITICAL] Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>[SECURITY CRITICAL] Throws an exception with a specific failure HRESULT value.</summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>[SECURITY CRITICAL] Throws an exception with a specific failure HRESULT.</summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception. </param>
      <param name="errorInfo">A pointer to the IErrorInfo interface provided by the COM object. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>[SECURITY CRITICAL] Writes a single byte value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged to write. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>[SECURITY CRITICAL] Writes a single byte value to unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory to write. </param>
      <param name="ofs">An additional byte offset, added to the <paramref name="ptr" /> parameter before writing. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>[SECURITY CRITICAL] Writes a 16-bit integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>[SECURITY CRITICAL] Writes a 16-bit signed integer value into unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory to write. </param>
      <param name="ofs">An additional byte offset, added to the <paramref name="ptr" /> parameter before writing. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>[SECURITY CRITICAL] Writes a 32-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Writes a 32-bit signed integer value into unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory to write. </param>
      <param name="ofs">An additional byte offset, added to the <paramref name="ptr" /> parameter before writing. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>[SECURITY CRITICAL] Writes a 64-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory to write. </param>
      <param name="ofs">An additional byte offset, added to the <paramref name="ptr" /> parameter before writing. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>[SECURITY CRITICAL] Writes a 64-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>[SECURITY CRITICAL] Writes a processor native sized integer value into unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>Indicates how to marshal the data between managed and unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value.</summary>
      <param name="unmanagedType">The <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> enumeration member.</summary>
      <param name="unmanagedType">The <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as. </param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>Specifies the element type of the unmanaged <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> or <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>Provides additional information to a custom marshaler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>Specifies the fully qualified name of a custom marshaler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>Implements <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> as a type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>Indicates which parameter contains the count of array elements, much like size_is in COM, and is zero-based.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as.</summary>
      <returns>The value the data is to be marshaled as. </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>The exception that is thrown by the marshaler when it encounters a <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> it does not support.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>Indicates that a parameter is optional.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>Initializes a new instance of the OptionalAttribute class with default values.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>Indicates that data should be marshaled from callee back to caller.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.OutAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>Indicates that the HRESULT or retval signature transformation that takes place during COM interop calls should be suppressed. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
      <summary>[SECURITY CRITICAL] Represents a wrapper class for operating system handles. This class must be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class using system defaults.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class with the specified invalid handle value.</summary>
      <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).  Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> should return true for this value.</param>
      <param name="ownsHandle">true to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle" /> release the handle during the finalization phase; otherwise, false (not recommended). </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Close">
      <summary>[SECURITY CRITICAL] Marks the handle for releasing and freeing resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
      <summary>[SECURITY CRITICAL] Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instances.</summary>
      <param name="success">true if the reference counter was successfully incremented; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
      <summary>[SECURITY CRITICAL] Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</summary>
      <returns>An IntPtr representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field. If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />, this method still returns the original handle value, which can be a stale value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
      <summary>[SECURITY CRITICAL] Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instance.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
      <summary>[SECURITY CRITICAL] Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
      <summary>[SECURITY CRITICAL] Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class specifying whether to perform a normal dispose operation. </summary>
      <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Finalize">
      <summary>[SECURITY CRITICAL] Frees all resources associated with the handle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
      <summary>[SECURITY CRITICAL] Specifies the handle to be wrapped.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
      <summary>[SECURITY CRITICAL] Gets a value indicating whether the handle is closed.</summary>
      <returns>true if the handle is closed; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
      <summary>[SECURITY CRITICAL] When overridden in a derived class, gets a value indicating whether the handle value is invalid.</summary>
      <returns>true if the handle value is invalid; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
      <summary>[SECURITY CRITICAL] When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Sets the handle to the specified pre-existing handle.</summary>
      <param name="handle">The pre-existing handle to use. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
      <summary>[SECURITY CRITICAL] Marks a handle as no longer used.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>Represents Structured Exception Handler (SEH) errors.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>The StructLayoutAttribute class allows the user to control the physical layout of the data fields of a class or structure.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>Initalizes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</summary>
      <param name="layoutKind">One of the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> values that specifes how the class or structure should be arranged. </param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>Indicates how string data fields within the class should be marshaled as LPWSTR or LPSTR by default.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>Controls the alignment of data fields of a class or structure in memory.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>Indicates the absolute size of the class or structure.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value that specifies how the class or structure is arranged.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value that specifies how the class or structure is arranged.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> class with the specified calling convention. </summary>
      <param name="callingConvention">The specified calling convention.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>Gets the value of the calling convention.</summary>
      <returns>The value of the calling convention specified by the <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> constructor.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>Identifies how to marshal parameters or fields to unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>A 4-byte Boolean value (true != 0, false = 0). This is the Win32 BOOL type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>A 1-byte signed integer. You can use this member to transform a Boolean value into a 1-byte, C-style bool (true = 1, false = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>A 1-byte unsigned integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>A 2-byte signed integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>A 2-byte unsigned integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>A 4-byte signed integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>A 4-byte unsigned integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>An 8-byte signed integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>An 8-byte unsigned integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>A 4-byte floating point number.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>An 8-byte floating point number.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>Used on a <see cref="T:System.Decimal" /> to marshal the decimal value as a COM currency type instead of as a Decimal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>A single byte, null-terminated ANSI character string. You can use this member on the <see cref="T:System.String" /> or <see cref="T:System.Text.StringBuilder" /> data types</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>A 2-byte, null-terminated Unicode character string.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>A platform-dependent character string: ANSI on Windows 98 and Unicode on Windows NT and Windows XP. This value is only supported for platform invoke, and not COM interop, because exporting a string of type LPTStr is not supported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>Used for in-line, fixed-length character arrays that appear within a structure. The character type used with <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr" /> is determined by the <see cref="T:System.Runtime.InteropServices.CharSet" /> argument of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> applied to the containing structure. Always use the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> field to indicate the size of the array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>A COM IUnknown pointer. You can use this member on the <see cref="T:System.Object" /> data type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>A VARIANT, which is used to marshal managed formatted classes and value types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>When <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> is set to ByValArray, the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> must be set to indicate the number of elements in the array. The <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> field can optionally contain the <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> of the array elements when it is necessary to differentiate among string types. You can only use this <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> on an array that appear as fields in a structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>A platform-dependent, signed integer. 4-bytes on 32 bit Windows, 8-bytes on 64 bit Windows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>A platform-dependent, unsigned integer. 4-bytes on 32 bit Windows, 8-bytes on 64 bit Windows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>An integer that can be used as a C-style function pointer. You can use this member on a <see cref="T:System.Delegate" /> data type or a type that inherits from a <see cref="T:System.Delegate" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>A dynamic type that determines the type of an object at run time and marshals the object as that type. Valid for platform invoke methods only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>A pointer to the first element of a C-style array. When marshaling from managed to unmanaged, the length of the array is determined by the length of the managed array. When marshaling from unmanaged to managed, the length of the array is determined from the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> and the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> fields, optionally followed by the unmanaged type of the elements within the array when it is necessary to differentiate among string types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>A pointer to a C-style structure that you use to marshal managed formatted classes. Valid for platform invoke methods only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>This native type associated with an <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> or a <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> causes the parameter to be exported as a HRESULT in the exported type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>A Unicode character string that is a length-prefixed double byte. You can use this member, which is the default string in COM, on the <see cref="T:System.String" /> data type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>A COM IDispatch pointer (Object in Microsoft Visual Basic 6.0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>A COM interface pointer. The <see cref="T:System.Guid" /> of the interface is obtained from the class metadata. Use this member to specify the exact interface type or the default interface type if you apply it to a class. This member produces <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> behavior when you apply it to the <see cref="T:System.Object" /> data type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>A SafeArray is a self-describing array that carries the type, rank, and bounds of the associated array data. </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>Allows Visual Basic 2005 to change a string in unmanaged code, and have the results reflected in managed code. This value is only supported for platform invoke.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>An ANSI character string that is a length prefixed, single byte. You can use this member on the <see cref="T:System.String" /> data type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>A length-prefixed, platform-dependent char string. ANSI on Windows 98, Unicode on Windows NT. You rarely use this BSTR-like member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>A 2-byte, OLE-defined VARIANT_BOOL type (true = -1, false = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>Specifies the custom marshaler class when used with <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> or <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" />. The <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> field can be used to pass additional information to the custom marshaler. You can use this member on any reference type.</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializedAttribute">
      <summary>When applied to a method, specifies that the method is called immediately after deserialization of the object.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.OnDeserializedAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializingAttribute">
      <summary>When applied to a method, specifies that the method is called during deserialization of an object.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.OnDeserializingAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializedAttribute">
      <summary>When applied to a method, specifies that the method is called after serialization of an object graph.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.OnSerializedAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializingAttribute">
      <summary>When applied to a method, specifies that the method is called before serialization of an object.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.OnSerializingAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationException">
      <summary>The exception thrown when an error occurs during serialization or deserialization.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" /> class with a specified message.</summary>
      <param name="message">The reason why the exception occurred. </param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContext">
      <summary>Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class with a given context state.</summary>
      <param name="state">A bitwise combination of the <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> values that specifies the source or destination context for this <see cref="T:System.Runtime.Serialization.StreamingContext" />. </param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class with a given context state, and some additional information.</summary>
      <param name="state">A bitwise combination of the <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> values that specifies the source or destination context for this <see cref="T:System.Runtime.Serialization.StreamingContext" />. </param>
      <param name="additional">Any additional information to be associated with the <see cref="T:System.Runtime.Serialization.StreamingContext" />. This information is available to any object that implements <see cref="T:System.Runtime.Serialization.ISerializable" /> or any serialization surrogate. Most users do not need to set this parameter. </param>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.Context">
      <summary>Gets context specified as part of the additional context.</summary>
      <returns>The context specified as part of the additional context.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances contain the same values.</summary>
      <returns>true if the specified object is an instance of <see cref="T:System.Runtime.Serialization.StreamingContext" /> and equals the value of the current instance; otherwise, false.</returns>
      <param name="obj">An object to compare with the current instance. </param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.GetHashCode">
      <summary>Returns a hash code of this object.</summary>
      <returns>The <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> value that contains the source or destination of the serialization for this <see cref="T:System.Runtime.Serialization.StreamingContext" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.State">
      <summary>Gets the source or destination of the transmitted data.</summary>
      <returns>During serialization, the destination of the transmitted data. During deserialization, the source of the data.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContextStates">
      <summary>Defines a set of flags that specifies the source or destination context for the stream during serialization.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossProcess">
      <summary>Specifies that the source or destination context is a different process on the same computer.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossMachine">
      <summary>Specifies that the source or destination context is a different computer.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.File">
      <summary>Specifies that the source or destination context is a file. Users can assume that files will last longer than the process that created them and not serialize objects in such a way that deserialization will require accessing any data from the current process.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Persistence">
      <summary>Specifies that the source or destination context is a persisted store, which could include databases, files, or other backing stores. Users can assume that persisted data will last longer than the process that created the data and not serialize objects so that deserialization will require accessing any data from the current process.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Remoting">
      <summary>Specifies that the data is remoted to a context in an unknown location. Users cannot make any assumptions whether this is on the same computer.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Other">
      <summary>Specifies that the serialization context is unknown.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Clone">
      <summary>Specifies that the object graph is being cloned. Users can assume that the cloned graph will continue to exist within the same process and be safe to access handles or other references to unmanaged resources.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossAppDomain">
      <summary>Specifies that the source or destination context is a different AppDomain. For information on AppDomains, see Application Domains.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.All">
      <summary>Specifies that the serialized data can be transmitted to or received from any of the other contexts.</summary>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesAttribute">
      <summary>Defines the compatibility guarantee of a component, type, or type member that may span multiple versions.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> class with a value that indicates a library, type, or member's guaranteed level of compatibility across multiple versions.</summary>
      <param name="guarantees">One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions</param>
    </member>
    <member name="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees">
      <summary>Gets a value that indicates the guaranteed level of compatibility of a library, type, or type member that spans multiple versions.</summary>
      <returns>One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesOptions">
      <summary>Indicates the compatibility guarantee of a component, type, or type member that may span multiple versions.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.None">
      <summary>The developer does not guarantee compatibility across versions. Consumers of the component, type, or member can expect that future versions will break the existing client.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange">
      <summary>The developer promises multi-version exchange compatibility for the type. Consumers of the type can expect compatibility across future versions and can use these types in all of their interfaces. Any versioning problems cannot be fixed by side-by-side execution. </summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable">
      <summary>The developer promises stable compatibility across versions. Consumers can expect that future versions will not break the existing client. However, if they do and if the client has not used the type in its interfaces, the client may be able to use side-by-side execution to fix the problem.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide">
      <summary>The component has been tested to work when more than one version of the assembly is loaded into the same application domain. Future versions can break compatibility. However, when such breaking changes are made, the old version is not modified but continues to exist alongside the new version.</summary>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceExposureAttribute">
      <summary>Specifies the resource exposure for a member of a class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceExposureAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Versioning.ResourceExposureAttribute" /> class with the specified exposure level.</summary>
      <param name="exposureLevel">The scope of the resource.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceExposureAttribute.ResourceExposureLevel">
      <summary>Gets the resource exposure scope.</summary>
      <returns>A <see cref="T:System.Runtime.Versioning.ResourceScope" /> object.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceScope">
      <summary>Identifies the scope of a sharable resource.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.None">
      <summary>There is no shared state.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Machine">
      <summary>The state is shared by objects within the machine.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Process">
      <summary>The state is shared within a process.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.AppDomain">
      <summary>The state is shared by objects within an <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Library">
      <summary>The state is shared by objects within a library.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Private">
      <summary>The resource is visible to only the type.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Assembly">
      <summary>The resource is visible at an assembly scope.</summary>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>Identifies the version of the .NET Framework that a particular assembly was compiled against.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> class by specifying the .NET Framework version against which an assembly was built.</summary>
      <param name="frameworkName">The version of the .NET Framework against which the assembly was built.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> is null.</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>Gets the display name of the .NET Framework version against which an assembly was built.</summary>
      <returns>The display name of the .NET Framework version.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>Gets the name of the .NET Framework version against which a particular assembly was compiled.</summary>
      <returns>The name of the .NET Framework version with which the assembly was compiled.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.VersioningHelper">
      <summary>Provides methods to aid developers in writing version-safe code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>Returns a version-safe name based on the specified resource name and the intended resource consumption source.</summary>
      <returns>A version-safe name.</returns>
      <param name="name">The name of the resource.</param>
      <param name="from">The scope of the resource.</param>
      <param name="to">The desired resource consumption scope.</param>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope,System.Type)">
      <summary>Returns a version-safe name based on the specified resource name, the intended resource consumption scope, and the type using the resource.</summary>
      <returns>A version-safe name.</returns>
      <param name="name">The name of the resource.</param>
      <param name="from">The beginning of the scope range.</param>
      <param name="to">The end of the scope range.</param>
      <param name="type">The <see cref="T:System.Type" /> of the resource.</param>
      <exception cref="T:System.ArgumentException">The values for <paramref name="from" /> and <paramref name="to" /> are invalid. The resource type in the <see cref="T:System.Runtime.Versioning.ResourceScope" />  enumeration is going from a more restrictive resource type to a more general resource type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>Specifies that code or an assembly performs security-critical operations.</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityCriticalAttribute" /> class with default scope. </summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>The exception that is thrown when a security error is detected.</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that caused the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>Returns a representation of the current <see cref="T:System.Security.SecurityException" />.</summary>
      <returns>A string representation of the current <see cref="T:System.Security.SecurityException" />.</returns>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>Identifies types or members as security-critical and safely accessible by transparent code. </summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecuritySafeCriticalAttribute" /> class. </summary>
    </member>
    <member name="T:System.Security.SecurityState">
      <summary>[SECURITY CRITICAL] Provides a base class for requesting the security status of an action from the <see cref="T:System.AppDomainManager" /> object.</summary>
    </member>
    <member name="M:System.Security.SecurityState.#ctor">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Security.SecurityState" /> class. </summary>
    </member>
    <member name="M:System.Security.SecurityState.EnsureState">
      <summary>[SECURITY CRITICAL] When overridden in a derived class, ensures that the state that is represented by <see cref="T:System.Security.SecurityState" /> is available on the host.</summary>
    </member>
    <member name="M:System.Security.SecurityState.IsStateAvailable">
      <summary>[SECURITY CRITICAL] Gets a value that indicates whether the state for this implementation of the <see cref="T:System.Security.SecurityState" /> class is available on the current host.</summary>
      <returns>true if the state is available; otherwise, false. </returns>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>Specifies that an assembly cannot access protected resources or functionality. </summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityTransparentAttribute" /> class. </summary>
    </member>
    <member name="T:System.Security.UnverifiableCodeAttribute">
      <summary>Marks modules that contain unverifiable code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.UnverifiableCodeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.UnverifiableCodeAttribute" /> class. </summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>The exception that is thrown when the security policy requires code to be type-safe, but the verification process is unable to verify that the code is type-safe.</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is caused the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>Represents the abstract base class from which all implementations of the Advanced Encryption Standard (AES) must inherit. </summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Aes" /> class. </summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicException">
      <summary>The exception that is thrown when an error occurs during a cryptographic operation.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with the specified HRESULT error code.</summary>
      <param name="hr">The HRESULT error code. </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with a specified error message in the specified format.</summary>
      <param name="format">The format used to output the error message. </param>
      <param name="insert">The error message that explains the reason for the exception. </param>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
      <summary>The exception that is thrown when an unexpected operation occurs during a cryptographic operation.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStream">
      <summary>Defines a stream that links data streams to cryptographic transformations.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptoStream" /> class with a target data stream, the transformation to use, and the mode of the stream.</summary>
      <param name="stream">The stream on which to perform the cryptographic transformation. </param>
      <param name="transform">The cryptographic transformation that is to be performed on the stream. </param>
      <param name="mode">One of the enumeration values that specifies whether to read or write the cryptographic stream. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not readable.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanRead">
      <summary>Gets a value indicating whether the current <see cref="T:System.Security.Cryptography.CryptoStream" /> is readable.</summary>
      <returns>true if the current stream is readable; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanSeek">
      <summary>Gets a value indicating whether you can seek within the current <see cref="T:System.Security.Cryptography.CryptoStream" />.</summary>
      <returns>Always false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanWrite">
      <summary>Gets a value indicating whether the current <see cref="T:System.Security.Cryptography.CryptoStream" /> is writable.</summary>
      <returns>true if the current stream is writable; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Clear">
      <summary>Releases all resources used by the <see cref="T:System.Security.Cryptography.CryptoStream" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.CryptoStream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Flush">
      <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushFinalBlock">
      <summary>Updates the underlying data source or repository with the current state of the buffer, and then clears the buffer.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key is corrupt, which can cause invalid padding to the stream. </exception>
      <exception cref="T:System.NotSupportedException">The current stream is not writable.-or- The final block has already been transformed. </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Length">
      <summary>Gets the length, in bytes, of the stream.</summary>
      <returns>This property is not supported.</returns>
      <exception cref="T:System.NotSupportedException">This property is not supported. </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Position">
      <summary>Gets or sets the position within the current stream.</summary>
      <returns>This property is not supported.</returns>
      <exception cref="T:System.NotSupportedException">This property is not supported. </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a sequence of bytes from the current <see cref="T:System.Security.Cryptography.CryptoStream" /> and advances the position within the stream by the number of bytes read.</summary>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream has been reached.</returns>
      <param name="buffer">An array of bytes. A maximum of <paramref name="count" /> bytes are read from the current stream and stored in <paramref name="buffer" />. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
      <param name="count">The maximum number of bytes to be read from the current stream. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> associated with the current <see cref="T:System.Security.Cryptography.CryptoStream" /> object does not match the underlying stream.  For example, this exception is thrown when using <see cref="F:System.Security.Cryptography.CryptoStreamMode.Read" /> with an underlying stream that is write-only.  </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset" /> parameter is less than zero.-or- The <paramref name="count" /> parameter is less than zero. </exception>
      <exception cref="T:System.ArgumentException">The sum of the <paramref name="count" /> and <paramref name="offset" /> parameters is longer than the length of the buffer. </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> in all cases.</summary>
      <returns>A <see cref="T:System.NotSupportedException" />. </returns>
      <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter. </param>
      <param name="origin">The reference point used to obtain the new position. </param>
      <exception cref="T:System.NotSupportedException">In all cases. </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> in all cases.</summary>
      <param name="value">The desired length of the current stream, in bytes. </param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a sequence of bytes to the current <see cref="T:System.Security.Cryptography.CryptoStream" /> and advances the current position within this stream by the number of bytes written.</summary>
      <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
      <param name="count">The number of bytes to be written to the current stream. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> associated with the current <see cref="T:System.Security.Cryptography.CryptoStream" /> object does not match the underlying stream.  For example, this exception is thrown when using <see cref="F:System.Security.Cryptography.CryptoStreamMode.Write" />  with an underlying stream that is read only.  </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset" /> parameter is less than zero.-or- The <paramref name="count" /> parameter is less than zero. </exception>
      <exception cref="T:System.ArgumentException">The sum of the <paramref name="count" /> and <paramref name="offset" /> parameters is longer than the length of the buffer. </exception>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStreamMode">
      <summary>Specifies the mode of a cryptographic stream.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Read">
      <summary>Read access to a cryptographic stream.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Write">
      <summary>Write access to a cryptographic stream.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>Represents the abstract base class from which all classes that derive byte sequences of a specified length inherit.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DeriveBytes" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>When overridden in a derived class, returns pseudo-random key bytes.</summary>
      <returns>A byte array filled with pseudo-random key bytes.</returns>
      <param name="cb">The number of pseudo-random key bytes to generate. </param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>When overridden in a derived class, resets the state of the operation.</summary>
    </member>
    <member name="T:System.Security.Cryptography.HashAlgorithm">
      <summary>Represents the base class from which all implementations of cryptographic hash algorithms must derive.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform">
      <summary>Gets a value indicating whether the current transform can be reused.</summary>
      <returns>Always true.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks">
      <summary>When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed.</summary>
      <returns>true if multiple blocks can be transformed; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Clear">
      <summary>Releases all resources used by the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
      <summary>Computes the hash value for the specified byte array.</summary>
      <returns>The computed hash code.</returns>
      <param name="buffer">The input to compute the hash code for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
      <summary>Computes the hash value for the specified region of the specified byte array.</summary>
      <returns>The computed hash code.</returns>
      <param name="buffer">The input to compute the hash code for. </param>
      <param name="offset">The offset into the byte array from which to begin using data. </param>
      <param name="count">The number of bytes in the array to use as data. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is an invalid value.-or-<paramref name="buffer" /> length is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is out of range. This parameter requires a non-negative number.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)">
      <summary>Computes the hash value for the specified <see cref="T:System.IO.Stream" /> object.</summary>
      <returns>The computed hash code.</returns>
      <param name="inputStream">The input to compute the hash code for. </param>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.Hash">
      <summary>Gets the value of the computed hash code.</summary>
      <returns>The current value of the computed hash code.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <see cref="F:System.Security.Cryptography.HashAlgorithm.HashValue" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.</summary>
      <param name="array">The input to compute the hash code for. </param>
      <param name="ibStart">The offset into the byte array from which to begin using data. </param>
      <param name="cbSize">The number of bytes in the byte array to use as data. </param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashFinal">
      <summary>When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.HashSize">
      <summary>Gets the size, in bits, of the computed hash code.</summary>
      <returns>The size, in bits, of the computed hash code.</returns>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashSizeValue">
      <summary>Represents the size, in bits, of the computed hash code.</summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashValue">
      <summary>Represents the value of the computed hash code.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Initialize">
      <summary>Initializes an implementation of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.InputBlockSize">
      <summary>When overridden in a derived class, gets the input block size.</summary>
      <returns>The input block size.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize">
      <summary>When overridden in a derived class, gets the output block size.</summary>
      <returns>The output block size.</returns>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.State">
      <summary>Represents the state of the hash computation.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.System#IDisposable#Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> and optionally releases the managed resources.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Computes the hash value for the specified region of the input byte array and copies the resulting hash value to the specified region of the output byte array.</summary>
      <returns>The number of bytes written.</returns>
      <param name="inputBuffer">The input to compute the hash code for. </param>
      <param name="inputOffset">The offset into the input byte array from which to begin using data. </param>
      <param name="inputCount">The number of bytes in the input byte array to use as data. </param>
      <param name="outputBuffer">A copy of the part of the input array used to compute the hash code. </param>
      <param name="outputOffset">The offset into the output byte array from which to begin writing data. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputCount" /> uses an invalid value.-or-<paramref name="inputBuffer" /> has an invalid length.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBuffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputOffset" /> is out of range. This parameter requires a non-negative number.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>Computes the hash value for the specified region of the specified byte array.</summary>
      <returns>An array that is a copy of the part of the input that is hashed.</returns>
      <param name="inputBuffer">The input to compute the hash code for. </param>
      <param name="inputOffset">The offset into the byte array from which to begin using data. </param>
      <param name="inputCount">The number of bytes in the byte array to use as data. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputCount" /> uses an invalid value.-or-<paramref name="inputBuffer" /> has an invalid offset length.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBuffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputOffset" /> is out of range. This parameter cannot be a non-negative number.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="T:System.Security.Cryptography.HMAC">
      <summary>Represents the abstract class from which all implementations of Hash-based Message Authentication Code (HMAC) must derive.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMAC" /> class. </summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.BlockSizeValue">
      <summary>Gets or sets the block size to use in the hash value.</summary>
      <returns>The block size to use in the hash value.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.HMAC" /> class when a key change is legitimate and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, routes data written to the object into the default <see cref="T:System.Security.Cryptography.HMAC" /> hash algorithm for computing the hash value.</summary>
      <param name="rgb">The input data. </param>
      <param name="ib">The offset into the byte array from which to begin using data. </param>
      <param name="cb">The number of bytes in the array to use as data. </param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashFinal">
      <summary>When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</summary>
      <returns>The computed hash code in a byte array.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.HashName">
      <summary>Gets or sets the name of the hash algorithm to use for hashing.</summary>
      <returns>The name of the hash algorithm.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The current hash algorithm cannot be changed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Initialize">
      <summary>Initializes an instance of the default implementation of <see cref="T:System.Security.Cryptography.HMAC" />.</summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.Key">
      <summary>Gets or sets the key to use in the hash algorithm.</summary>
      <returns>The key to use in the hash algorithm.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt is made to change the <see cref="P:System.Security.Cryptography.HMAC.Key" /> property after hashing has begun. </exception>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>Computes a Hash-based Message Authentication Code (HMAC) using the <see cref="T:System.Security.Cryptography.SHA1" /> hash function.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA1" /> class with a randomly generated key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA1" /> class with the specified key data.</summary>
      <param name="key">The secret key for <see cref="T:System.Security.Cryptography.HMACSHA1" /> encryption. The key can be any length, but if it is more than 64 bytes long it will be hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null. </exception>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
      <summary>Computes a Hash-based Message Authentication Code (HMAC) using the <see cref="T:System.Security.Cryptography.SHA256" /> hash function.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA256" /> class with a randomly generated key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA256" /> class with the specified key data.</summary>
      <param name="key">The secret key for <see cref="T:System.Security.Cryptography.HMACSHA256" /> encryption. The key can be any length, but if it is more than 64 bytes long it will be hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null. </exception>
    </member>
    <member name="T:System.Security.Cryptography.ICryptoTransform">
      <summary>Defines the basic operations of cryptographic transformations.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform">
      <summary>Gets a value indicating whether the current transform can be reused.</summary>
      <returns>true if the current transform can be reused; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
      <summary>Gets a value indicating whether multiple blocks can be transformed.</summary>
      <returns>true if multiple blocks can be transformed; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.InputBlockSize">
      <summary>Gets the input block size.</summary>
      <returns>The size of the input data blocks in bytes.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize">
      <summary>Gets the output block size.</summary>
      <returns>The size of the output data blocks in bytes.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.</summary>
      <returns>The number of bytes written.</returns>
      <param name="inputBuffer">The input for which to compute the transform. </param>
      <param name="inputOffset">The offset into the input byte array from which to begin using data. </param>
      <param name="inputCount">The number of bytes in the input byte array to use as data. </param>
      <param name="outputBuffer">The output to which to write the transform. </param>
      <param name="outputOffset">The offset into the output byte array from which to begin writing data. </param>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>Transforms the specified region of the specified byte array.</summary>
      <returns>The computed transform.</returns>
      <param name="inputBuffer">The input for which to compute the transform. </param>
      <param name="inputOffset">The offset into the byte array from which to begin using data. </param>
      <param name="inputCount">The number of bytes in the byte array to use as data. </param>
    </member>
    <member name="T:System.Security.Cryptography.KeyedHashAlgorithm">
      <summary>Represents the abstract class from which all implementations of keyed hash algorithms must derive. </summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Security.Cryptography.KeyedHashAlgorithm.Key">
      <summary>Gets or sets the key to use in the hash algorithm.</summary>
      <returns>The key to use in the hash algorithm.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt was made to change the <see cref="P:System.Security.Cryptography.KeyedHashAlgorithm.Key" /> property during hashing. </exception>
    </member>
    <member name="F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue">
      <summary>The key to use in the hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.KeySizes">
      <summary>Determines the set of valid key sizes for the symmetric cryptographic algorithms.</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.KeySizes" /> class with the specified key values.</summary>
      <param name="minSize">The minimum valid key size. </param>
      <param name="maxSize">The maximum valid key size. </param>
      <param name="skipSize">The interval between valid key sizes. </param>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MaxSize">
      <summary>Specifies the maximum key size in bits.</summary>
      <returns>The maximum key size in bits.</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MinSize">
      <summary>Specifies the minimum key size in bits.</summary>
      <returns>The minimum key size in bits.</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.SkipSize">
      <summary>Specifies the interval between valid key sizes in bits.</summary>
      <returns>The interval between valid key sizes in bits.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>Represents the abstract class from which all implementations of cryptographic random number generators derive.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>When overridden in a derived class, fills an array of bytes with a cryptographically strong, random sequence of values.</summary>
      <param name="data">The array to fill with cryptographically strong, random bytes. </param>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
      <summary>Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <see cref="T:System.Security.Cryptography.HMACSHA1" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</summary>
      <param name="password">The password used to derive the key. </param>
      <param name="salt">The key salt used to derive the key.</param>
      <param name="iterations">The number of iterations for the operation. </param>
      <exception cref="T:System.ArgumentException">The specified salt size is smaller than 8 bytes or the iteration count is less than 1. </exception>
      <exception cref="T:System.ArgumentNullException">The password or salt is null. </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password and salt to derive the key.</summary>
      <param name="password">The password used to derive the key. </param>
      <param name="salt">The key salt used to derive the key. </param>
      <exception cref="T:System.ArgumentException">The specified salt size is smaller than 8 bytes or the iteration count is less than 1. </exception>
      <exception cref="T:System.ArgumentNullException">The password or salt is null. </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</summary>
      <param name="password">The password used to derive the key. </param>
      <param name="salt">The key salt used to derive the key. </param>
      <param name="iterations">The number of iterations for the operation. </param>
      <exception cref="T:System.ArgumentException">The specified salt size is smaller than 8 bytes or the iteration count is less than 1. </exception>
      <exception cref="T:System.ArgumentNullException">The password or salt is null. </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
      <summary>Returns a pseudo-random key from a password, salt and iteration count.</summary>
      <returns>A byte array filled with pseudo-random key bytes.</returns>
      <param name="cb">The number of pseudo-random key bytes to generate. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cb " />is out of range. This parameter requires a non-negative number.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
      <summary>Gets or sets the number of iterations for the operation.</summary>
      <returns>The number of iterations for the operation.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of iterations is less than 1. </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
      <summary>Resets the state of the operation.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
      <summary>Gets or sets the key salt value for the operation.</summary>
      <returns>The key salt value for the operation.</returns>
      <exception cref="T:System.ArgumentException">The specified salt size is smaller than 8 bytes. </exception>
      <exception cref="T:System.ArgumentNullException">The salt is null. </exception>
    </member>
    <member name="T:System.Security.Cryptography.RNGCryptoServiceProvider">
      <summary>Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])">
      <summary>Fills an array of bytes with a cryptographically strong sequence of random values.</summary>
      <param name="data">The array to fill with a cryptographically strong sequence of random values. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>Computes the <see cref="T:System.Security.Cryptography.SHA1" /> hash for the input data.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>Computes the <see cref="T:System.Security.Cryptography.SHA1" /> hash for the input data using the managed library. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA1Managed" /> class.</summary>
      <exception cref="T:System.InvalidOperationException">This class is not compliant with the Federal Information Processing Standards (FIPS) algorithm.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Routes data written to the object into the <see cref="T:System.Security.Cryptography.SHA1Managed" /> hash algorithm for computing the hash.</summary>
      <param name="rgb">The input data. </param>
      <param name="ibStart">The offset into the byte array from which to begin using data. </param>
      <param name="cbSize">The number of bytes in the array to use as data. </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashFinal">
      <summary>Returns the computed <see cref="T:System.Security.Cryptography.SHA1" /> hash value after all data has been written to the object.</summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>Computes the <see cref="T:System.Security.Cryptography.SHA256" /> hash for the input data. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>Computes the <see cref="T:System.Security.Cryptography.SHA256" /> hash for the input data using the managed library. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA256Managed" /> class using the managed library.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, routes data written to the object into the <see cref="T:System.Security.Cryptography.SHA256" /> hash algorithm for computing the hash.</summary>
      <param name="rgb">The input data. </param>
      <param name="ibStart">The offset into the byte array from which to begin using data. </param>
      <param name="cbSize">The number of bytes in the array to use as data. </param>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashFinal">
      <summary>When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>Initializes an instance of <see cref="T:System.Security.Cryptography.SHA256Managed" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SymmetricAlgorithm">
      <summary>Represents the abstract base class from which all implementations of symmetric algorithms must inherit.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> class.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The implementation of the class derived from the symmetric algorithm is not valid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize">
      <summary>Gets or sets the block size, in bits, of the cryptographic operation.</summary>
      <returns>The block size, in bits.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The block size is invalid. </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue">
      <summary>Represents the block size, in bits, of the cryptographic operation.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Clear">
      <summary>Releases all resources used by the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor">
      <summary>Creates a symmetric decryptor object with the current <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> property and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>A symmetric decryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>When overridden in a derived class, creates a symmetric decryptor object with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> property and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>A symmetric decryptor object.</returns>
      <param name="rgbKey">The secret key to use for the symmetric algorithm. </param>
      <param name="rgbIV">The initialization vector to use for the symmetric algorithm. </param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor">
      <summary>Creates a symmetric encryptor object with the current <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> property and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>A symmetric encryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>When overridden in a derived class, creates a symmetric encryptor object with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> property and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>A symmetric encryptor object.</returns>
      <param name="rgbKey">The secret key to use for the symmetric algorithm. </param>
      <param name="rgbIV">The initialization vector to use for the symmetric algorithm. </param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV">
      <summary>When overridden in a derived class, generates a random initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) to use for the algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey">
      <summary>When overridden in a derived class, generates a random key (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) to use for the algorithm.</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.IV">
      <summary>Gets or sets the initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) for the symmetric algorithm.</summary>
      <returns>The initialization vector.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the initialization vector to null. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt was made to set the initialization vector to an invalid size. </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.IVValue">
      <summary>Represents the initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) for the symmetric algorithm.</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Key">
      <summary>Gets or sets the secret key for the symmetric algorithm.</summary>
      <returns>The secret key to use for the symmetric algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set the key to null. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key size is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.KeySize">
      <summary>Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.</summary>
      <returns>The size, in bits, of the secret key used by the symmetric algorithm.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key size is not valid. </exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue">
      <summary>Represents the size, in bits, of the secret key used by the symmetric algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue">
      <summary>Represents the secret key for the symmetric algorithm.</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes">
      <summary>Gets the block sizes, in bits, that are supported by the symmetric algorithm.</summary>
      <returns>An array that contains the block sizes supported by the algorithm.</returns>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue">
      <summary>Specifies the block sizes, in bits, that are supported by the symmetric algorithm.</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes">
      <summary>Gets the key sizes, in bits, that are supported by the symmetric algorithm.</summary>
      <returns>An array that contains the key sizes supported by the algorithm.</returns>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue">
      <summary>Specifies the key sizes, in bits, that are supported by the symmetric algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.System#IDisposable#Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> and optionally releases the managed resources. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)">
      <summary>Determines whether the specified key size is valid for the current algorithm.</summary>
      <returns>true if the specified key size is valid for the current algorithm; otherwise, false.</returns>
      <param name="bitLength">The length, in bits, to check for a valid key size. </param>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate">
      <summary>Provides methods that help you use X.509 version 3 certificates.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class defined from a sequence of bytes representing an X.509 version 3 certificate.</summary>
      <param name="data">A byte array containing data from an X.509 certificate.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:The certificate file does not exist.The certificate is invalid.The certificate's password is incorrect.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="rawData" /> parameter is null.-or-The length of the <paramref name="rawData" /> parameter is 0.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class using a byte array and a password.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:The certificate file does not exist.The certificate is invalid.The certificate's password is incorrect.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="rawData" /> parameter is null.-or-The length of the <paramref name="rawData" /> parameter is 0.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class using a byte array, a password, and a key storage flag.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate. </param>
      <param name="password">The password required to access the X.509 certificate data. </param>
      <param name="keyStorageFlags">One of the enumeration values. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:The certificate file does not exist.The certificate is invalid.The certificate's password is incorrect.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="rawData" /> parameter is null.-or-The length of the <paramref name="rawData" /> parameter is 0.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class using a handle to an unmanaged PCCERT_CONTEXT structure.</summary>
      <param name="handle">A handle to an unmanaged PCCERT_CONTEXT structure.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class using another <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class.</summary>
      <param name="cert">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class from which to initialize this class. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate occurs. For example:The certificate file does not exist.The certificate is invalid.The certificate's password is incorrect.</exception>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="cert" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class using a using a certificate file name. </summary>
      <param name="fileName">The name of a certificate file.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class by using a certificate file name and a password to access the certificate.</summary>
      <param name="fileName">The name of a certificate file. </param>
      <param name="password">The password required to access the X.509 certificate data. </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class using a certificate file name, a password used to access the certificate, and a key storage flag. </summary>
      <param name="fileName">The name of a certificate file. </param>
      <param name="password">The password required to access the X.509 certificate data. </param>
      <param name="keyStorageFlags">One of the enumeration values. </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)">
      <summary>[SECURITY CRITICAL] Creates an X.509 version 3 certificate from the specified certification file.</summary>
      <returns>The newly created X.509 certificate.</returns>
      <param name="filename">The path of the certification file from which to create the X.509 certificate. </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> objects for equality.</summary>
      <returns>true if the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object is equal to the object specified by the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="obj">An object to compare to the current object. </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Compares two <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> objects for equality.</summary>
      <returns>true if the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object is equal to the object specified by the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare to the current object.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)">
      <summary>Exports the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object to a byte array in a format described by one of the <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> values. </summary>
      <returns>An array of bytes that represents the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object.</returns>
      <param name="contentType">One of the enumeration values that describes how to format the output data. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A value other than <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert" /> was passed to the <paramref name="contentType" /> parameter.-or-The certificate could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)">
      <summary>Exports the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object to a byte array in a format described by one of the <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> values, and using the specified password.</summary>
      <returns>An array of bytes that represents the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object.</returns>
      <param name="contentType">One of the enumeration values that describes how to format the output data.</param>
      <param name="password">The password required to access the X.509 certificate data.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A value other than <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert" /> was passed to the <paramref name="contentType" /> parameter.-or-The certificate could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash">
      <summary>Returns the hash value for the X.509 version 3 certificate as an array of bytes.</summary>
      <returns>The hash value for the X.509 certificate.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString">
      <summary>Returns the hash value for the X.509 version 3 certificate as a hexadecimal string.</summary>
      <returns>The hexadecimal string representation of the X.509 certificate hash value.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString">
      <summary>Returns the effective date of this X.509 version 3 certificate.</summary>
      <returns>The effective date for this X.509 certificate.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString">
      <summary>Returns the expiration date of this X.509 version 3 certificate.</summary>
      <returns>The expiration date for this X.509 certificate.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat">
      <summary>Returns the name of the format of this X.509 version 3 certificate.</summary>
      <returns>The format of this X.509 certificate.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode">
      <summary>Returns the hash code for the X.509 version 3 certificate as an integer.</summary>
      <returns>The hash code for the X.509 certificate as an integer.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm">
      <summary>Returns the key algorithm information for this X.509 version 3 certificate.</summary>
      <returns>The key algorithm information for this X.509 certificate as a string.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters">
      <summary>Returns the key algorithm parameters for the X.509 version 3 certificate.</summary>
      <returns>The key algorithm parameters for the X.509 certificate as an array of bytes.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString">
      <summary>Returns the key algorithm parameters for the X.509 version 3 certificate.</summary>
      <returns>The key algorithm parameters for the X.509 certificate as a hexadecimal string.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey">
      <summary>Returns the public key for the X.509 version 3 certificate.</summary>
      <returns>The public key for the X.509 certificate as an array of bytes.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString">
      <summary>Returns the public key for the X.509 version 3 certificate.</summary>
      <returns>The public key for the X.509 certificate as a hexadecimal string.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData">
      <summary>Returns the raw data for the entire X.509 version 3 certificate.</summary>
      <returns>A byte array containing the X.509 certificate data.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString">
      <summary>Returns the raw data for the entire X.509 version 3 certificate.</summary>
      <returns>The X.509 certificate data as a hexadecimal string.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber">
      <summary>Returns the serial number of the X.509 version 3 certificate.</summary>
      <returns>The serial number of the X.509 certificate as an array of bytes.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate context is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString">
      <summary>Returns the serial number of the X.509 version 3 certificate.</summary>
      <returns>The serial number of the X.509 certificate as a hexadecimal string.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Handle">
      <summary>[SECURITY CRITICAL] Gets a handle to a Microsoft Cryptographic API certificate context described by an unmanaged PCCERT_CONTEXT structure. </summary>
      <returns>An <see cref="T:System.IntPtr" /> structure that represents an unmanaged PCCERT_CONTEXT structure.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.Byte[])">
      <summary>Populates the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object with data from a byte array.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="rawData" /> parameter is null.-or-The length of the <paramref name="rawData" /> parameter is 0.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>Populates the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object using data from a byte array, a password, and flags for determining how the private key is imported.</summary>
      <param name="rawData">A byte array containing data from an X.509 certificate. </param>
      <param name="password">The password required to access the X.509 certificate data. </param>
      <param name="keyStorageFlags">One of the enumeration values that controls where and how the private key is imported. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="rawData" /> parameter is null.-or-The length of the <paramref name="rawData" /> parameter is 0.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.String)">
      <summary>[SECURITY CRITICAL] Populates the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object with information from a certificate file.</summary>
      <param name="fileName">The name of a certificate file represented as a string. </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>[SECURITY CRITICAL] Populates the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object with information from a certificate file, a password, and a <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> value.</summary>
      <param name="fileName">The name of a certificate file represented as a string. </param>
      <param name="password">The password required to access the X.509 certificate data. </param>
      <param name="keyStorageFlags">One of the enumeration values that controls where and how the private key is imported. </param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Issuer">
      <summary>Gets the name of the certificate authority that issued the X.509 version 3 certificate.</summary>
      <returns>The name of the certificate authority that issued the X.509 version 3 certificate.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate handle is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Subject">
      <summary>Gets the subject distinguished name from the certificate.</summary>
      <returns>The subject distinguished name from the certificate.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate handle is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object.</summary>
      <returns>A string representation of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object, with extra information, if specified.</summary>
      <returns>A string representation of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object.</returns>
      <param name="fVerbose">true to produce the verbose form of the string representation; otherwise, false. </param>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ContentType">
      <summary>Specifies the format of an X.509 certificate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ContentType.Unknown">
      <summary>An unknown X.509 certificate.  </summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert">
      <summary>A single X.509 certificate.</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags">
      <summary>Defines where and how to export the private key of an X.509 certificate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet">
      <summary>The default key set is used.  The user key set is usually the default. </summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.CreateHexString(System.Byte[])">
      <summary>Creates a hexadecimal string from the specified byte array.</summary>
      <returns>A hexadecimal string.</returns>
      <param name="sArray">A byte array.</param>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>Specifies the base attribute class for code access security.</summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</summary>
      <param name="action">One of the enumeration values. </param>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>Specifies the security actions that can be performed by using declarative security.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
      <summary>All callers that are higher in the call stack are required to have been granted the permission that is specified by the current permission object.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
      <summary>The calling code can access the resource that is identified by the current permission object, even if callers that are higher in the stack have not been granted permission to access the resource. </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
      <summary>The ability to access the resource that is specified by the current permission object is denied to callers, even if they have been granted permission to access it.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
      <summary>Only the resources that are specified by this permission object can be accessed, even if the code has been granted permission to access other resources.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>The immediate caller is required to have been granted the specified permission.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <summary>The derived class that inherits the class or overrides a method is required to have been granted the specified permission. </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>The request for the minimum permissions required for code to run. This action can be used only within the scope of the assembly.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
      <summary>The request for additional permissions that are optional (not required for code to run). This request implicitly refuses all other permissions that are not specifically requested. This action can be used only within the scope of the assembly. </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
      <summary>The request that permissions that might be misused will not be granted to the calling code. This action can be used only within the scope of the assembly.</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>Specifies the base attribute class for declarative security from which the <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> attribute is derived.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</summary>
      <param name="action">One of the enumeration values. </param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>Gets or sets a security action.</summary>
      <returns>One of the enumeration values.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>Gets or sets a value that indicates whether full (unrestricted) permission to the resource that is protected by the attribute is declared.</summary>
      <returns>true if full permission to the protected resource is declared; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>Allows security actions to be applied to code by using declarative security. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityPermissionAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</summary>
      <param name="action">One of the enumeration values. </param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>Gets or sets a value that indicates whether permission to manipulate <see cref="T:System.AppDomain" /> is declared.</summary>
      <returns>true if permission to manipulate <see cref="T:System.AppDomain" /> is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
      <summary>Gets or sets a value that indicates whether permission to alter or manipulate domain security policy is declared.</summary>
      <returns>true if permission to alter or manipulate security policy in an application domain is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>Gets or sets a value that indicates whether permission to alter or manipulate evidence is declared.</summary>
      <returns>true if the ability to alter or manipulate evidence is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>Gets or sets a value that indicates whether permission to view and manipulate security policy is declared.</summary>
      <returns>true if permission to manipulate security policy is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>Gets or sets a value that indicates whether permission to manipulate threads is declared.</summary>
      <returns>true if permission to manipulate threads is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>Gets or sets all permission flags that are specified in the <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> enumeration.</summary>
      <returns>One or more of the enumeration values combined using a bitwise OR.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set this property to an invalid value. See <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> for the valid values. </exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>Gets or sets a value that indicates whether permission to bypass code verification is declared.</summary>
      <returns>true if permission to bypass code verification is declared; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>Gets or sets a value that indicates whether permission to call unmanaged code is declared.</summary>
      <returns>true if permission to call unmanaged code is declared; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>Specifies access flags for the security permission object.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>No security access.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>Ability to assert that all the callers of this code have the requisite permission for the operation.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>Ability to call unmanaged code.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>Ability to skip verification of code in this assembly. Code that is unverifiable can be run if this permission is granted.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>Permission for the code to run. Without this permission, managed code will not be executed.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>Ability to use certain advanced operations on threads.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>Ability to provide evidence, including the ability to alter the evidence provided by the common language runtime.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>Ability to view and modify policy.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>Ability to provide serialization services. This flag is used by serialization formatters.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>Ability to specify domain policy.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>Ability to manipulate the principal object.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>Ability to create and manipulate an <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>Permission to configure remoting types and channels.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>Permission to plug code into the common language runtime infrastructure, such as adding remoting context sinks, envoy sinks, and dynamic sinks.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
      <summary>Permission to perform explicit binding redirection in the application configuration file. This includes redirection of .NET Framework assemblies that have been unified as well as other assemblies found outside the .NET Framework.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>The unrestricted state of the permission.</summary>
    </member>
    <member name="T:System.Security.Principal.IIdentity">
      <summary>Defines the basic functionality of an identity object.</summary>
    </member>
    <member name="P:System.Security.Principal.IIdentity.AuthenticationType">
      <summary>Gets the type of authentication used.</summary>
      <returns>The type of authentication used to identify the user.</returns>
    </member>
    <member name="P:System.Security.Principal.IIdentity.IsAuthenticated">
      <summary>Gets a value that indicates whether the user has been authenticated.</summary>
      <returns>true if the user was authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Principal.IIdentity.Name">
      <summary>Gets the name of the current user.</summary>
      <returns>The name of the user on whose behalf the code is running.</returns>
    </member>
    <member name="T:System.Security.Principal.IPrincipal">
      <summary>Defines the basic functionality of a principal object.</summary>
    </member>
    <member name="P:System.Security.Principal.IPrincipal.Identity">
      <summary>Gets the identity of the current principal.</summary>
      <returns>The <see cref="T:System.Security.Principal.IIdentity" /> object associated with the current principal.</returns>
    </member>
    <member name="M:System.Security.Principal.IPrincipal.IsInRole(System.String)">
      <summary>Determines whether the current principal belongs to the specified role.</summary>
      <returns>true if the current principal is a member of the specified role; otherwise, false.</returns>
      <param name="role">The name of the role for which to check membership. </param>
    </member>
    <member name="T:System.Text.Decoder">
      <summary>Converts a sequence of encoded bytes into a set of characters.</summary>
    </member>
    <member name="M:System.Text.Decoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Decoder" /> class.</summary>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>[SECURITY CRITICAL] Converts a buffer of encoded bytes to Unicode characters and stores the result in another buffer.</summary>
      <param name="bytes">The address of a buffer that contains the byte sequences to convert.</param>
      <param name="byteCount">The number of bytes in <paramref name="bytes" /> to convert.</param>
      <param name="chars">The address of a buffer to store the converted characters.</param>
      <param name="charCount">The maximum number of characters in <paramref name="chars" /> to use in the conversion.</param>
      <param name="flush">true to indicate no further data is to be converted; otherwise, false.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains true if all the characters specified by <paramref name="byteCount" /> were converted; otherwise, false. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts an array of encoded bytes to Unicode characters and stores the result in a byte array.</summary>
      <param name="bytes">A byte array to convert.</param>
      <param name="byteIndex">The zero-based index of the first element of <paramref name="bytes" /> to convert.</param>
      <param name="byteCount">The number of elements of <paramref name="bytes" /> to convert.</param>
      <param name="chars">An array to store the converted characters.</param>
      <param name="charIndex">The zero-based index of the first element of <paramref name="chars" /> in which data is stored.</param>
      <param name="charCount">The maximum number of elements of <paramref name="chars" /> to use in the conversion.</param>
      <param name="flush">true to indicate that no further data is to be converted; otherwise, false.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains true if all the characters specified by <paramref name="byteCount" /> were converted; otherwise, false. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> or <paramref name="bytes" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />, <paramref name="charCount" />, <paramref name="byteIndex" />, or <paramref name="byteCount" /> is less than zero.-or-The length of <paramref name="chars" /> - <paramref name="charIndex" /> is less than <paramref name="charCount" />.-or-The length of <paramref name="bytes" /> - <paramref name="byteIndex" /> is less than <paramref name="byteCount" />.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Decoder.GetCharCount" /> method.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
      <summary>[SECURITY CRITICAL] When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the decoder after the calculation.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false. </param>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The zero-based index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The zero-based index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
      <summary>[SECURITY CRITICAL] When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer. A parameter indicates whether to clear the internal state of the decoder after the conversion.</summary>
      <returns>The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters. </param>
      <param name="charCount">The maximum number of characters to write. </param>
      <param name="flush">true to clear the internal state of the decoder after the conversion; otherwise, false. </param>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The zero-based index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The zero-based index at which to start writing the resulting set of characters. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.</summary>
      <returns>The actual number of characters written into the <paramref name="chars" /> array.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The zero-based index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The zero-based index at which to start writing the resulting set of characters. </param>
      <param name="flush">true to clear the internal state of the decoder after the conversion; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.Decoder.Reset">
      <summary>When overridden in a derived class, sets the decoder back to its initial state.</summary>
    </member>
    <member name="T:System.Text.DecoderFallbackException">
      <summary>The exception that is thrown when a decoder fallback operation fails. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. </summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. A parameter specifies the error message.</summary>
      <param name="message">An error message.</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. Parameters specify the error message, the array of bytes being decoded, and the index of the byte that cannot be decoded.</summary>
      <param name="message">An error message.</param>
      <param name="bytesUnknown">The input byte array.</param>
      <param name="index">The index position in <paramref name="bytesUnknown" /> of the byte that cannot be decoded.</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. Parameters specify the error message and the inner exception that is the cause of this exception.</summary>
      <param name="message">An error message.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="P:System.Text.DecoderFallbackException.BytesUnknown">
      <summary>Gets the input byte sequence that caused the exception.</summary>
      <returns>The input byte array that cannot be decoded. </returns>
    </member>
    <member name="P:System.Text.DecoderFallbackException.Index">
      <summary>Gets the index position in the input byte sequence of the byte that caused the exception.</summary>
      <returns>The index position in the input byte array of the last byte that could be successfully decoded. The index position is zero-based. If the first byte cannot be decoded, the method returns -1.</returns>
    </member>
    <member name="T:System.Text.Encoder">
      <summary>Converts a set of characters into a sequence of bytes.</summary>
    </member>
    <member name="M:System.Text.Encoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoder" /> class.</summary>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>[SECURITY CRITICAL] Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.</summary>
      <param name="chars">The address of a string of UTF-16 encoded characters to convert.</param>
      <param name="charCount">The number of characters in <paramref name="chars" /> to convert.</param>
      <param name="bytes">The address of a buffer to store the converted bytes.</param>
      <param name="byteCount">The maximum number of bytes in <paramref name="bytes" /> to use in the conversion.</param>
      <param name="flush">true to indicate no further data is to be converted; otherwise, false.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains true if all the characters specified by <paramref name="charCount" /> were converted; otherwise, false. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</summary>
      <param name="chars">An array of characters to convert.</param>
      <param name="charIndex">The zero-based index of the first element of <paramref name="chars" /> to convert.</param>
      <param name="charCount">The number of elements of <paramref name="chars" /> to convert.</param>
      <param name="bytes">An array where the converted bytes are stored.</param>
      <param name="byteIndex">The zero-based index of the first element of <paramref name="bytes" /> in which data is stored.</param>
      <param name="byteCount">The maximum number of elements of <paramref name="bytes" /> to use in the conversion.</param>
      <param name="flush">true to indicate no further data is to be converted; otherwise, false.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains true if all the characters specified by <paramref name="charCount" /> were converted; otherwise, false. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> or <paramref name="bytes" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />, <paramref name="charCount" />, <paramref name="byteIndex" />, or <paramref name="byteCount" /> is less than zero.-or-The length of <paramref name="chars" /> - <paramref name="charIndex" /> is less than <paramref name="charCount" />.-or-The length of <paramref name="bytes" /> - <paramref name="byteIndex" /> is less than <paramref name="byteCount" />.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Encoder.GetByteCount" /> method.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
      <summary>[SECURITY CRITICAL] When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer. A parameter indicates whether to clear the internal state of the encoder after the calculation.</summary>
      <returns>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false. </param>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.</summary>
      <returns>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The zero-based index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
      <summary>[SECURITY CRITICAL] When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the encoder after the conversion.</summary>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
      <param name="byteCount">The maximum number of bytes to write. </param>
      <param name="flush">true to clear the internal state of the encoder after the conversion; otherwise, false. </param>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="charIndex">The zero-based index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The zero-based index at which to start writing the resulting sequence of bytes. </param>
      <param name="flush">true to clear the internal state of the encoder after the conversion; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="T:System.Text.EncoderFallbackException">
      <summary>The exception that is thrown when an encoder fallback operation fails. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException" /> class. A parameter specifies the error message.</summary>
      <param name="message">An error message.</param>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException" /> class. Parameters specify the error message and the inner exception that is the cause of this exception.</summary>
      <param name="message">An error message.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknown">
      <summary>Gets the input character that caused the exception.</summary>
      <returns>The character that cannot be encoded.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownHigh">
      <summary>Gets the high component character of the surrogate pair that caused the exception.</summary>
      <returns>The high component character of the surrogate pair that cannot be encoded.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownLow">
      <summary>Gets the low component character of the surrogate pair that caused the exception.</summary>
      <returns>The low component character of the surrogate pair that cannot be encoded.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.Index">
      <summary>Gets the index position in the input buffer of the character that caused the exception.</summary>
      <returns>The index position in the input buffer of the character that cannot be encoded.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackException.IsUnknownSurrogate">
      <summary>Indicates whether the input that caused the exception is a surrogate pair.</summary>
      <returns>true if the input was a surrogate pair; otherwise, false.</returns>
    </member>
    <member name="T:System.Text.Encoding">
      <summary>Represents a character encoding.</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</summary>
    </member>
    <member name="P:System.Text.Encoding.BigEndianUnicode">
      <summary>Gets an encoding for the UTF-16 format using the big-endian byte order.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> for the UTF-16 format using the big-endian byte order.</returns>
    </member>
    <member name="M:System.Text.Encoding.Clone">
      <summary>When overridden in a derived class, creates a shallow copy of the current <see cref="T:System.Text.Encoding" /> object.</summary>
      <returns>A copy of the current <see cref="T:System.Text.Encoding" /> object.</returns>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
      <summary>Converts an entire byte array from one encoding to another.</summary>
      <returns>A byte array that contains the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
      <param name="srcEncoding">The encoding format of <paramref name="bytes" />. </param>
      <param name="dstEncoding">The target encoding format. </param>
      <param name="bytes">The bytes to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a range of bytes in a byte array from one encoding to another.</summary>
      <returns>An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
      <param name="srcEncoding">The encoding of the source array, <paramref name="bytes" />. </param>
      <param name="dstEncoding">The encoding of the output array. </param>
      <param name="bytes">The array of bytes to convert. </param>
      <param name="index">The zero-based index of the first element of <paramref name="bytes" /> to convert. </param>
      <param name="count">The number of bytes to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current instance.</summary>
      <returns>true if <paramref name="value" /> is an instance of <see cref="T:System.Text.Encoding" /> and is equal to the current instance; otherwise, false. </returns>
      <param name="value">The <see cref="T:System.Object" /> to compare with the current instance. </param>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</summary>
      <returns>The number of bytes produced by encoding all the characters in the specified character array.</returns>
      <param name="chars">The character array containing the characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The zero-based index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="s">The string that contains the set of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>[SECURITY CRITICAL] When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
      <param name="byteCount">The maximum number of bytes to write. </param>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
      <summary>When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</summary>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <param name="chars">The character array containing the characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</summary>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The zero-based index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="charIndex">The zero-based index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The zero-based index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String)">
      <summary>When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</summary>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <param name="s">The string containing the characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="s">The string containing the set of characters to encode. </param>
      <param name="charIndex">The zero-based index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The zero-based index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The zero-based index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
      <summary>When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</summary>
      <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</summary>
      <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The zero-based index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The zero-based index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The zero-based index at which to start writing the resulting set of characters. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetDecoder">
      <summary>When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts an encoded sequence of bytes into a sequence of characters.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoder">
      <summary>When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</summary>
      <returns>A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into an encoded sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String)">
      <summary>Returns the encoding associated with the specified name.</summary>
      <returns>The object associated with the specified name.</returns>
      <param name="name">The name of the preferred encoding. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not the name of a valid encoding.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
      <summary>When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <param name="charCount">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
      <summary>When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <param name="byteCount">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for a complete explanation).</exception>
    </member>
    <member name="M:System.Text.Encoding.GetPreamble">
      <summary>When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</summary>
      <returns>A byte array containing a sequence of bytes that specifies the encoding used.-or- A byte array of length zero, if a preamble is not required.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</summary>
      <returns>A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The zero-based index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="P:System.Text.Encoding.Unicode">
      <summary>Gets an encoding for the UTF-16 format using the little-endian byte order.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> for the UTF-16 format using the little-endian byte order.</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF8">
      <summary>Gets an encoding for the UTF-8 format.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> for the UTF-8 format.</returns>
    </member>
    <member name="P:System.Text.Encoding.WebName">
      <summary>When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</summary>
      <returns>The IANA name for the current <see cref="T:System.Text.Encoding" />.</returns>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>Represents a mutable string of characters. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class.</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified capacity.</summary>
      <param name="capacity">The suggested starting size of this instance. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class that starts with a specified capacity and can grow to a specified maximum.</summary>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />. </param>
      <param name="maxCapacity">The maximum number of characters the current string can contain. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> is less than one, <paramref name="capacity" /> is less than zero, or <paramref name="capacity" /> is greater than <paramref name="maxCapacity" />. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified string.</summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value" /> is null, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />). </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified string and capacity.</summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value" /> is null, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />). </param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class from the specified substring and capacity.</summary>
      <param name="value">The string that contains the substring used to initialize the value of this instance. If <paramref name="value" /> is null, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />). </param>
      <param name="startIndex">The position within <paramref name="value" /> where the substring begins. </param>
      <param name="length">The number of characters in the substring. </param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="length" /> is not a position within <paramref name="value" />. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>Appends the string representation of a specified Boolean value to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The Boolean value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>Appends the string representation of a specified 8-bit unsigned integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>Appends the string representation of a specified Unicode character to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The Unicode character to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>Appends a specified number of copies of the string representation of a Unicode character to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The character to append. </param>
      <param name="repeatCount">The number of times to append <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> is less than zero.-or- Enlarging the value of this instance would exceed its maximum capacity. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>Appends the string representation of the Unicode characters in a specified array to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The array of characters to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>Appends the string representation of a specified subarray of Unicode characters to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">A character array. </param>
      <param name="startIndex">The starting position in <paramref name="value" />. </param>
      <param name="charCount">The number of characters to append. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null, and <paramref name="startIndex" /> and <paramref name="charCount" /> are not zero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.-or- <paramref name="startIndex" /> is less than zero.-or- <paramref name="startIndex" /> + <paramref name="charCount" /> is less than the length of <paramref name="value" />.-or- Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>Appends the string representation of a specified double-precision floating-point number to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>Appends the string representation of a specified 16-bit signed integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>Appends the string representation of a specified 32-bit signed integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>Appends the string representation of a specified 64-bit signed integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>Appends the string representation of a specified object to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The object to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>Appends the string representation of a specified 8-bit signed integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>Appends the string representation of a specified single-precision floating-point number to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>Appends a copy of the specified string to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The <see cref="T:System.String" /> to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>Appends a copy of a specified substring to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The <see cref="T:System.String" /> that contains the substring to append. </param>
      <param name="startIndex">The starting position of the substring within <paramref name="value" />. </param>
      <param name="count">The number of characters in <paramref name="value" /> to append. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null, and <paramref name="startIndex" /> and <paramref name="count" /> are not zero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> less than zero.-or- <paramref name="startIndex" /> less than zero.-or- <paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="value" />.-or- Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>Appends the string representation of a specified 16-bit unsigned integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>Appends the string representation of a specified 32-bit unsigned integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>Appends the string representation of a specified 64-bit unsigned integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</summary>
      <returns>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" />, where each format item is replaced by the string representation of the corresponding object argument.</returns>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <param name="format">A composite format string. </param>
      <param name="args">An array of objects to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or-The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="args" /> array. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed the maximum capacity of this instance.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.</summary>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</returns>
      <param name="format">A composite format string. </param>
      <param name="args">An array of objects to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. -or-The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="args" /> array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed the maximum capacity of this instance.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>Appends the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>Appends a copy of the specified string and the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The <see cref="T:System.String" /> to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</summary>
      <returns>The maximum number of characters that can be contained in the memory allocated by the current instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than the current length of this instance.-or- The value specified for a set operation is greater than the maximum capacity. </exception>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>Gets or sets the character at the specified character position in this instance.</summary>
      <returns>The Unicode character at position <paramref name="index" />.</returns>
      <param name="index">The position of the character. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the bounds of this instance while setting a character. </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the bounds of this instance while getting a character. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>Removes all characters from the current <see cref="T:System.Text.StringBuilder" /> instance.</summary>
      <returns>An object whose <see cref="P:System.Text.StringBuilder.Length" /> is 0 (zero).</returns>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>Ensures that the capacity of this instance of <see cref="T:System.Text.StringBuilder" /> is at least the specified value.</summary>
      <returns>The new capacity of this instance.</returns>
      <param name="capacity">The minimum capacity to ensure. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.-or- Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if this instance and <paramref name="sb" /> have equal string, maximum capacity, and <see cref="P:System.Text.StringBuilder.Capacity" /> values; otherwise, false.</returns>
      <param name="sb">An object to compare with this instance or null. </param>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The character array to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.-or- Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">A character array. </param>
      <param name="startIndex">The starting index within <paramref name="value" />. </param>
      <param name="charCount">The number of characters to insert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null, and <paramref name="startIndex" /> and <paramref name="charCount" /> are not zero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />, <paramref name="startIndex" />, or <paramref name="charCount" /> is less than zero.-or- <paramref name="index" /> is greater than the length of this instance.-or- <paramref name="startIndex" /> plus <paramref name="charCount" /> is not a position within <paramref name="value" />.-or- Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>Inserts a string into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The string to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the current length of this instance. -or-The current length of this <see cref="T:System.Text.StringBuilder" /> object plus the length of <paramref name="value" /> exceeds the maximum capacity of this instance.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>Inserts one or more copies of a specified string into this instance at the specified character position.</summary>
      <returns>A reference to this instance after insertion has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The string to insert. </param>
      <param name="count">The number of times to insert <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the current length of this instance.-or- <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.OutOfMemoryException">The current length of this <see cref="T:System.Text.StringBuilder" /> object plus the length of <paramref name="value" /> times <paramref name="count" /> exceeds the maximum capacity of this instance.</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>Gets or sets the length of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <returns>The length of this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than zero or greater than the maximum capacity of this instance. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>Removes the specified range of characters from this instance.</summary>
      <returns>A reference to this instance after the excise operation has completed.</returns>
      <param name="startIndex">The zero-based position in this instance where removal begins. </param>
      <param name="length">The number of characters to remove. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="startIndex" /> or <paramref name="length" /> is less than zero, or <paramref name="startIndex" /> + <paramref name="length" /> is greater than the length of this instance. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>Replaces all occurrences of a specified character in this instance with another specified character.</summary>
      <returns>A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" />.</returns>
      <param name="oldChar">The character to replace. </param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />. </param>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</summary>
      <returns>A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> -1.</returns>
      <param name="oldChar">The character to replace. </param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />. </param>
      <param name="startIndex">The position in this instance where the substring begins. </param>
      <param name="count">The length of the substring. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of the value of this instance.-or- <paramref name="startIndex" /> or <paramref name="count" /> is less than zero. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>Replaces all occurrences of a specified string in this instance with another specified string.</summary>
      <returns>A reference to this instance with all instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" />.</returns>
      <param name="oldValue">The string to replace. </param>
      <param name="newValue">The string that replaces <paramref name="oldValue" />, or null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="oldvalue" /> is zero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</summary>
      <returns>A reference to this instance with all instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> - 1.</returns>
      <param name="oldValue">The string to replace. </param>
      <param name="newValue">The string that replaces <paramref name="oldValue" />, or null. </param>
      <param name="startIndex">The position in this instance where the substring begins. </param>
      <param name="count">The length of the substring. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="oldvalue" /> is zero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="count" /> indicates a character position not within this instance.-or- Enlarging the value of this instance would exceed its maximum capacity. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>Converts the value of this instance to a <see cref="T:System.String" />.</summary>
      <returns>A string whose value is the same as this instance.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>Converts the value of a substring of this instance to a <see cref="T:System.String" />.</summary>
      <returns>A string whose value is the same as the specified substring of this instance.</returns>
      <param name="startIndex">The starting position of the substring in this instance. </param>
      <param name="length">The length of the substring. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or- The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the length of the current instance. </exception>
    </member>
    <member name="T:System.Text.UnicodeEncoding">
      <summary>Represents a UTF-16 encoding of Unicode characters.</summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class. Parameters specify whether to use the big-endian byte order and whether to provide a Unicode byte order mark.</summary>
      <param name="bigEndian">true to use the big-endian byte order (most significant byte first), or false to use the little-endian byte order (least significant byte first). </param>
      <param name="byteOrderMark">true to specify that a Unicode byte order mark is provided; otherwise, false. </param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class. Parameters specify whether to use the big-endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</summary>
      <param name="bigEndian">true to use the big-endian byte order (most significant byte first); false to use the little-endian byte order (least significant byte first). </param>
      <param name="byteOrderMark">true to specify that a Unicode byte order mark is provided; otherwise, false. </param>
      <param name="throwOnInvalidBytes">true to specify that an exception should be thrown when an invalid encoding is detected; otherwise, false. </param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UnicodeEncoding" /> object.</summary>
      <returns>true if <paramref name="value" /> is an instance of <see cref="T:System.Text.UnicodeEncoding" /> and is equal to the current object; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to compare with the current object. </param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The zero-based index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
      <summary>Calculates the number of bytes produced by encoding the characters in the specified string.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="s">The string that contains the set of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>[SECURITY CRITICAL] Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
      <param name="byteCount">The maximum number of bytes to write. </param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified character array into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="charIndex">The zero-based index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The zero-based index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.-or- <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <param name="charIndex">The zero-based index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The zero-based index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.-or- <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The zero-based index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The zero-based index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The zero-based index at which to start writing the resulting set of characters. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing).-or- <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.-or- <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetDecoder">
      <summary>Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetEncoder">
      <summary>Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</summary>
      <returns>An object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current <see cref="T:System.Text.UnicodeEncoding" /> object.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
      <summary>Calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <param name="charCount">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
      <summary>Calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <param name="byteCount">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetPreamble">
      <summary>Returns a Unicode byte order mark encoded in UTF-16 format.</summary>
      <returns>A byte array containing the Unicode byte order mark, if the constructor for this instance requests a byte order mark. Otherwise, this method returns a zero-length byte array.</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes a range of bytes from a byte array into a string.</summary>
      <returns>A string object that contains the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The zero-based index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation).</exception>
    </member>
    <member name="T:System.Text.UTF8Encoding">
      <summary>Represents a UTF-8 encoding of Unicode characters.</summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class. A parameter specifies whether to provide a Unicode byte order mark.</summary>
      <param name="encoderShouldEmitUTF8Identifier">true to specify that a Unicode byte order mark is provided; otherwise, false. </param>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class. Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.</summary>
      <param name="encoderShouldEmitUTF8Identifier">true to specify that a Unicode byte order mark is provided; otherwise, false. </param>
      <param name="throwOnInvalidBytes">true to specify that an exception be thrown when an invalid encoding is detected; otherwise, false. </param>
    </member>
    <member name="M:System.Text.UTF8Encoding.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UTF8Encoding" /> object.</summary>
      <returns>true if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF8Encoding" /> and is equal to the current object; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to compare with the current instance. </param>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>Calculates the number of bytes that would be produced by encoding a set of characters from the specified character array.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The zero-based index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.String)">
      <summary>Calculates the number of bytes that would be produced by encoding the characters in the specified <see cref="T:System.String" />.</summary>
      <returns>The number of bytes that would be produced by encoding the specified characters.</returns>
      <param name="chars">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>[SECURITY CRITICAL] Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <returns>The actual number of bytes written at the location indicated by <paramref name="bytes" />.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
      <param name="byteCount">The maximum number of bytes to write. </param>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified character array into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="charIndex">The zero-based index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The zero-based index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.-or- <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified string into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="s">The string that contains the set of characters to encode. </param>
      <param name="charIndex">The zero-based index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The zero-based index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.-or- <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The zero-based index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The zero-based index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The zero-based index at which to start writing the resulting set of characters. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.-or- <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetDecoder">
      <summary>Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetEncoder">
      <summary>Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</summary>
      <returns>An object that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)">
      <summary>Calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <param name="charCount">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)">
      <summary>Calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <param name="byteCount">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetPreamble">
      <summary>Returns a Unicode byte order mark encoded in UTF-8 format.</summary>
      <returns>A byte array containing the Unicode byte order mark, if the constructor for this instance requests a byte order mark. Otherwise, this method returns a zero-length byte array.</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes a range of bytes from a byte array into a string.</summary>
      <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The zero-based index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String)">
      <summary>Encodes all the characters in the specified <see cref="T:System.String" /> into a sequence of bytes.</summary>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
    </member>
    <member name="T:System.Threading.AutoResetEvent">
      <summary>Notifies a waiting thread that an event has occurred. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value that indicates whether to set the initial state to signaled.</summary>
      <param name="initialState">true to set the initial state to signaled; false to set the initial state to non-signaled. </param>
    </member>
    <member name="T:System.Threading.EventWaitHandle">
      <summary>Represents a thread synchronization event.</summary>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Reset">
      <summary>Sets the state of the event to non-signaled, which causes threads to block.</summary>
      <returns>true if the operation succeeds; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Set">
      <summary>Sets the state of the event to signaled, which allows one or more waiting threads to proceed.</summary>
      <returns>true if the operation succeeds; otherwise, false.</returns>
    </member>
    <member name="T:System.Threading.Interlocked">
      <summary>Provides atomic operations for variables that are shared by multiple threads. </summary>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
      <summary>Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</summary>
      <returns>The new value stored at <paramref name="location1" />.</returns>
      <param name="location1">A variable that contains the first value to be added. The sum of the two values is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be added to the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
      <summary>Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</summary>
      <returns>The new value stored at <paramref name="location1" />.</returns>
      <param name="location1">A variable that contains the first value to be added. The sum of the two values is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be added to the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
      <summary>Compares two 32-bit signed integers for equality and, if they are equal, replaces one of the values.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination whose value is compared with <paramref name="comparand" /> and possibly replaced. </param>
      <param name="value">The value that replaces the destination value if the comparison results in equality. </param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
      <summary>Compares two 64-bit signed integers for equality and, if they are equal, replaces one of the values.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination whose value is compared with <paramref name="comparand" /> and possibly replaced. </param>
      <param name="value">The value that replaces the destination value if the comparison results in equality. </param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
      <summary>Compares two objects for reference equality and, if they are equal, replaces one of the objects.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination object that is compared with <paramref name="comparand" /> and possibly replaced. </param>
      <param name="value">The object that replaces the destination object if the comparison results in equality. </param>
      <param name="comparand">The object that is compared to the object at <paramref name="location1" />. </param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
      <summary>Compares two instances of the specified reference type <paramref name="T" /> for equality and, if they are equal, replaces one of them.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination whose value is compared with <paramref name="comparand" /> and possibly replaced. This is a reference parameter (ref in C#, ByRef in Visual Basic). </param>
      <param name="value">The value that replaces the destination value if the comparison results in equality. </param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />. </param>
      <typeparam name="T">The type to be used for <paramref name="location1" />, <paramref name="value" />, and <paramref name="comparand" />. This type must be a reference type.</typeparam>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int32@)">
      <summary>Decrements a specified 32-bit signed integer variable and stores the result, as an atomic operation.</summary>
      <returns>The decremented value.</returns>
      <param name="location">The variable whose value is to be decremented. </param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int64@)">
      <summary>Decrements the specified 64-bit signed integer variable and stores the result, as an atomic operation.</summary>
      <returns>The decremented value.</returns>
      <param name="location">The variable whose value is to be decremented. </param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
      <summary>Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</summary>
      <returns>The original value of <paramref name="location1" />.</returns>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
      <summary>Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</summary>
      <returns>The original value of <paramref name="location1" />.</returns>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
      <summary>Sets a variable of the specified type <paramref name="T" /> to a specified value and returns the original value, as an atomic operation.</summary>
      <returns>The original value of <paramref name="location1" />.</returns>
      <param name="location1">The variable to set to the specified value. This is a reference parameter (ref in C#, ByRef in Visual Basic). </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <typeparam name="T">The type to be used for <paramref name="location1" /> and <paramref name="value" />. This type must be a reference type.</typeparam>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int32@)">
      <summary>Increments a specified 32-bit signed variable and stores the result, as an atomic operation.</summary>
      <returns>The incremented value.</returns>
      <param name="location">The variable whose value is to be incremented. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int64@)">
      <summary>Increments a specified 64-bit signed integer variable and stores the result, as an atomic operation.</summary>
      <returns>The incremented value.</returns>
      <param name="location">The variable whose value is to be incremented. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a null pointer. </exception>
    </member>
    <member name="T:System.Threading.IOCompletionCallback">
      <summary>[SECURITY CRITICAL] Receives the error code, number of bytes, and overlapped value type when an I/O operation completes on the thread pool.</summary>
      <param name="errorCode">The error code. </param>
      <param name="numBytes">The number of bytes that are transferred. </param>
      <param name="pOVERLAP">A <see cref="T:System.Threading.NativeOverlapped" /> representing an unmanaged pointer to the native overlapped value type. </param>
    </member>
    <member name="T:System.Threading.ManualResetEvent">
      <summary>Notifies one or more waiting threads that an event has occurred. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value that indicates whether to set the initial state to signaled.</summary>
      <param name="initialState">true to set the initial state to signaled; false to set the initial state to non-signaled. </param>
    </member>
    <member name="T:System.Threading.Monitor">
      <summary>Provides a mechanism that synchronizes access to objects.</summary>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object)">
      <summary>Acquires an exclusive lock on the specified object.</summary>
      <param name="obj">The object on which to acquire the monitor lock. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
      <summary>Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to wait. </param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Monitor.Exit(System.Object)">
      <summary>Releases an exclusive lock on the specified object.</summary>
      <param name="obj">The object on which to release the lock. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread does not own the lock for the specified object. </exception>
    </member>
    <member name="M:System.Threading.Monitor.Pulse(System.Object)">
      <summary>Notifies a thread in the waiting queue of a change in the locked object's state.</summary>
      <param name="obj">The object a thread is waiting for. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object. </exception>
    </member>
    <member name="M:System.Threading.Monitor.PulseAll(System.Object)">
      <summary>Notifies all waiting threads of a change in the object's state.</summary>
      <param name="obj">The object that sends the pulse. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object. </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object)">
      <summary>Attempts to acquire an exclusive lock on the specified object.</summary>
      <returns>true if the current thread acquires the lock; otherwise, false.</returns>
      <param name="obj">The object on which to acquire the lock. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
      <summary>Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to acquire the lock. </param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
      <summary>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</summary>
      <returns>true if the current thread acquires the lock; otherwise, false.</returns>
      <param name="obj">The object on which to acquire the lock. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the lock. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
      <summary>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to acquire the lock. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the lock. </param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
      <summary>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</summary>
      <returns>true if the current thread acquires the lock without blocking; otherwise, false.</returns>
      <param name="obj">The object on which to acquire the lock. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
      <summary>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to acquire the lock. </param>
      <param name="timeout">The amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock.</summary>
      <returns>true if the call returned because the caller reacquired the lock for the specified object. This method does not return if the lock is not reacquired.</returns>
      <param name="obj">The object on which to wait. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object. </exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</summary>
      <returns>true if the lock was reacquired before the specified time elapsed; false if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</returns>
      <param name="obj">The object on which to wait. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait before the thread enters the ready queue. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</summary>
      <returns>true if the lock was reacquired before the specified time elapsed; false if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</returns>
      <param name="obj">The object on which to wait. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="T:System.Threading.NativeOverlapped">
      <summary>Provides an explicit layout that is visible from unmanaged code and that will have the same layout as the Win32 OVERLAPPED structure with additional reserved fields at the end.</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.EventHandle">
      <summary>Specifies the handle to an event set to the signaled state when the operation is complete. The calling process must set this member either to zero or to a valid event handle before calling any overlapped functions.</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalHigh">
      <summary>Specifies the length of the data transferred. Reserved for operating system use.</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalLow">
      <summary>Specifies a system-dependent status. Reserved for operating system use.</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetHigh">
      <summary>Specifies the high word of the byte offset at which to start the transfer.</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetLow">
      <summary>Specifies a file position at which to start the transfer.</summary>
    </member>
    <member name="T:System.Threading.Overlapped">
      <summary>Provides a managed representation of a Win32 OVERLAPPED structure, including methods to transfer information from an <see cref="T:System.Threading.Overlapped" /> instance to a <see cref="T:System.Threading.NativeOverlapped" /> structure.</summary>
    </member>
    <member name="M:System.Threading.Overlapped.#ctor">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Threading.Overlapped" /> class.</summary>
    </member>
    <member name="P:System.Threading.Overlapped.AsyncResult">
      <summary>Gets or sets the object that provides status information on the I/O operation.</summary>
      <returns>An object that implements the <see cref="T:System.IAsyncResult" /> interface.</returns>
    </member>
    <member name="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
      <summary>[SECURITY CRITICAL] Frees the unmanaged memory associated with a native overlapped structure allocated by the <see cref="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)" /> method.</summary>
      <param name="nativeOverlappedPtr">A pointer to the <see cref="T:System.Threading.NativeOverlapped" /> structure to be freed.</param>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetHigh">
      <summary>Gets or sets the high-order word of the file position at which to start the transfer. The file position is a byte offset from the start of the file.</summary>
      <returns>An <see cref="T:System.Int32" /> value representing the high word of the file position.</returns>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetLow">
      <summary>Gets or sets the low-order word of the file position at which to start the transfer. The file position is a byte offset from the start of the file.</summary>
      <returns>An <see cref="T:System.Int32" /> value representing the low word of the file position.</returns>
    </member>
    <member name="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
      <summary>[SECURITY CRITICAL] Packs the current instance into a <see cref="T:System.Threading.NativeOverlapped" /> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete and a managed object that serves as a buffer.</summary>
      <returns>An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure. </returns>
      <param name="iocb">An <see cref="T:System.Threading.IOCompletionCallback" /> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</param>
      <param name="userData">An object or array of objects representing the input or output buffer for the operation. Each object represents a buffer, for example an array of bytes.</param>
    </member>
    <member name="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
      <summary>[SECURITY CRITICAL] Unpacks the specified unmanaged <see cref="T:System.Threading.NativeOverlapped" /> structure into a managed <see cref="T:System.Threading.Overlapped" /> object. </summary>
      <returns>An <see cref="T:System.Threading.Overlapped" /> object containing the information unpacked from the native structure.</returns>
      <param name="nativeOverlappedPtr">An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure.</param>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</summary>
      <param name="obj">An object that contains data for the thread procedure.</param>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>Represents a handle that has been registered when calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>Cancels a registered wait operation issued by the <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> method.</summary>
      <returns>true if the function succeeds; otherwise, false.</returns>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to be signaled. </param>
    </member>
    <member name="T:System.Threading.SendOrPostCallback">
      <summary>Represents a method to be called when a message is to be dispatched to a synchronization context.  </summary>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="T:System.Threading.SynchronizationContext">
      <summary>Provides the basic functionality for propagating a synchronization context in various synchronization models. </summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Threading.SynchronizationContext" /> class.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.CreateCopy">
      <summary>When overridden in a derived class, creates a copy of the synchronization context.  </summary>
      <returns>A new <see cref="T:System.Threading.SynchronizationContext" /> object.</returns>
    </member>
    <member name="P:System.Threading.SynchronizationContext.Current">
      <summary>Gets the synchronization context for the current thread.</summary>
      <returns>A <see cref="T:System.Threading.SynchronizationContext" /> object representing the current synchronization context.</returns>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationCompleted">
      <summary>When overridden in a derived class, responds to the notification that an operation has completed.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationStarted">
      <summary>When overridden in a derived class, responds to the notification that an operation has started.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>When overridden in a derived class, dispatches an asynchronous message to a synchronization context.</summary>
      <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>When overridden in a derived class, dispatches a synchronous message to a synchronization context.</summary>
      <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)">
      <summary>[SECURITY CRITICAL] Sets the current synchronization context.</summary>
      <param name="syncContext">The <see cref="T:System.Threading.SynchronizationContext" /> object to be set.</param>
    </member>
    <member name="T:System.Threading.SynchronizationLockException">
      <summary>The exception that is thrown when a method requires the caller to own the lock on a given Monitor, and the method is invoked by a caller that does not own that lock.</summary>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>Creates and controls a thread, and gets its status.</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</summary>
      <param name="start">A delegate that represents the methods to be invoked when this thread begins executing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> is null. </exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</summary>
      <param name="start">A delegate that represents the methods to be invoked when this thread begins executing. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="start" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>[SECURITY CRITICAL] Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.</summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>Gets or sets the culture for the current thread.</summary>
      <returns>The culture for the current thread.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to null.</exception>
      <exception cref="T:System.ArgumentException">The property is set to a culture that cannot be used to locate a resource file. </exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>Gets the currently running thread.</summary>
      <returns>The currently running thread.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</summary>
      <returns>The current culture.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to null. </exception>
      <exception cref="T:System.ArgumentException">The property is set to a culture that cannot be used to locate a resource file. </exception>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>Returns the current domain in which the current thread is running.</summary>
      <returns>The current application domain of the running thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>Returns a hash code for the current thread.</summary>
      <returns>An integer hash code value.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>Gets a value that indicates the execution status of the current thread.</summary>
      <returns>true if this thread has been started and has not terminated normally or aborted; otherwise, false.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>Gets or sets a value that indicates whether a thread is a background thread.</summary>
      <returns>true if this thread is or is to become a background thread; otherwise, false.</returns>
      <exception cref="T:System.Threading.ThreadStateException">Execution of the thread has terminated. </exception>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>Blocks the calling thread until a thread terminates, while continuing to perform standard COM and SendMessage pumping.</summary>
      <exception cref="T:System.Threading.ThreadStateException">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state. </exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>Blocks the calling thread until a thread terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</summary>
      <returns>true if the thread has terminated; false if the thread has not terminated after the amount of time specified by the <paramref name="millisecondsTimeout" /> parameter has elapsed.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds. </exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread has not been started. </exception>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>Gets a unique identifier for the current, managed thread.</summary>
      <returns>A unique identifier for this managed thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>Ensures that memory accesses that appear before the call to <see cref="M:System.Threading.Thread.MemoryBarrier" />, in program order, will not execute after the call to <see cref="M:System.Threading.Thread.MemoryBarrier" />, and that memory accesses that appear after the call to <see cref="M:System.Threading.Thread.MemoryBarrier" /> will not execute before that call.</summary>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>Gets or sets the name of the thread.</summary>
      <returns>A string that contains the name of the thread, or null if no name was set.</returns>
      <exception cref="T:System.InvalidOperationException">A set operation was requested, and the Name property has already been set. </exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>Suspends the current thread for a specified time.</summary>
      <param name="millisecondsTimeout">The number of milliseconds for which the thread is blocked. Specify 1 (one) to yield to other threads that might be waiting to execute. (We recommend a wait of 1 instead of a wait of 0.) Specify <see cref="F:System.Threading.Timeout.Infinite" /> to block the thread indefinitely. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The time-out value is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>Blocks the current thread for a specified time.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> set to the amount of time for which the thread is blocked. Specify a duration of 1 millisecond to yield to other threads that might be waiting to execute. (We recommend a wait of 1 millisecond instead of a wait of 0.) Specify a duration of -1 milliseconds to block the thread indefinitely. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative and is not equal to -1 milliseconds, or it is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds. </exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>Causes a thread to wait the number of times defined by the <paramref name="iterations" /> parameter.</summary>
      <param name="iterations">A 32-bit signed integer that defines how long a thread should wait. </param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />.</summary>
      <exception cref="T:System.Threading.ThreadStateException">The thread has already been started. </exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread. </exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />, and optionally supplies an object containing data to be used by the method that the thread executes.</summary>
      <param name="parameter">An object that contains data to be used by the method that the thread executes.</param>
      <exception cref="T:System.Threading.ThreadStateException">The thread has already been started. </exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread. </exception>
      <exception cref="T:System.InvalidOperationException">This thread was created by using a <see cref="T:System.Threading.ThreadStart" /> delegate instead of a <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate.</exception>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>Gets a value that contains the states of the current thread.</summary>
      <returns>One of the enumeration values that indicates the state of the current thread. The initial value is Unstarted.</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>The exception that is thrown when a call is made to the <see cref="M:System.Threading.Thread.Abort" /> method. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>Provides a pool of threads that can be used to post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>[SECURITY CRITICAL] Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</summary>
      <returns>true if the handle is bound; otherwise, false.</returns>
      <param name="osHandle">An object that wraps the operating system handle. The handle must have been opened for overlapped I/O on the unmanaged side.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>Retrieves the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.</summary>
      <param name="workerThreads">The maximum number of worker threads in the thread pool. </param>
      <param name="completionPortThreads">The maximum number of asynchronous I/O threads in the thread pool. </param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>Retrieves the number of idle threads the thread pool maintains in anticipation of new requests.</summary>
      <param name="workerThreads">The minimum number of idle worker threads currently maintained by the thread pool. </param>
      <param name="completionPortThreads">The minimum number of idle asynchronous I/O threads currently maintained by the thread pool. </param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>Queues a method for execution. The method executes when a thread pool thread becomes available.</summary>
      <returns>true if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</returns>
      <param name="callBack">The method to execute. </param>
      <exception cref="T:System.NotSupportedException">The common language runtime (CLR) is hosted, and the host does not support this action.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> is null.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Queues a method for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.</summary>
      <returns>true if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</returns>
      <param name="callBack">The method to execute. </param>
      <param name="state">An object that contains data to be used by the method. </param>
      <exception cref="T:System.NotSupportedException">The common language runtime (CLR) is hosted, and the host does not support this action.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> is null.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</summary>
      <returns>The registered wait handle.</returns>
      <param name="waitObject">The wait handle to register.</param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</summary>
      <returns>The registered wait handle.</returns>
      <param name="waitObject">The wait handle to register.</param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</summary>
      <returns>The registered wait handle.</returns>
      <param name="waitObject">The wait handle to register.</param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object passed to the delegate. </param>
      <param name="timeout">The time-out represented by a <see cref="T:System.TimeSpan" />. If <paramref name="timeout" /> is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="timeout" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout" /> parameter is less than -1. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</summary>
      <returns>The registered wait handle.</returns>
      <param name="waitObject">The wait handle to register. </param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Sets the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.</summary>
      <returns>true if the change is successful; otherwise, false.</returns>
      <param name="workerThreads">The maximum number of worker threads in the thread pool. </param>
      <param name="completionPortThreads">The maximum number of asynchronous I/O threads in the thread pool. </param>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Sets the number of idle threads the thread pool maintains in anticipation of new requests.</summary>
      <returns>true if the change is successful; otherwise, false.</returns>
      <param name="workerThreads">The new minimum number of idle worker threads to be maintained by the thread pool. </param>
      <param name="completionPortThreads">The new minimum number of idle asynchronous I/O threads to be maintained by the thread pool. </param>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary>[SECURITY CRITICAL] Queues an overlapped I/O operation for execution.</summary>
      <returns>true if the operation was successfully queued to an I/O completion port; otherwise, false.</returns>
      <param name="overlapped">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</param>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>The exception that is thrown when a failure occurs in a managed thread after the underlying operating system thread has been started, but before the thread is ready to execute user code. </summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>Specifies the execution states of a <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>The thread has been started, it is not blocked, and there is no pending <see cref="T:System.Threading.ThreadAbortException" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>The thread is being requested to stop. This is for internal use only.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>The thread has been marked for suspension.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the <see cref="P:System.Threading.Thread.IsBackground" /> property.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>The <see cref="M:System.Threading.Thread.Start" /> method has not been invoked on the thread.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>The thread has stopped.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>The thread is blocked. This could be the result of calling <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> or <see cref="M:System.Threading.Thread.Join" />, of requesting a lock — for example, by calling <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> or <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" /> — or of waiting on a thread synchronization object such as <see cref="T:System.Threading.ManualResetEvent" />. </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>The thread has been suspended.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>The <see cref="M:System.Threading.Thread.Abort" /> method has been invoked on the thread, but the thread has not yet received the pending <see cref="T:System.Threading.ThreadAbortException" /> that will attempt to terminate it.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>The thread state includes <see cref="F:System.Threading.ThreadState.AbortRequested" /> and the thread is now dead, but its state has not yet changed to <see cref="F:System.Threading.ThreadState.Stopped" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>The exception that is thrown when a <see cref="T:System.Threading.Thread" /> is in an invalid <see cref="P:System.Threading.Thread.ThreadState" /> for the method call.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>Contains a constant that is used to specify an infinite amount of time. This class cannot be inherited. </summary>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>A constant used to specify an infinite waiting period. This field is constant.</summary>
    </member>
    <member name="T:System.Threading.Timer">
      <summary>Provides a mechanism for executing a method at specified intervals. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class with an infinite interval and an infinite due time, using the newly created <see cref="T:System.Threading.Timer" /> object as the state object. </summary>
      <param name="callback">A delegate that represents a method to be executed.</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class, using a 32-bit signed integer to specify the time interval.</summary>
      <param name="callback">A delegate that represents a method to be executed. </param>
      <param name="state">An object that contains information to be used by the callback method, or null. </param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify 0 (zero) to start the timer immediately. </param>
      <param name="period">The time interval between invocations of <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="callback" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class, using 64-bit signed integers to measure time intervals.</summary>
      <param name="callback">A delegate that represents a method to be executed. </param>
      <param name="state">An object that contains information to be used by the callback method, or null. </param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify 0 (zero) to start the timer immediately. </param>
      <param name="period">The time interval between invocations of <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. -or-The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294 (<see cref="F:System.UInt32.MaxValue" /> - 1).</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="callback" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</summary>
      <param name="callback">A delegate that represents a method to be executed. </param>
      <param name="state">An object that contains information to be used by the callback method, or null. </param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> is invoked. Specify -1 (negative one) milliseconds to prevent the timer from starting. Specify 0 (zero) to start the timer immediately. </param>
      <param name="period">The time interval between invocations of <paramref name="callback" />. Specify -1 (negative one) milliseconds to disable periodic signaling. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to -1 (negative one) milliseconds.-or-The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294 (<see cref="F:System.UInt32.MaxValue" /> - 1) milliseconds. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="callback" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class, using 32-bit unsigned integers to measure time intervals.</summary>
      <param name="callback">A delegate that represents a method to be executed. </param>
      <param name="state">An object that contains information to be used by the callback method, or null. </param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds. Specify <see cref="F:System.UInt32.MaxValue" /> to prevent the timer from starting. Specify 0 (zero) to start the timer immediately. </param>
      <param name="period">The time interval between invocations of <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.UInt32.MaxValue" /> to disable periodic signaling. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="callback" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
      <summary>Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</summary>
      <returns>true if the current instance has not been disposed; otherwise, false.</returns>
      <param name="dueTime">The amount of time to delay before the invoking the callback method that was specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify 0 (zero) to restart the timer immediately. </param>
      <param name="period">The time interval between invocations of the callback method that was specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer" /> has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
      <summary>Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</summary>
      <returns>true if the current instance has not been disposed; otherwise, false.</returns>
      <param name="dueTime">The amount of time to delay before the invoking the callback method that was specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify 0 (zero) to restart the timer immediately. </param>
      <param name="period">The time interval between invocations of the callback method that was specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer" /> has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. -or-The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294 (<see cref="F:System.UInt32.MaxValue" /> - 1).</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
      <summary>Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</summary>
      <returns>true if the current instance has not been disposed; otherwise, false.</returns>
      <param name="dueTime">The amount of time to delay before invoking the callback method that was specified when the <see cref="T:System.Threading.Timer" /> was constructed. Specify -1 (negative one) milliseconds to prevent the timer from restarting. Specify 0 (zero) to restart the timer immediately. </param>
      <param name="period">The time interval between invocations of the callback method that was specified when the <see cref="T:System.Threading.Timer" /> was constructed. Specify -1 (negative one) milliseconds to disable periodic signaling. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer" /> has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to -1 (negative one) milliseconds.-or-The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294 (<see cref="F:System.UInt32.MaxValue" /> - 1) milliseconds.</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
      <summary>Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</summary>
      <returns>true if the current instance has not been disposed; otherwise, false.</returns>
      <param name="dueTime">The amount of time to delay before the invoking the callback method that was specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.UInt32.MaxValue" /> to prevent the timer from restarting. Specify 0 (zero) to restart the timer immediately. </param>
      <param name="period">The time interval between invocations of the callback method that was specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.UInt32.MaxValue" /> to disable periodic signaling. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer" /> has already been disposed. </exception>
    </member>
    <member name="M:System.Threading.Timer.Dispose">
      <summary>Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</summary>
    </member>
    <member name="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
      <summary>Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.</summary>
      <returns>true if the function succeeds; otherwise, false.</returns>
      <param name="notifyObject">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the timer has been disposed of. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="notifyObject" /> parameter is null. </exception>
    </member>
    <member name="T:System.Threading.TimerCallback">
      <summary>Represents the method that handles calls from a <see cref="T:System.Threading.Timer" />.</summary>
      <param name="state">An object that contains application-specific information that is relevant to the method invoked by this delegate. -or- A null reference (Nothing in Visual Basic).</param>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>Represents a callback method to be executed by a thread pool thread. </summary>
      <param name="state">An object that contains information to be used by the callback method. </param>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Close">
      <summary>When overridden in a derived class, releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</summary>
      <param name="explicitDisposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>Represents an invalid native operating-system handle. This field is read-only.</summary>
    </member>
    <member name="P:System.Threading.WaitHandle.SafeWaitHandle">
      <summary>[SECURITY CRITICAL] Gets or sets the native operating-system handle.</summary>
      <returns>The native operating-system handle.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>Waits for all the elements in the specified array to receive a signal.</summary>
      <returns>true when every element in <paramref name="waitHandles" /> has received a signal; otherwise, the method never returns.</returns>
      <param name="waitHandles">An array that contains the objects for which the current instance will wait. This array cannot contain multiple references to the same object. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null. -or- One or more of the objects in the <paramref name="waitHandles" /> array are null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="waitHandles" /> array contains elements that are duplicates. -or-<paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to measure the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <returns>true when every element in <paramref name="waitHandles" /> has received a signal; otherwise, false.</returns>
      <param name="waitHandles">An array that contains the objects for which the current instance will wait. This array cannot contain multiple references to the same object. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null. -or- One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="waitHandles" /> array contains elements that are duplicates. -or-<paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to measure the time interval.</summary>
      <returns>true when every element in <paramref name="waitHandles" /> has received a signal; otherwise, false.</returns>
      <param name="waitHandles">An array that contains the objects for which the current instance will wait. This array cannot contain multiple references to the same object. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null. -or- One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="waitHandles" /> array contains elements that are duplicates. -or-<paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> .</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>Waits for any of the elements in the specified array to receive a signal.</summary>
      <returns>The array index of the object that satisfied the wait.</returns>
      <param name="waitHandles">An array that contains the objects for which the current instance will wait. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval.</summary>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</returns>
      <param name="waitHandles">An array that contains the objects for which the current instance will wait. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</summary>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</returns>
      <param name="waitHandles">An array that contains the objects for which the current instance will wait. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</summary>
      <returns>true if the current instance receives a signal. If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne" /> never returns.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using 32-bit signed integer to measure the time interval.</summary>
      <returns>true if the current instance receives a signal; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</summary>
      <returns>true if the current instance receives a signal; otherwise, false.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.-or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" /> operation timed out before any of the wait handles were signaled. This field is constant.</summary>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</summary>
      <param name="state">An object that contains information to be used by the callback method every time it executes. </param>
      <param name="timedOut">true to indicate that the <see cref="T:System.Threading.WaitHandle" /> timed out; false to indicate that it was signaled. </param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.SetThreadStaticContext(System.Threading.SynchronizationContext)">
      <summary>[SECURITY CRITICAL] Sets the current context for thread static data.</summary>
      <param name="syncContext">The context that is to be set.</param>
    </member>
    <member name="M:System.Threading.WaitHandle.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Threading.WaitHandle" />.</summary>
    </member>
    <member name="M:System.Threading.EventWaitHandle.WaitOne">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.EventWaitHandle" /> receives a signal. </summary>
      <returns>true if the current instance receives a signal. If the current instance is never signaled, <see cref="M:System.Threading.EventWaitHandle.WaitOne" /> never returns.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)"></member>
  </members>
</doc>